generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int          @id @default(autoincrement())
  email                String       @unique
  provider             Provider     @default(local)
  password             String?
  resetPasswordToken   String?
  confirmationToken    String?
  confirmed            Boolean?
  blocked              Boolean?
  phone                String?      @unique
  firstName            String
  lastName             String?
  avatarUrl            String?
  language             Language
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  avatarId             Int?
  idProvider           String?
  resetPasswordExpires DateTime?
  theme                Theme        @default(system)
  defaultTeamId        Int?
  accounts             Account[]
  sessions             Session[]
  teamMembers          TeamMember[] @relation("UserTeamMembers")
  avatar               File?        @relation("UserAvatar", fields: [avatarId], references: [id])
  team                 Team?        @relation("UserDefaultTeam", fields: [defaultTeamId], references: [id])

  @@map("users")
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  publicId  String?
  format    String?
  version   String?
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarFor User[]   @relation("UserAvatar")

  @@map("files")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Team {
  id                 Int                     @id @default(autoincrement())
  name               String
  description        String?
  token              String?                 @unique
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  ResponseRate       Int                     @default(0)
  totalActiveSurveys Int                     @default(0)
  totalOpenSurveys   Int                     @default(0)
  totalResponses     Int                     @default(0)
  totalSurveys       Int                     @default(0)
  questionOptions    QuestionOption[]
  questionResponses  QuestionResponse[]
  questions          Question[]
  surveyResponses    SurveyResponse[]
  surveysStyle       SurveyStyle[]
  surveyTypes        SurveyType[]
  surveys            Survey[]
  members            TeamMember[]            @relation("TeamMembers")
  user               User[]                  @relation("UserDefaultTeam")
  responseSummaries  SurveyResponseSummary[]

  @@map("teams")
}

model TeamMember {
  id               Int              @id @default(autoincrement())
  isAdmin          Boolean
  canPost          Boolean
  canApprove       Boolean
  isOwner          Boolean
  teamMemberStatus TeamMemberStatus
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           Int
  teamId           Int
  team             Team             @relation("TeamMembers", fields: [teamId], references: [id])
  user             User             @relation("UserTeamMembers", fields: [userId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model SurveyType {
  id        String   @id @default(cuid())
  name      String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teamId    Int
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  surveys   Survey[]

  @@map("survey_types")
}

model Survey {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  status                 SurveyStatus            @default(draft)
  allowMultipleResponses Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  teamId                 Int
  typeId                 String?
  ResponseRate           Int                     @default(0)
  totalOpenSurveys       Int                     @default(0)
  totalResponses         Int                     @default(0)
  questions              Question[]
  responses              SurveyResponse[]
  style                  SurveyStyle?
  team                   Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  type                   SurveyType?             @relation(fields: [typeId], references: [id])
  SurveyResponseSummary  SurveyResponseSummary[]

  @@map("surveys")
}

model SurveyStyle {
  id                    String    @id @default(cuid())
  backgroundColor       String    @default("")
  textColor             String    @default("")
  buttonBackgroundColor String    @default("")
  buttonTextColor       String    @default("")
  margin                String    @default("16px 0px")
  padding               String    @default("16px")
  borderRadius          String    @default("6px")
  titleFontSize         String    @default("18px")
  bodyFontSize          String    @default("16px")
  fontFamily            String    @default("Inter")
  basicCSS              String    @default("")
  styleMode             StyleMode @default(basic)
  advancedCSS           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  surveyId              String    @unique
  teamId                Int
  border                String    @default("1px solid #222222")
  survey                Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  team                  Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("survey_styles")
}

model Question {
  id                    String                  @id @default(cuid())
  title                 String
  description           String?
  format                QuestionFormat
  required              Boolean                 @default(false)
  order                 Int
  yesLabel              String?
  noLabel               String?
  buttonLabel           String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  surveyId              String
  teamId                Int
  addOther              Boolean                 @default(false)
  options               QuestionOption[]
  responses             QuestionResponse[]
  survey                Survey                  @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  team                  Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  SurveyResponseSummary SurveyResponseSummary[]

  @@map("questions")
}

model QuestionOption {
  id                    String                  @id @default(cuid())
  text                  String
  order                 Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  questionId            String
  teamId                Int
  isOther               Boolean                 @default(false)
  question              Question                @relation(fields: [questionId], references: [id], onDelete: Cascade)
  team                  Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  responses             QuestionResponse[]
  SurveyResponseSummary SurveyResponseSummary[]

  @@map("question_options")
}

model SurveyResponse {
  id                    String                  @id @default(cuid())
  status                ResponseStatus          @default(pending)
  userId                String?
  userIp                String?
  extraInfo             String?
  submittedAt           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  surveyId              String
  teamId                Int
  questionResponses     QuestionResponse[]
  survey                Survey                  @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  team                  Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  SurveyResponseSummary SurveyResponseSummary[]

  @@map("survey_responses")
}

// The following model stores pre-aggregated summary data for survey responses by question.
// This enables efficient reporting and avoids recalculating counts on every request.

model SurveyResponseSummary {
  id            String   @id @default(cuid())
  surveyId      String
  questionId    String
  questionTitle String?
  responseId    String
  optionId      String? // null for open-ended or non-option questions
  textValue     String?
  isOther       Boolean? @default(false)
  numberValue   Int?
  booleanValue  Boolean?
  teamId        Int
  responseCount Int
  lastUpdated   DateTime @updatedAt

  // Relations
  survey   Survey          @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  question Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option   QuestionOption? @relation(fields: [optionId], references: [id])
  team     Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  response SurveyResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@unique([surveyId, questionId, optionId, teamId])
  @@unique([surveyId, questionId, numberValue, teamId])
  @@unique([surveyId, questionId, booleanValue, teamId])
  @@map("survey_response_summaries")
}

model QuestionResponse {
  id             String          @id @default(cuid())
  isOther        Boolean?        @default(false)
  textValue      String?
  numberValue    Int?
  booleanValue   Boolean?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  questionId     String
  questionTitle  String?
  questionFormat QuestionFormat?
  optionId       String?
  responseId     String
  teamId         Int
  option         QuestionOption? @relation(fields: [optionId], references: [id])
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  response       SurveyResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)
  team           Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("question_responses")
}

enum Language {
  en
  pt_BR
}

enum Provider {
  google
  local
}

enum TeamMemberStatus {
  invited
  accepted
  rejected
}

enum Theme {
  light
  dark
  system
}

enum SurveyStatus {
  draft
  published
  archived
}

enum QuestionFormat {
  YES_NO
  STAR_RATING
  LONG_TEXT
  STATEMENT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
}

enum ResponseStatus {
  pending
  completed
  abandoned
}

enum StyleMode {
  basic
  advanced
}
