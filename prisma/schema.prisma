// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  en
  pt_BR
}

enum Provider {
  google
  local
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  provider           Provider @default(local)
  password           String?
  resetPasswordToken String?
  confirmationToken  String?
  confirmed          Boolean?
  blocked            Boolean?
  phone              String?  @unique
  firstName          String
  lastName           String?
  avatarUrl          String?
  language           Language
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  avatar   File? @relation("UserAvatar", fields: [avatarId], references: [id])
  avatarId Int?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  @@map("users")
}

// Update File model to include project image relation
model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String
  publicId  String?
  format    String?
  version   String?
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  avatarFor User[] @relation("UserAvatar")

  @@map("files")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
