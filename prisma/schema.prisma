generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int             @id @default(autoincrement())
  email                String          @unique
  provider             Provider        @default(local)
  password             String?
  resetPasswordToken   String?
  confirmationToken    String?
  confirmed            Boolean?
  blocked              Boolean?
  phone                String?
  firstName            String
  lastName             String?
  position             String?
  companyName          String?
  country              String?
  linkedinUrl          String?
  twitterUrl           String?
  websiteUrl           String?
  githubUrl            String?
  avatarUrl            String?
  language             Language
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  avatarId             String?
  idProvider           String?
  resetPasswordExpires DateTime?
  theme                Theme           @default(system)
  defaultCompanyId     Int?
  accounts             Account[]
  sessions             Session[]
  companyMembers       CompanyMember[] @relation("UserCompanyMembers")
  avatar               File?           @relation("UserAvatar", fields: [avatarId], references: [id], onDelete: Cascade)
  company              Company?        @relation("UserDefaultCompany", fields: [defaultCompanyId], references: [id])
  files                File[]          @relation("UserFile")

  @@index([email])
  @@index([phone])
  @@index([resetPasswordToken])
  @@index([confirmationToken])
  @@index([defaultCompanyId])
  @@index([createdAt])
  @@map("users")
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  publicId  String?
  format    String?
  version   String?
  mimeType  String?
  size      Int?
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarFor User[]   @relation("UserAvatar")
  user      User?    @relation("UserFile", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@index([userId])
  @@map("files")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Company {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String?
  tokenApi             String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  members              CompanyMember[]        @relation("CompanyMembers")
  user                 User[]                 @relation("UserDefaultCompany")
  CustomerSubscription CustomerSubscription[]
  UsageTracking        UsageTracking[]

  @@index([createdAt])
  @@map("companies")
}

model CompanyMember {
  id                  Int                 @id @default(autoincrement())
  isAdmin             Boolean
  canPost             Boolean
  canApprove          Boolean
  isOwner             Boolean
  companyMemberStatus CompanyMemberStatus
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  userId              Int
  companyId           Int
  company             Company             @relation("CompanyMembers", fields: [companyId], references: [id])
  user                User                @relation("UserCompanyMembers", fields: [userId], references: [id])

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
  @@index([companyMemberStatus])
  @@index([isAdmin])
  @@index([isOwner])
  @@map("company_members")
}

model SubscriptionPlan {
  id                   String                 @id @default(cuid())
  planType             PlanType
  stripeProductId      String?
  stripePriceIdMonthly String?
  stripePriceIdYearly  String?
  priceMonthly         Decimal                @default(0) @db.Decimal(10, 2)
  priceYearly          Decimal                @default(0) @db.Decimal(10, 2)
  currency             String                 @default("USD")
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  subscriptions        CustomerSubscription[]

  @@index([planType])
  @@index([isActive])
  @@map("subscription_plans")
}

model CustomerSubscription {
  id                   String             @id @default(cuid())
  companyId            Int
  planId               String
  status               SubscriptionStatus @default(active)
  billingInterval      BillingInterval    @default(monthly)
  stripeCustomerId     String?
  stripeSubscriptionId String?            @unique
  cancellationDetails  String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  company              Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  usageTracking        UsageTracking[]

  @@index([companyId])
  @@index([planId])
  @@index([status])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([currentPeriodEnd])
  @@index([billingInterval])
  @@index([companyId, status])
  @@map("customer_subscriptions")
}

model UsageTracking {
  id             String               @id @default(cuid())
  companyId      Int
  subscriptionId String
  metricType     UsageMetricType
  currentUsage   Int                  @default(0)
  limitValue     Int
  periodStart    DateTime             @default(now())
  periodEnd      DateTime
  lastResetDate  DateTime?
  lastUpdated    DateTime             @default(now())
  createdAt      DateTime             @default(now())
  company        Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  subscription   CustomerSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@unique([companyId, metricType, periodStart])
  @@index([companyId])
  @@index([subscriptionId])
  @@index([metricType])
  @@index([periodStart])
  @@index([periodEnd])
  @@index([lastUpdated])
  @@map("usage_tracking")
}

enum Language {
  en
  pt_BR
}

enum Provider {
  google
  local
}

enum CompanyMemberStatus {
  invited
  accepted
  rejected
}

enum Theme {
  light
  dark
  system
}

enum PlanType {
  FREE
  STARTER
  PRO
  BUSINESS
  ENTERPRISE
}

enum BillingInterval {
  monthly
  yearly
}

enum SubscriptionStatus {
  pending
  active
  canceled
  past_due
  trialing
  incomplete
  incomplete_expired
  unpaid
}

enum UsageMetricType {
  ACTIVE_SURVEYS
  TOTAL_COMPLETED_RESPONSES
}
