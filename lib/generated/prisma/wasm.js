
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  provider: 'provider',
  password: 'password',
  resetPasswordToken: 'resetPasswordToken',
  confirmationToken: 'confirmationToken',
  confirmed: 'confirmed',
  blocked: 'blocked',
  phone: 'phone',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  language: 'language',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatarId: 'avatarId',
  idProvider: 'idProvider',
  resetPasswordExpires: 'resetPasswordExpires',
  theme: 'theme',
  defaultTeamId: 'defaultTeamId'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  publicId: 'publicId',
  format: 'format',
  version: 'version',
  mimeType: 'mimeType',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  tokenSurvery: 'tokenSurvery',
  tokenApi: 'tokenApi',
  branding: 'branding',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  responseRate: 'responseRate',
  totalActiveSurveys: 'totalActiveSurveys',
  totalOpenSurveys: 'totalOpenSurveys',
  totalResponses: 'totalResponses',
  totalSurveys: 'totalSurveys'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  isAdmin: 'isAdmin',
  canPost: 'canPost',
  canApprove: 'canApprove',
  isOwner: 'isOwner',
  teamMemberStatus: 'teamMemberStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  teamId: 'teamId'
};

exports.Prisma.SurveyTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId'
};

exports.Prisma.SurveyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  context: 'context',
  status: 'status',
  allowMultipleResponses: 'allowMultipleResponses',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId',
  typeId: 'typeId',
  responseRate: 'responseRate',
  totalOpenSurveys: 'totalOpenSurveys',
  totalResponses: 'totalResponses'
};

exports.Prisma.SurveyStyleScalarFieldEnum = {
  id: 'id',
  backgroundColor: 'backgroundColor',
  textColor: 'textColor',
  buttonBackgroundColor: 'buttonBackgroundColor',
  buttonTextColor: 'buttonTextColor',
  margin: 'margin',
  padding: 'padding',
  borderRadius: 'borderRadius',
  titleFontSize: 'titleFontSize',
  bodyFontSize: 'bodyFontSize',
  fontFamily: 'fontFamily',
  basicCSS: 'basicCSS',
  styleMode: 'styleMode',
  advancedCSS: 'advancedCSS',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  surveyId: 'surveyId',
  teamId: 'teamId',
  border: 'border'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  format: 'format',
  required: 'required',
  order: 'order',
  yesLabel: 'yesLabel',
  noLabel: 'noLabel',
  buttonLabel: 'buttonLabel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  surveyId: 'surveyId',
  teamId: 'teamId',
  addOther: 'addOther'
};

exports.Prisma.QuestionOptionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  questionId: 'questionId',
  teamId: 'teamId',
  isOther: 'isOther'
};

exports.Prisma.SurveyResponseScalarFieldEnum = {
  id: 'id',
  status: 'status',
  userId: 'userId',
  userIp: 'userIp',
  extraInfo: 'extraInfo',
  origin: 'origin',
  expiresAt: 'expiresAt',
  submittedAt: 'submittedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  surveyId: 'surveyId',
  teamId: 'teamId'
};

exports.Prisma.SurveyResponseSummaryScalarFieldEnum = {
  id: 'id',
  surveyId: 'surveyId',
  questionId: 'questionId',
  questionTitle: 'questionTitle',
  responseId: 'responseId',
  optionId: 'optionId',
  textValue: 'textValue',
  questionFormat: 'questionFormat',
  isOther: 'isOther',
  numberValue: 'numberValue',
  booleanValue: 'booleanValue',
  teamId: 'teamId',
  responseCount: 'responseCount',
  lastUpdated: 'lastUpdated'
};

exports.Prisma.QuestionResponseScalarFieldEnum = {
  id: 'id',
  isOther: 'isOther',
  textValue: 'textValue',
  numberValue: 'numberValue',
  booleanValue: 'booleanValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  questionId: 'questionId',
  questionTitle: 'questionTitle',
  questionFormat: 'questionFormat',
  optionId: 'optionId',
  responseId: 'responseId',
  teamId: 'teamId'
};

exports.Prisma.SubscriptionPlanScalarFieldEnum = {
  id: 'id',
  planType: 'planType',
  stripeProductId: 'stripeProductId',
  stripePriceIdMonthly: 'stripePriceIdMonthly',
  stripePriceIdYearly: 'stripePriceIdYearly',
  priceMonthly: 'priceMonthly',
  priceYearly: 'priceYearly',
  currency: 'currency',
  maxActiveSurveys: 'maxActiveSurveys',
  maxResponses: 'maxResponses',
  maxCompletedResponses: 'maxCompletedResponses',
  removeBranding: 'removeBranding',
  allowApiAccess: 'allowApiAccess',
  allowExport: 'allowExport',
  allowPublicPages: 'allowPublicPages',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerSubscriptionScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  planId: 'planId',
  status: 'status',
  billingInterval: 'billingInterval',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  cancellationDetails: 'cancellationDetails',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsageTrackingScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  subscriptionId: 'subscriptionId',
  metricType: 'metricType',
  currentUsage: 'currentUsage',
  limitValue: 'limitValue',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  lastResetDate: 'lastResetDate',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Language = exports.$Enums.Language = {
  en: 'en',
  pt_BR: 'pt_BR'
};

exports.Provider = exports.$Enums.Provider = {
  google: 'google',
  local: 'local'
};

exports.TeamMemberStatus = exports.$Enums.TeamMemberStatus = {
  invited: 'invited',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.Theme = exports.$Enums.Theme = {
  light: 'light',
  dark: 'dark',
  system: 'system'
};

exports.SurveyStatus = exports.$Enums.SurveyStatus = {
  draft: 'draft',
  published: 'published',
  archived: 'archived'
};

exports.QuestionFormat = exports.$Enums.QuestionFormat = {
  YES_NO: 'YES_NO',
  STAR_RATING: 'STAR_RATING',
  LONG_TEXT: 'LONG_TEXT',
  STATEMENT: 'STATEMENT',
  SINGLE_CHOICE: 'SINGLE_CHOICE',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE'
};

exports.ResponseStatus = exports.$Enums.ResponseStatus = {
  pending: 'pending',
  completed: 'completed',
  abandoned: 'abandoned'
};

exports.StyleMode = exports.$Enums.StyleMode = {
  basic: 'basic',
  advanced: 'advanced'
};

exports.PlanType = exports.$Enums.PlanType = {
  FREE: 'FREE',
  STARTER: 'STARTER',
  PRO: 'PRO',
  BUSINESS: 'BUSINESS',
  ENTERPRISE: 'ENTERPRISE'
};

exports.BillingInterval = exports.$Enums.BillingInterval = {
  monthly: 'monthly',
  yearly: 'yearly'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  pending: 'pending',
  active: 'active',
  canceled: 'canceled',
  past_due: 'past_due',
  trialing: 'trialing',
  incomplete: 'incomplete',
  incomplete_expired: 'incomplete_expired',
  unpaid: 'unpaid'
};

exports.UsageMetricType = exports.$Enums.UsageMetricType = {
  ACTIVE_SURVEYS: 'ACTIVE_SURVEYS',
  TOTAL_COMPLETED_RESPONSES: 'TOTAL_COMPLETED_RESPONSES'
};

exports.Prisma.ModelName = {
  User: 'User',
  File: 'File',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Team: 'Team',
  TeamMember: 'TeamMember',
  SurveyType: 'SurveyType',
  Survey: 'Survey',
  SurveyStyle: 'SurveyStyle',
  Question: 'Question',
  QuestionOption: 'QuestionOption',
  SurveyResponse: 'SurveyResponse',
  SurveyResponseSummary: 'SurveyResponseSummary',
  QuestionResponse: 'QuestionResponse',
  SubscriptionPlan: 'SubscriptionPlan',
  CustomerSubscription: 'CustomerSubscription',
  UsageTracking: 'UsageTracking'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/rafael/Documents/projects/meusurvey/lib/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/rafael/Documents/projects/meusurvey/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider        = \"prisma-client-js\"\n  output          = \"../lib/generated/prisma\"\n  previewFeatures = []\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                   Int          @id @default(autoincrement())\n  email                String       @unique\n  provider             Provider     @default(local)\n  password             String?\n  resetPasswordToken   String?\n  confirmationToken    String?\n  confirmed            Boolean?\n  blocked              Boolean?\n  phone                String?\n  firstName            String\n  lastName             String?\n  avatarUrl            String?\n  language             Language\n  createdAt            DateTime     @default(now())\n  updatedAt            DateTime     @updatedAt\n  avatarId             Int?\n  idProvider           String?\n  resetPasswordExpires DateTime?\n  theme                Theme        @default(system)\n  defaultTeamId        Int?\n  accounts             Account[]\n  sessions             Session[]\n  teamMembers          TeamMember[] @relation(\"UserTeamMembers\")\n  avatar               File?        @relation(\"UserAvatar\", fields: [avatarId], references: [id])\n  team                 Team?        @relation(\"UserDefaultTeam\", fields: [defaultTeamId], references: [id])\n\n  @@index([email])\n  @@index([phone])\n  @@index([resetPasswordToken])\n  @@index([confirmationToken])\n  @@index([defaultTeamId])\n  @@index([createdAt])\n  @@map(\"users\")\n}\n\nmodel File {\n  id        Int      @id @default(autoincrement())\n  name      String\n  url       String\n  publicId  String?\n  format    String?\n  version   String?\n  mimeType  String?\n  size      Int?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  avatarFor User[]   @relation(\"UserAvatar\")\n\n  @@map(\"files\")\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            Int\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@map(\"accounts\")\n}\n\nmodel Session {\n  id           String   @id @default(cuid())\n  sessionToken String   @unique\n  userId       Int\n  expires      DateTime\n  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"sessions\")\n}\n\nmodel VerificationToken {\n  identifier String\n  token      String   @unique\n  expires    DateTime\n\n  @@unique([identifier, token])\n  @@map(\"verification_tokens\")\n}\n\nmodel Team {\n  id                 Int                     @id @default(autoincrement())\n  name               String\n  description        String?\n  tokenSurvery       String?                 @unique\n  tokenApi           String?                 @unique\n  branding           Boolean                 @default(true)\n  createdAt          DateTime                @default(now())\n  updatedAt          DateTime                @updatedAt\n  responseRate       Float                   @default(0)\n  totalActiveSurveys Int                     @default(0)\n  totalOpenSurveys   Int                     @default(0)\n  totalResponses     Int                     @default(0)\n  totalSurveys       Int                     @default(0)\n  questionOptions    QuestionOption[]\n  questionResponses  QuestionResponse[]\n  questions          Question[]\n  surveyResponses    SurveyResponse[]\n  surveysStyle       SurveyStyle[]\n  surveyTypes        SurveyType[]\n  surveys            Survey[]\n  members            TeamMember[]            @relation(\"TeamMembers\")\n  user               User[]                  @relation(\"UserDefaultTeam\")\n  responseSummaries  SurveyResponseSummary[]\n  subscriptions      CustomerSubscription[]\n  usageTracking      UsageTracking[]\n\n  @@index([tokenSurvery])\n  @@index([tokenApi])\n  @@index([createdAt])\n  @@map(\"teams\")\n}\n\nmodel TeamMember {\n  id               Int              @id @default(autoincrement())\n  isAdmin          Boolean\n  canPost          Boolean\n  canApprove       Boolean\n  isOwner          Boolean\n  teamMemberStatus TeamMemberStatus\n  createdAt        DateTime         @default(now())\n  updatedAt        DateTime         @updatedAt\n  userId           Int\n  teamId           Int\n  team             Team             @relation(\"TeamMembers\", fields: [teamId], references: [id])\n  user             User             @relation(\"UserTeamMembers\", fields: [userId], references: [id])\n\n  @@unique([userId, teamId])\n  @@index([userId])\n  @@index([teamId])\n  @@index([teamMemberStatus])\n  @@index([isAdmin])\n  @@index([isOwner])\n  @@map(\"team_members\")\n}\n\nmodel SurveyType {\n  id        String   @id @default(cuid())\n  name      String\n  isDefault Boolean  @default(false)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  teamId    Int\n  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  surveys   Survey[]\n\n  @@index([teamId])\n  @@index([isDefault])\n  @@index([name])\n  @@map(\"survey_types\")\n}\n\nmodel Survey {\n  id                     String                  @id @default(cuid())\n  name                   String\n  description            String?\n  context                String?\n  status                 SurveyStatus            @default(draft)\n  allowMultipleResponses Boolean                 @default(true)\n  createdAt              DateTime                @default(now())\n  updatedAt              DateTime                @updatedAt\n  teamId                 Int\n  typeId                 String?\n  responseRate           Float                   @default(0)\n  totalOpenSurveys       Int                     @default(0)\n  totalResponses         Int                     @default(0)\n  questions              Question[]\n  responses              SurveyResponse[]\n  style                  SurveyStyle?\n  team                   Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  type                   SurveyType?             @relation(fields: [typeId], references: [id])\n  SurveyResponseSummary  SurveyResponseSummary[]\n\n  @@index([teamId])\n  @@index([typeId])\n  @@index([status])\n  @@index([createdAt])\n  @@index([teamId, status])\n  @@map(\"surveys\")\n}\n\nmodel SurveyStyle {\n  id                    String    @id @default(cuid())\n  backgroundColor       String    @default(\"\")\n  textColor             String    @default(\"\")\n  buttonBackgroundColor String    @default(\"\")\n  buttonTextColor       String    @default(\"\")\n  margin                String    @default(\"16px 0px\")\n  padding               String    @default(\"16px\")\n  borderRadius          String    @default(\"6px\")\n  titleFontSize         String    @default(\"18px\")\n  bodyFontSize          String    @default(\"16px\")\n  fontFamily            String    @default(\"Inter\")\n  basicCSS              String    @default(\"\")\n  styleMode             StyleMode @default(basic)\n  advancedCSS           String?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n  surveyId              String    @unique\n  teamId                Int\n  border                String    @default(\"1px solid #222222\")\n  survey                Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)\n  team                  Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)\n\n  @@map(\"survey_styles\")\n}\n\nmodel Question {\n  id                    String                  @id @default(cuid())\n  title                 String\n  description           String?\n  format                QuestionFormat\n  required              Boolean                 @default(false)\n  order                 Int\n  yesLabel              String?\n  noLabel               String?\n  buttonLabel           String?\n  createdAt             DateTime                @default(now())\n  updatedAt             DateTime                @updatedAt\n  surveyId              String\n  teamId                Int\n  addOther              Boolean                 @default(false)\n  options               QuestionOption[]\n  responses             QuestionResponse[]\n  survey                Survey                  @relation(fields: [surveyId], references: [id], onDelete: Cascade)\n  team                  Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  SurveyResponseSummary SurveyResponseSummary[]\n\n  @@index([surveyId])\n  @@index([teamId])\n  @@index([surveyId, order])\n  @@index([format])\n  @@map(\"questions\")\n}\n\nmodel QuestionOption {\n  id                    String                  @id @default(cuid())\n  text                  String\n  order                 Int\n  createdAt             DateTime                @default(now())\n  updatedAt             DateTime                @updatedAt\n  questionId            String\n  teamId                Int\n  isOther               Boolean                 @default(false)\n  question              Question                @relation(fields: [questionId], references: [id], onDelete: Cascade)\n  team                  Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  responses             QuestionResponse[]\n  SurveyResponseSummary SurveyResponseSummary[]\n\n  @@index([questionId])\n  @@index([teamId])\n  @@index([questionId, order])\n  @@index([isOther])\n  @@map(\"question_options\")\n}\n\nmodel SurveyResponse {\n  id                    String                  @id @default(cuid())\n  status                ResponseStatus          @default(pending)\n  userId                String?\n  userIp                String?\n  extraInfo             String?\n  origin                String?\n  expiresAt             DateTime?\n  submittedAt           DateTime?\n  createdAt             DateTime                @default(now())\n  updatedAt             DateTime                @updatedAt\n  surveyId              String\n  teamId                Int\n  questionResponses     QuestionResponse[]\n  survey                Survey                  @relation(fields: [surveyId], references: [id], onDelete: Cascade)\n  team                  Team                    @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  SurveyResponseSummary SurveyResponseSummary[]\n\n  @@index([surveyId])\n  @@index([teamId])\n  @@index([status])\n  @@index([userId])\n  @@index([submittedAt])\n  @@index([surveyId, status])\n  @@index([teamId, status])\n  @@map(\"survey_responses\")\n}\n\n// The following model stores pre-aggregated summary data for survey responses by question.\n// This enables efficient reporting and avoids recalculating counts on every request.\n\nmodel SurveyResponseSummary {\n  id             String          @id @default(cuid())\n  surveyId       String\n  questionId     String\n  questionTitle  String?\n  responseId     String\n  optionId       String? // null for open-ended or non-option questions\n  textValue      String?\n  questionFormat QuestionFormat?\n  isOther        Boolean?        @default(false)\n  numberValue    Int?\n  booleanValue   Boolean?\n  teamId         Int\n  responseCount  Int\n  lastUpdated    DateTime        @updatedAt\n\n  // Relations\n  survey   Survey          @relation(fields: [surveyId], references: [id], onDelete: Cascade)\n  question Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)\n  option   QuestionOption? @relation(fields: [optionId], references: [id])\n  team     Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  response SurveyResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)\n\n  @@unique([surveyId, questionId, optionId, teamId])\n  @@unique([surveyId, questionId, numberValue, teamId])\n  @@unique([surveyId, questionId, booleanValue, teamId])\n  @@index([surveyId])\n  @@index([questionId])\n  @@index([teamId])\n  @@index([responseId])\n  @@index([optionId])\n  @@index([questionFormat])\n  @@index([lastUpdated])\n  @@map(\"survey_response_summaries\")\n}\n\nmodel QuestionResponse {\n  id             String          @id @default(cuid())\n  isOther        Boolean?        @default(false)\n  textValue      String?\n  numberValue    Int?\n  booleanValue   Boolean?\n  createdAt      DateTime        @default(now())\n  updatedAt      DateTime        @updatedAt\n  questionId     String\n  questionTitle  String?\n  questionFormat QuestionFormat?\n  optionId       String?\n  responseId     String\n  teamId         Int\n  option         QuestionOption? @relation(fields: [optionId], references: [id])\n  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)\n  response       SurveyResponse  @relation(fields: [responseId], references: [id], onDelete: Cascade)\n  team           Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)\n\n  @@index([questionId])\n  @@index([responseId])\n  @@index([teamId])\n  @@index([optionId])\n  @@index([questionFormat])\n  @@index([questionId, optionId])\n  @@map(\"question_responses\")\n}\n\nmodel SubscriptionPlan {\n  id                    String                 @id @default(cuid())\n  planType              PlanType\n  stripeProductId       String?\n  stripePriceIdMonthly  String?\n  stripePriceIdYearly   String?\n  priceMonthly          Decimal                @default(0) @db.Decimal(10, 2)\n  priceYearly           Decimal                @default(0) @db.Decimal(10, 2)\n  currency              String                 @default(\"USD\")\n  maxActiveSurveys      Int                    @default(0)\n  maxResponses          Int                    @default(0)\n  maxCompletedResponses Int                    @default(0)\n  removeBranding        Boolean                @default(false)\n  allowApiAccess        Boolean                @default(false)\n  allowExport           Boolean                @default(false)\n  allowPublicPages      Boolean                @default(false)\n  isActive              Boolean                @default(true)\n  createdAt             DateTime               @default(now())\n  updatedAt             DateTime               @updatedAt\n  subscriptions         CustomerSubscription[]\n\n  @@index([planType])\n  @@index([isActive])\n  @@map(\"subscription_plans\")\n}\n\nmodel CustomerSubscription {\n  id                   String             @id @default(cuid())\n  teamId               Int\n  planId               String\n  status               SubscriptionStatus @default(active)\n  billingInterval      BillingInterval    @default(monthly)\n  stripeCustomerId     String?\n  stripeSubscriptionId String?            @unique\n  cancellationDetails  String?\n  currentPeriodStart   DateTime?\n  currentPeriodEnd     DateTime?\n  cancelAtPeriodEnd    Boolean            @default(false)\n  trialStart           DateTime?\n  trialEnd             DateTime?\n  createdAt            DateTime           @default(now())\n  updatedAt            DateTime           @updatedAt\n  team                 Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])\n  usageTracking        UsageTracking[]\n\n  @@index([teamId])\n  @@index([planId])\n  @@index([status])\n  @@index([stripeCustomerId])\n  @@index([stripeSubscriptionId])\n  @@index([currentPeriodEnd])\n  @@index([billingInterval])\n  @@index([teamId, status])\n  @@map(\"customer_subscriptions\")\n}\n\nmodel UsageTracking {\n  id             String               @id @default(cuid())\n  teamId         Int\n  subscriptionId String\n  metricType     UsageMetricType\n  currentUsage   Int                  @default(0)\n  limitValue     Int\n  periodStart    DateTime             @default(now())\n  periodEnd      DateTime\n  lastResetDate  DateTime?\n  lastUpdated    DateTime             @default(now())\n  createdAt      DateTime             @default(now())\n  team           Team                 @relation(fields: [teamId], references: [id], onDelete: Cascade)\n  subscription   CustomerSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)\n\n  @@unique([teamId, metricType, periodStart])\n  @@index([teamId])\n  @@index([subscriptionId])\n  @@index([metricType])\n  @@index([periodStart])\n  @@index([periodEnd])\n  @@index([lastUpdated])\n  @@map(\"usage_tracking\")\n}\n\nenum Language {\n  en\n  pt_BR\n}\n\nenum Provider {\n  google\n  local\n}\n\nenum TeamMemberStatus {\n  invited\n  accepted\n  rejected\n}\n\nenum Theme {\n  light\n  dark\n  system\n}\n\nenum SurveyStatus {\n  draft\n  published\n  archived\n}\n\nenum QuestionFormat {\n  YES_NO\n  STAR_RATING\n  LONG_TEXT\n  STATEMENT\n  SINGLE_CHOICE\n  MULTIPLE_CHOICE\n}\n\nenum ResponseStatus {\n  pending\n  completed\n  abandoned\n}\n\nenum StyleMode {\n  basic\n  advanced\n}\n\nenum PlanType {\n  FREE\n  STARTER\n  PRO\n  BUSINESS\n  ENTERPRISE\n}\n\nenum BillingInterval {\n  monthly\n  yearly\n}\n\nenum SubscriptionStatus {\n  pending\n  active\n  canceled\n  past_due\n  trialing\n  incomplete\n  incomplete_expired\n  unpaid\n}\n\nenum UsageMetricType {\n  ACTIVE_SURVEYS\n  TOTAL_COMPLETED_RESPONSES\n}\n",
  "inlineSchemaHash": "ac6f27534b7f8d121846da57597ba2b42774293d33b4c4aecd6baa3f576ff8a8",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"enum\",\"type\":\"Provider\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resetPasswordToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confirmationToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"confirmed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"blocked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"language\",\"kind\":\"enum\",\"type\":\"Language\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"avatarId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"idProvider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resetPasswordExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"theme\",\"kind\":\"enum\",\"type\":\"Theme\"},{\"name\":\"defaultTeamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"sessions\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"teamMembers\",\"kind\":\"object\",\"type\":\"TeamMember\",\"relationName\":\"UserTeamMembers\"},{\"name\":\"avatar\",\"kind\":\"object\",\"type\":\"File\",\"relationName\":\"UserAvatar\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"UserDefaultTeam\"}],\"dbName\":\"users\"},\"File\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"url\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"publicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"format\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"version\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"mimeType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"size\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"avatarFor\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserAvatar\"}],\"dbName\":\"files\"},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":\"accounts\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"}],\"dbName\":\"sessions\"},\"VerificationToken\":{\"fields\":[{\"name\":\"identifier\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification_tokens\"},\"Team\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenSurvery\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tokenApi\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"branding\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"responseRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalActiveSurveys\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalOpenSurveys\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalResponses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalSurveys\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionOptions\",\"kind\":\"object\",\"type\":\"QuestionOption\",\"relationName\":\"QuestionOptionToTeam\"},{\"name\":\"questionResponses\",\"kind\":\"object\",\"type\":\"QuestionResponse\",\"relationName\":\"QuestionResponseToTeam\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToTeam\"},{\"name\":\"surveyResponses\",\"kind\":\"object\",\"type\":\"SurveyResponse\",\"relationName\":\"SurveyResponseToTeam\"},{\"name\":\"surveysStyle\",\"kind\":\"object\",\"type\":\"SurveyStyle\",\"relationName\":\"SurveyStyleToTeam\"},{\"name\":\"surveyTypes\",\"kind\":\"object\",\"type\":\"SurveyType\",\"relationName\":\"SurveyTypeToTeam\"},{\"name\":\"surveys\",\"kind\":\"object\",\"type\":\"Survey\",\"relationName\":\"SurveyToTeam\"},{\"name\":\"members\",\"kind\":\"object\",\"type\":\"TeamMember\",\"relationName\":\"TeamMembers\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserDefaultTeam\"},{\"name\":\"responseSummaries\",\"kind\":\"object\",\"type\":\"SurveyResponseSummary\",\"relationName\":\"SurveyResponseSummaryToTeam\"},{\"name\":\"subscriptions\",\"kind\":\"object\",\"type\":\"CustomerSubscription\",\"relationName\":\"CustomerSubscriptionToTeam\"},{\"name\":\"usageTracking\",\"kind\":\"object\",\"type\":\"UsageTracking\",\"relationName\":\"TeamToUsageTracking\"}],\"dbName\":\"teams\"},\"TeamMember\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isAdmin\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"canPost\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"canApprove\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isOwner\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"teamMemberStatus\",\"kind\":\"enum\",\"type\":\"TeamMemberStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"TeamMembers\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserTeamMembers\"}],\"dbName\":\"team_members\"},\"SurveyType\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDefault\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"SurveyTypeToTeam\"},{\"name\":\"surveys\",\"kind\":\"object\",\"type\":\"Survey\",\"relationName\":\"SurveyToSurveyType\"}],\"dbName\":\"survey_types\"},\"Survey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"context\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SurveyStatus\"},{\"name\":\"allowMultipleResponses\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"typeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"responseRate\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalOpenSurveys\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalResponses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToSurvey\"},{\"name\":\"responses\",\"kind\":\"object\",\"type\":\"SurveyResponse\",\"relationName\":\"SurveyToSurveyResponse\"},{\"name\":\"style\",\"kind\":\"object\",\"type\":\"SurveyStyle\",\"relationName\":\"SurveyToSurveyStyle\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"SurveyToTeam\"},{\"name\":\"type\",\"kind\":\"object\",\"type\":\"SurveyType\",\"relationName\":\"SurveyToSurveyType\"},{\"name\":\"SurveyResponseSummary\",\"kind\":\"object\",\"type\":\"SurveyResponseSummary\",\"relationName\":\"SurveyToSurveyResponseSummary\"}],\"dbName\":\"surveys\"},\"SurveyStyle\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"backgroundColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"textColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buttonBackgroundColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buttonTextColor\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"margin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"padding\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"borderRadius\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"titleFontSize\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bodyFontSize\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fontFamily\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"basicCSS\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"styleMode\",\"kind\":\"enum\",\"type\":\"StyleMode\"},{\"name\":\"advancedCSS\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"surveyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"border\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"survey\",\"kind\":\"object\",\"type\":\"Survey\",\"relationName\":\"SurveyToSurveyStyle\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"SurveyStyleToTeam\"}],\"dbName\":\"survey_styles\"},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"format\",\"kind\":\"enum\",\"type\":\"QuestionFormat\"},{\"name\":\"required\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"yesLabel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"noLabel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buttonLabel\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"surveyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"addOther\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"options\",\"kind\":\"object\",\"type\":\"QuestionOption\",\"relationName\":\"QuestionToQuestionOption\"},{\"name\":\"responses\",\"kind\":\"object\",\"type\":\"QuestionResponse\",\"relationName\":\"QuestionToQuestionResponse\"},{\"name\":\"survey\",\"kind\":\"object\",\"type\":\"Survey\",\"relationName\":\"QuestionToSurvey\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"QuestionToTeam\"},{\"name\":\"SurveyResponseSummary\",\"kind\":\"object\",\"type\":\"SurveyResponseSummary\",\"relationName\":\"QuestionToSurveyResponseSummary\"}],\"dbName\":\"questions\"},\"QuestionOption\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isOther\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToQuestionOption\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"QuestionOptionToTeam\"},{\"name\":\"responses\",\"kind\":\"object\",\"type\":\"QuestionResponse\",\"relationName\":\"QuestionOptionToQuestionResponse\"},{\"name\":\"SurveyResponseSummary\",\"kind\":\"object\",\"type\":\"SurveyResponseSummary\",\"relationName\":\"QuestionOptionToSurveyResponseSummary\"}],\"dbName\":\"question_options\"},\"SurveyResponse\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ResponseStatus\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userIp\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"extraInfo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"origin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"surveyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionResponses\",\"kind\":\"object\",\"type\":\"QuestionResponse\",\"relationName\":\"QuestionResponseToSurveyResponse\"},{\"name\":\"survey\",\"kind\":\"object\",\"type\":\"Survey\",\"relationName\":\"SurveyToSurveyResponse\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"SurveyResponseToTeam\"},{\"name\":\"SurveyResponseSummary\",\"kind\":\"object\",\"type\":\"SurveyResponseSummary\",\"relationName\":\"SurveyResponseToSurveyResponseSummary\"}],\"dbName\":\"survey_responses\"},\"SurveyResponseSummary\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"surveyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"responseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"optionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"textValue\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionFormat\",\"kind\":\"enum\",\"type\":\"QuestionFormat\"},{\"name\":\"isOther\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"numberValue\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"booleanValue\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"responseCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"survey\",\"kind\":\"object\",\"type\":\"Survey\",\"relationName\":\"SurveyToSurveyResponseSummary\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToSurveyResponseSummary\"},{\"name\":\"option\",\"kind\":\"object\",\"type\":\"QuestionOption\",\"relationName\":\"QuestionOptionToSurveyResponseSummary\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"SurveyResponseSummaryToTeam\"},{\"name\":\"response\",\"kind\":\"object\",\"type\":\"SurveyResponse\",\"relationName\":\"SurveyResponseToSurveyResponseSummary\"}],\"dbName\":\"survey_response_summaries\"},\"QuestionResponse\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isOther\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"textValue\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"numberValue\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"booleanValue\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionTitle\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"questionFormat\",\"kind\":\"enum\",\"type\":\"QuestionFormat\"},{\"name\":\"optionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"responseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"option\",\"kind\":\"object\",\"type\":\"QuestionOption\",\"relationName\":\"QuestionOptionToQuestionResponse\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToQuestionResponse\"},{\"name\":\"response\",\"kind\":\"object\",\"type\":\"SurveyResponse\",\"relationName\":\"QuestionResponseToSurveyResponse\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"QuestionResponseToTeam\"}],\"dbName\":\"question_responses\"},\"SubscriptionPlan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"planType\",\"kind\":\"enum\",\"type\":\"PlanType\"},{\"name\":\"stripeProductId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripePriceIdMonthly\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripePriceIdYearly\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"priceMonthly\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"priceYearly\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxActiveSurveys\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxResponses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxCompletedResponses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"removeBranding\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowApiAccess\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowExport\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"allowPublicPages\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"subscriptions\",\"kind\":\"object\",\"type\":\"CustomerSubscription\",\"relationName\":\"CustomerSubscriptionToSubscriptionPlan\"}],\"dbName\":\"subscription_plans\"},\"CustomerSubscription\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"planId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"SubscriptionStatus\"},{\"name\":\"billingInterval\",\"kind\":\"enum\",\"type\":\"BillingInterval\"},{\"name\":\"stripeCustomerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stripeSubscriptionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cancellationDetails\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentPeriodStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"currentPeriodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelAtPeriodEnd\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"trialStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"trialEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"CustomerSubscriptionToTeam\"},{\"name\":\"plan\",\"kind\":\"object\",\"type\":\"SubscriptionPlan\",\"relationName\":\"CustomerSubscriptionToSubscriptionPlan\"},{\"name\":\"usageTracking\",\"kind\":\"object\",\"type\":\"UsageTracking\",\"relationName\":\"CustomerSubscriptionToUsageTracking\"}],\"dbName\":\"customer_subscriptions\"},\"UsageTracking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teamId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"subscriptionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metricType\",\"kind\":\"enum\",\"type\":\"UsageMetricType\"},{\"name\":\"currentUsage\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"limitValue\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"periodStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"periodEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastResetDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"team\",\"kind\":\"object\",\"type\":\"Team\",\"relationName\":\"TeamToUsageTracking\"},{\"name\":\"subscription\",\"kind\":\"object\",\"type\":\"CustomerSubscription\",\"relationName\":\"CustomerSubscriptionToUsageTracking\"}],\"dbName\":\"usage_tracking\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

