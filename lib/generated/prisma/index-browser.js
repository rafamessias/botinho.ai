
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  idProvider: 'idProvider',
  email: 'email',
  provider: 'provider',
  password: 'password',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  confirmationToken: 'confirmationToken',
  confirmed: 'confirmed',
  blocked: 'blocked',
  phone: 'phone',
  firstName: 'firstName',
  lastName: 'lastName',
  avatarUrl: 'avatarUrl',
  language: 'language',
  theme: 'theme',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatarId: 'avatarId',
  defaultTeamId: 'defaultTeamId'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  publicId: 'publicId',
  format: 'format',
  version: 'version',
  mimeType: 'mimeType',
  size: 'size',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  isAdmin: 'isAdmin',
  canPost: 'canPost',
  canApprove: 'canApprove',
  isOwner: 'isOwner',
  teamMemberStatus: 'teamMemberStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  teamId: 'teamId'
};

exports.Prisma.SurveyTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId'
};

exports.Prisma.SurveyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  enabled: 'enabled',
  allowMultipleResponses: 'allowMultipleResponses',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId',
  typeId: 'typeId'
};

exports.Prisma.SurveyStyleScalarFieldEnum = {
  id: 'id',
  backgroundColor: 'backgroundColor',
  textColor: 'textColor',
  buttonBackgroundColor: 'buttonBackgroundColor',
  buttonTextColor: 'buttonTextColor',
  margin: 'margin',
  padding: 'padding',
  borderRadius: 'borderRadius',
  titleFontSize: 'titleFontSize',
  bodyFontSize: 'bodyFontSize',
  fontFamily: 'fontFamily',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  surveyId: 'surveyId',
  teamId: 'teamId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  format: 'format',
  required: 'required',
  order: 'order',
  yesLabel: 'yesLabel',
  noLabel: 'noLabel',
  buttonLabel: 'buttonLabel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  surveyId: 'surveyId',
  teamId: 'teamId'
};

exports.Prisma.QuestionOptionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  questionId: 'questionId',
  teamId: 'teamId'
};

exports.Prisma.SurveyResponseScalarFieldEnum = {
  id: 'id',
  status: 'status',
  submittedAt: 'submittedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  surveyId: 'surveyId',
  teamId: 'teamId'
};

exports.Prisma.QuestionResponseScalarFieldEnum = {
  id: 'id',
  isOther: 'isOther',
  textValue: 'textValue',
  numberValue: 'numberValue',
  booleanValue: 'booleanValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  questionId: 'questionId',
  optionId: 'optionId',
  responseId: 'responseId',
  teamId: 'teamId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Provider = exports.$Enums.Provider = {
  google: 'google',
  local: 'local'
};

exports.Language = exports.$Enums.Language = {
  en: 'en',
  pt_BR: 'pt_BR'
};

exports.Theme = exports.$Enums.Theme = {
  light: 'light',
  dark: 'dark',
  system: 'system'
};

exports.TeamMemberStatus = exports.$Enums.TeamMemberStatus = {
  invited: 'invited',
  accepted: 'accepted',
  rejected: 'rejected'
};

exports.SurveyStatus = exports.$Enums.SurveyStatus = {
  draft: 'draft',
  published: 'published',
  archived: 'archived'
};

exports.QuestionFormat = exports.$Enums.QuestionFormat = {
  YES_NO: 'YES_NO',
  STAR_RATING: 'STAR_RATING',
  LONG_TEXT: 'LONG_TEXT',
  STATEMENT: 'STATEMENT',
  SINGLE_CHOICE: 'SINGLE_CHOICE',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE'
};

exports.ResponseStatus = exports.$Enums.ResponseStatus = {
  pending: 'pending',
  completed: 'completed',
  abandoned: 'abandoned'
};

exports.Prisma.ModelName = {
  User: 'User',
  File: 'File',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  Team: 'Team',
  TeamMember: 'TeamMember',
  SurveyType: 'SurveyType',
  Survey: 'Survey',
  SurveyStyle: 'SurveyStyle',
  Question: 'Question',
  QuestionOption: 'QuestionOption',
  SurveyResponse: 'SurveyResponse',
  QuestionResponse: 'QuestionResponse'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
