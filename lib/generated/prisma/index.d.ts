
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model KnowledgeItem
 * 
 */
export type KnowledgeItem = $Result.DefaultSelection<Prisma.$KnowledgeItemPayload>
/**
 * Model QuickAnswer
 * 
 */
export type QuickAnswer = $Result.DefaultSelection<Prisma.$QuickAnswerPayload>
/**
 * Model AiTemplate
 * 
 */
export type AiTemplate = $Result.DefaultSelection<Prisma.$AiTemplatePayload>
/**
 * Model AiTemplateOption
 * 
 */
export type AiTemplateOption = $Result.DefaultSelection<Prisma.$AiTemplateOptionPayload>
/**
 * Model CompanyMember
 * 
 */
export type CompanyMember = $Result.DefaultSelection<Prisma.$CompanyMemberPayload>
/**
 * Model SubscriptionPlan
 * 
 */
export type SubscriptionPlan = $Result.DefaultSelection<Prisma.$SubscriptionPlanPayload>
/**
 * Model CustomerSubscription
 * 
 */
export type CustomerSubscription = $Result.DefaultSelection<Prisma.$CustomerSubscriptionPayload>
/**
 * Model UsageTracking
 * 
 */
export type UsageTracking = $Result.DefaultSelection<Prisma.$UsageTrackingPayload>
/**
 * Model CompanySettings
 * 
 */
export type CompanySettings = $Result.DefaultSelection<Prisma.$CompanySettingsPayload>
/**
 * Model CompanyWhatsappNumber
 * 
 */
export type CompanyWhatsappNumber = $Result.DefaultSelection<Prisma.$CompanyWhatsappNumberPayload>
/**
 * Model InboxCustomer
 * 
 */
export type InboxCustomer = $Result.DefaultSelection<Prisma.$InboxCustomerPayload>
/**
 * Model InboxConversation
 * 
 */
export type InboxConversation = $Result.DefaultSelection<Prisma.$InboxConversationPayload>
/**
 * Model InboxMessage
 * 
 */
export type InboxMessage = $Result.DefaultSelection<Prisma.$InboxMessagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const KnowledgeItemType: {
  TEXT: 'TEXT',
  URL: 'URL'
};

export type KnowledgeItemType = (typeof KnowledgeItemType)[keyof typeof KnowledgeItemType]


export const AiTemplateCategory: {
  greeting: 'greeting',
  orders: 'orders',
  products: 'products',
  support: 'support',
  closing: 'closing'
};

export type AiTemplateCategory = (typeof AiTemplateCategory)[keyof typeof AiTemplateCategory]


export const InboxMessageSenderType: {
  customer: 'customer',
  agent: 'agent',
  bot: 'bot',
  system: 'system'
};

export type InboxMessageSenderType = (typeof InboxMessageSenderType)[keyof typeof InboxMessageSenderType]


export const InboxMessageStatus: {
  pending: 'pending',
  sent: 'sent',
  delivered: 'delivered',
  read: 'read',
  failed: 'failed'
};

export type InboxMessageStatus = (typeof InboxMessageStatus)[keyof typeof InboxMessageStatus]


export const InboxConversationPriority: {
  low: 'low',
  medium: 'medium',
  high: 'high'
};

export type InboxConversationPriority = (typeof InboxConversationPriority)[keyof typeof InboxConversationPriority]


export const Language: {
  en: 'en',
  pt_BR: 'pt_BR'
};

export type Language = (typeof Language)[keyof typeof Language]


export const Provider: {
  google: 'google',
  local: 'local'
};

export type Provider = (typeof Provider)[keyof typeof Provider]


export const CompanyMemberStatus: {
  invited: 'invited',
  accepted: 'accepted',
  rejected: 'rejected'
};

export type CompanyMemberStatus = (typeof CompanyMemberStatus)[keyof typeof CompanyMemberStatus]


export const Theme: {
  light: 'light',
  dark: 'dark',
  system: 'system'
};

export type Theme = (typeof Theme)[keyof typeof Theme]


export const PlanType: {
  FREE: 'FREE',
  STARTER: 'STARTER',
  PRO: 'PRO',
  BUSINESS: 'BUSINESS',
  ENTERPRISE: 'ENTERPRISE'
};

export type PlanType = (typeof PlanType)[keyof typeof PlanType]


export const BillingInterval: {
  monthly: 'monthly',
  yearly: 'yearly'
};

export type BillingInterval = (typeof BillingInterval)[keyof typeof BillingInterval]


export const SubscriptionStatus: {
  pending: 'pending',
  active: 'active',
  canceled: 'canceled',
  past_due: 'past_due',
  trialing: 'trialing',
  incomplete: 'incomplete',
  incomplete_expired: 'incomplete_expired',
  unpaid: 'unpaid'
};

export type SubscriptionStatus = (typeof SubscriptionStatus)[keyof typeof SubscriptionStatus]


export const UsageMetricType: {
  ACTIVE_SURVEYS: 'ACTIVE_SURVEYS',
  TOTAL_COMPLETED_RESPONSES: 'TOTAL_COMPLETED_RESPONSES'
};

export type UsageMetricType = (typeof UsageMetricType)[keyof typeof UsageMetricType]

}

export type KnowledgeItemType = $Enums.KnowledgeItemType

export const KnowledgeItemType: typeof $Enums.KnowledgeItemType

export type AiTemplateCategory = $Enums.AiTemplateCategory

export const AiTemplateCategory: typeof $Enums.AiTemplateCategory

export type InboxMessageSenderType = $Enums.InboxMessageSenderType

export const InboxMessageSenderType: typeof $Enums.InboxMessageSenderType

export type InboxMessageStatus = $Enums.InboxMessageStatus

export const InboxMessageStatus: typeof $Enums.InboxMessageStatus

export type InboxConversationPriority = $Enums.InboxConversationPriority

export const InboxConversationPriority: typeof $Enums.InboxConversationPriority

export type Language = $Enums.Language

export const Language: typeof $Enums.Language

export type Provider = $Enums.Provider

export const Provider: typeof $Enums.Provider

export type CompanyMemberStatus = $Enums.CompanyMemberStatus

export const CompanyMemberStatus: typeof $Enums.CompanyMemberStatus

export type Theme = $Enums.Theme

export const Theme: typeof $Enums.Theme

export type PlanType = $Enums.PlanType

export const PlanType: typeof $Enums.PlanType

export type BillingInterval = $Enums.BillingInterval

export const BillingInterval: typeof $Enums.BillingInterval

export type SubscriptionStatus = $Enums.SubscriptionStatus

export const SubscriptionStatus: typeof $Enums.SubscriptionStatus

export type UsageMetricType = $Enums.UsageMetricType

export const UsageMetricType: typeof $Enums.UsageMetricType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.knowledgeItem`: Exposes CRUD operations for the **KnowledgeItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KnowledgeItems
    * const knowledgeItems = await prisma.knowledgeItem.findMany()
    * ```
    */
  get knowledgeItem(): Prisma.KnowledgeItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.quickAnswer`: Exposes CRUD operations for the **QuickAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuickAnswers
    * const quickAnswers = await prisma.quickAnswer.findMany()
    * ```
    */
  get quickAnswer(): Prisma.QuickAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiTemplate`: Exposes CRUD operations for the **AiTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiTemplates
    * const aiTemplates = await prisma.aiTemplate.findMany()
    * ```
    */
  get aiTemplate(): Prisma.AiTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aiTemplateOption`: Exposes CRUD operations for the **AiTemplateOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AiTemplateOptions
    * const aiTemplateOptions = await prisma.aiTemplateOption.findMany()
    * ```
    */
  get aiTemplateOption(): Prisma.AiTemplateOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyMember`: Exposes CRUD operations for the **CompanyMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyMembers
    * const companyMembers = await prisma.companyMember.findMany()
    * ```
    */
  get companyMember(): Prisma.CompanyMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscriptionPlan`: Exposes CRUD operations for the **SubscriptionPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionPlans
    * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
    * ```
    */
  get subscriptionPlan(): Prisma.SubscriptionPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerSubscription`: Exposes CRUD operations for the **CustomerSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerSubscriptions
    * const customerSubscriptions = await prisma.customerSubscription.findMany()
    * ```
    */
  get customerSubscription(): Prisma.CustomerSubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usageTracking`: Exposes CRUD operations for the **UsageTracking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UsageTrackings
    * const usageTrackings = await prisma.usageTracking.findMany()
    * ```
    */
  get usageTracking(): Prisma.UsageTrackingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companySettings`: Exposes CRUD operations for the **CompanySettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanySettings
    * const companySettings = await prisma.companySettings.findMany()
    * ```
    */
  get companySettings(): Prisma.CompanySettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyWhatsappNumber`: Exposes CRUD operations for the **CompanyWhatsappNumber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyWhatsappNumbers
    * const companyWhatsappNumbers = await prisma.companyWhatsappNumber.findMany()
    * ```
    */
  get companyWhatsappNumber(): Prisma.CompanyWhatsappNumberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inboxCustomer`: Exposes CRUD operations for the **InboxCustomer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InboxCustomers
    * const inboxCustomers = await prisma.inboxCustomer.findMany()
    * ```
    */
  get inboxCustomer(): Prisma.InboxCustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inboxConversation`: Exposes CRUD operations for the **InboxConversation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InboxConversations
    * const inboxConversations = await prisma.inboxConversation.findMany()
    * ```
    */
  get inboxConversation(): Prisma.InboxConversationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inboxMessage`: Exposes CRUD operations for the **InboxMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InboxMessages
    * const inboxMessages = await prisma.inboxMessage.findMany()
    * ```
    */
  get inboxMessage(): Prisma.InboxMessageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    File: 'File',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Company: 'Company',
    KnowledgeItem: 'KnowledgeItem',
    QuickAnswer: 'QuickAnswer',
    AiTemplate: 'AiTemplate',
    AiTemplateOption: 'AiTemplateOption',
    CompanyMember: 'CompanyMember',
    SubscriptionPlan: 'SubscriptionPlan',
    CustomerSubscription: 'CustomerSubscription',
    UsageTracking: 'UsageTracking',
    CompanySettings: 'CompanySettings',
    CompanyWhatsappNumber: 'CompanyWhatsappNumber',
    InboxCustomer: 'InboxCustomer',
    InboxConversation: 'InboxConversation',
    InboxMessage: 'InboxMessage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "file" | "account" | "session" | "verificationToken" | "company" | "knowledgeItem" | "quickAnswer" | "aiTemplate" | "aiTemplateOption" | "companyMember" | "subscriptionPlan" | "customerSubscription" | "usageTracking" | "companySettings" | "companyWhatsappNumber" | "inboxCustomer" | "inboxConversation" | "inboxMessage"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      KnowledgeItem: {
        payload: Prisma.$KnowledgeItemPayload<ExtArgs>
        fields: Prisma.KnowledgeItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KnowledgeItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KnowledgeItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>
          }
          findFirst: {
            args: Prisma.KnowledgeItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KnowledgeItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>
          }
          findMany: {
            args: Prisma.KnowledgeItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>[]
          }
          create: {
            args: Prisma.KnowledgeItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>
          }
          createMany: {
            args: Prisma.KnowledgeItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KnowledgeItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>[]
          }
          delete: {
            args: Prisma.KnowledgeItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>
          }
          update: {
            args: Prisma.KnowledgeItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>
          }
          deleteMany: {
            args: Prisma.KnowledgeItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KnowledgeItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.KnowledgeItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>[]
          }
          upsert: {
            args: Prisma.KnowledgeItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KnowledgeItemPayload>
          }
          aggregate: {
            args: Prisma.KnowledgeItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKnowledgeItem>
          }
          groupBy: {
            args: Prisma.KnowledgeItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<KnowledgeItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.KnowledgeItemCountArgs<ExtArgs>
            result: $Utils.Optional<KnowledgeItemCountAggregateOutputType> | number
          }
        }
      }
      QuickAnswer: {
        payload: Prisma.$QuickAnswerPayload<ExtArgs>
        fields: Prisma.QuickAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuickAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuickAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>
          }
          findFirst: {
            args: Prisma.QuickAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuickAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>
          }
          findMany: {
            args: Prisma.QuickAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>[]
          }
          create: {
            args: Prisma.QuickAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>
          }
          createMany: {
            args: Prisma.QuickAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuickAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>[]
          }
          delete: {
            args: Prisma.QuickAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>
          }
          update: {
            args: Prisma.QuickAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>
          }
          deleteMany: {
            args: Prisma.QuickAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuickAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuickAnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>[]
          }
          upsert: {
            args: Prisma.QuickAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuickAnswerPayload>
          }
          aggregate: {
            args: Prisma.QuickAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuickAnswer>
          }
          groupBy: {
            args: Prisma.QuickAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuickAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuickAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<QuickAnswerCountAggregateOutputType> | number
          }
        }
      }
      AiTemplate: {
        payload: Prisma.$AiTemplatePayload<ExtArgs>
        fields: Prisma.AiTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>
          }
          findFirst: {
            args: Prisma.AiTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>
          }
          findMany: {
            args: Prisma.AiTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>[]
          }
          create: {
            args: Prisma.AiTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>
          }
          createMany: {
            args: Prisma.AiTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>[]
          }
          delete: {
            args: Prisma.AiTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>
          }
          update: {
            args: Prisma.AiTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>
          }
          deleteMany: {
            args: Prisma.AiTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>[]
          }
          upsert: {
            args: Prisma.AiTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplatePayload>
          }
          aggregate: {
            args: Prisma.AiTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiTemplate>
          }
          groupBy: {
            args: Prisma.AiTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<AiTemplateCountAggregateOutputType> | number
          }
        }
      }
      AiTemplateOption: {
        payload: Prisma.$AiTemplateOptionPayload<ExtArgs>
        fields: Prisma.AiTemplateOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AiTemplateOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AiTemplateOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>
          }
          findFirst: {
            args: Prisma.AiTemplateOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AiTemplateOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>
          }
          findMany: {
            args: Prisma.AiTemplateOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>[]
          }
          create: {
            args: Prisma.AiTemplateOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>
          }
          createMany: {
            args: Prisma.AiTemplateOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AiTemplateOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>[]
          }
          delete: {
            args: Prisma.AiTemplateOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>
          }
          update: {
            args: Prisma.AiTemplateOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>
          }
          deleteMany: {
            args: Prisma.AiTemplateOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AiTemplateOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AiTemplateOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>[]
          }
          upsert: {
            args: Prisma.AiTemplateOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AiTemplateOptionPayload>
          }
          aggregate: {
            args: Prisma.AiTemplateOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAiTemplateOption>
          }
          groupBy: {
            args: Prisma.AiTemplateOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AiTemplateOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AiTemplateOptionCountArgs<ExtArgs>
            result: $Utils.Optional<AiTemplateOptionCountAggregateOutputType> | number
          }
        }
      }
      CompanyMember: {
        payload: Prisma.$CompanyMemberPayload<ExtArgs>
        fields: Prisma.CompanyMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          findFirst: {
            args: Prisma.CompanyMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          findMany: {
            args: Prisma.CompanyMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          create: {
            args: Prisma.CompanyMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          createMany: {
            args: Prisma.CompanyMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          delete: {
            args: Prisma.CompanyMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          update: {
            args: Prisma.CompanyMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          deleteMany: {
            args: Prisma.CompanyMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          upsert: {
            args: Prisma.CompanyMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          aggregate: {
            args: Prisma.CompanyMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyMember>
          }
          groupBy: {
            args: Prisma.CompanyMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyMemberCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyMemberCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionPlan: {
        payload: Prisma.$SubscriptionPlanPayload<ExtArgs>
        fields: Prisma.SubscriptionPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          findMany: {
            args: Prisma.SubscriptionPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          create: {
            args: Prisma.SubscriptionPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          createMany: {
            args: Prisma.SubscriptionPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          delete: {
            args: Prisma.SubscriptionPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          update: {
            args: Prisma.SubscriptionPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>[]
          }
          upsert: {
            args: Prisma.SubscriptionPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPlanPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionPlan>
          }
          groupBy: {
            args: Prisma.SubscriptionPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionPlanCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPlanCountAggregateOutputType> | number
          }
        }
      }
      CustomerSubscription: {
        payload: Prisma.$CustomerSubscriptionPayload<ExtArgs>
        fields: Prisma.CustomerSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.CustomerSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>
          }
          findMany: {
            args: Prisma.CustomerSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>[]
          }
          create: {
            args: Prisma.CustomerSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>
          }
          createMany: {
            args: Prisma.CustomerSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.CustomerSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>
          }
          update: {
            args: Prisma.CustomerSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.CustomerSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.CustomerSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.CustomerSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerSubscription>
          }
          groupBy: {
            args: Prisma.CustomerSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      UsageTracking: {
        payload: Prisma.$UsageTrackingPayload<ExtArgs>
        fields: Prisma.UsageTrackingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsageTrackingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsageTrackingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>
          }
          findFirst: {
            args: Prisma.UsageTrackingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsageTrackingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>
          }
          findMany: {
            args: Prisma.UsageTrackingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>[]
          }
          create: {
            args: Prisma.UsageTrackingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>
          }
          createMany: {
            args: Prisma.UsageTrackingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsageTrackingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>[]
          }
          delete: {
            args: Prisma.UsageTrackingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>
          }
          update: {
            args: Prisma.UsageTrackingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>
          }
          deleteMany: {
            args: Prisma.UsageTrackingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsageTrackingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsageTrackingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>[]
          }
          upsert: {
            args: Prisma.UsageTrackingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsageTrackingPayload>
          }
          aggregate: {
            args: Prisma.UsageTrackingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsageTracking>
          }
          groupBy: {
            args: Prisma.UsageTrackingGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsageTrackingGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsageTrackingCountArgs<ExtArgs>
            result: $Utils.Optional<UsageTrackingCountAggregateOutputType> | number
          }
        }
      }
      CompanySettings: {
        payload: Prisma.$CompanySettingsPayload<ExtArgs>
        fields: Prisma.CompanySettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanySettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanySettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>
          }
          findFirst: {
            args: Prisma.CompanySettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanySettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>
          }
          findMany: {
            args: Prisma.CompanySettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>[]
          }
          create: {
            args: Prisma.CompanySettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>
          }
          createMany: {
            args: Prisma.CompanySettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanySettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>[]
          }
          delete: {
            args: Prisma.CompanySettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>
          }
          update: {
            args: Prisma.CompanySettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>
          }
          deleteMany: {
            args: Prisma.CompanySettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanySettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanySettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>[]
          }
          upsert: {
            args: Prisma.CompanySettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanySettingsPayload>
          }
          aggregate: {
            args: Prisma.CompanySettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanySettings>
          }
          groupBy: {
            args: Prisma.CompanySettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanySettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanySettingsCountArgs<ExtArgs>
            result: $Utils.Optional<CompanySettingsCountAggregateOutputType> | number
          }
        }
      }
      CompanyWhatsappNumber: {
        payload: Prisma.$CompanyWhatsappNumberPayload<ExtArgs>
        fields: Prisma.CompanyWhatsappNumberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyWhatsappNumberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyWhatsappNumberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>
          }
          findFirst: {
            args: Prisma.CompanyWhatsappNumberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyWhatsappNumberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>
          }
          findMany: {
            args: Prisma.CompanyWhatsappNumberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>[]
          }
          create: {
            args: Prisma.CompanyWhatsappNumberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>
          }
          createMany: {
            args: Prisma.CompanyWhatsappNumberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyWhatsappNumberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>[]
          }
          delete: {
            args: Prisma.CompanyWhatsappNumberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>
          }
          update: {
            args: Prisma.CompanyWhatsappNumberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>
          }
          deleteMany: {
            args: Prisma.CompanyWhatsappNumberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyWhatsappNumberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyWhatsappNumberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>[]
          }
          upsert: {
            args: Prisma.CompanyWhatsappNumberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyWhatsappNumberPayload>
          }
          aggregate: {
            args: Prisma.CompanyWhatsappNumberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyWhatsappNumber>
          }
          groupBy: {
            args: Prisma.CompanyWhatsappNumberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyWhatsappNumberGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyWhatsappNumberCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyWhatsappNumberCountAggregateOutputType> | number
          }
        }
      }
      InboxCustomer: {
        payload: Prisma.$InboxCustomerPayload<ExtArgs>
        fields: Prisma.InboxCustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InboxCustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InboxCustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>
          }
          findFirst: {
            args: Prisma.InboxCustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InboxCustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>
          }
          findMany: {
            args: Prisma.InboxCustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>[]
          }
          create: {
            args: Prisma.InboxCustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>
          }
          createMany: {
            args: Prisma.InboxCustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InboxCustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>[]
          }
          delete: {
            args: Prisma.InboxCustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>
          }
          update: {
            args: Prisma.InboxCustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>
          }
          deleteMany: {
            args: Prisma.InboxCustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InboxCustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InboxCustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>[]
          }
          upsert: {
            args: Prisma.InboxCustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxCustomerPayload>
          }
          aggregate: {
            args: Prisma.InboxCustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInboxCustomer>
          }
          groupBy: {
            args: Prisma.InboxCustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<InboxCustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.InboxCustomerCountArgs<ExtArgs>
            result: $Utils.Optional<InboxCustomerCountAggregateOutputType> | number
          }
        }
      }
      InboxConversation: {
        payload: Prisma.$InboxConversationPayload<ExtArgs>
        fields: Prisma.InboxConversationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InboxConversationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InboxConversationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>
          }
          findFirst: {
            args: Prisma.InboxConversationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InboxConversationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>
          }
          findMany: {
            args: Prisma.InboxConversationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>[]
          }
          create: {
            args: Prisma.InboxConversationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>
          }
          createMany: {
            args: Prisma.InboxConversationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InboxConversationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>[]
          }
          delete: {
            args: Prisma.InboxConversationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>
          }
          update: {
            args: Prisma.InboxConversationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>
          }
          deleteMany: {
            args: Prisma.InboxConversationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InboxConversationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InboxConversationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>[]
          }
          upsert: {
            args: Prisma.InboxConversationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxConversationPayload>
          }
          aggregate: {
            args: Prisma.InboxConversationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInboxConversation>
          }
          groupBy: {
            args: Prisma.InboxConversationGroupByArgs<ExtArgs>
            result: $Utils.Optional<InboxConversationGroupByOutputType>[]
          }
          count: {
            args: Prisma.InboxConversationCountArgs<ExtArgs>
            result: $Utils.Optional<InboxConversationCountAggregateOutputType> | number
          }
        }
      }
      InboxMessage: {
        payload: Prisma.$InboxMessagePayload<ExtArgs>
        fields: Prisma.InboxMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InboxMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InboxMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>
          }
          findFirst: {
            args: Prisma.InboxMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InboxMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>
          }
          findMany: {
            args: Prisma.InboxMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>[]
          }
          create: {
            args: Prisma.InboxMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>
          }
          createMany: {
            args: Prisma.InboxMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InboxMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>[]
          }
          delete: {
            args: Prisma.InboxMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>
          }
          update: {
            args: Prisma.InboxMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>
          }
          deleteMany: {
            args: Prisma.InboxMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InboxMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InboxMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>[]
          }
          upsert: {
            args: Prisma.InboxMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InboxMessagePayload>
          }
          aggregate: {
            args: Prisma.InboxMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInboxMessage>
          }
          groupBy: {
            args: Prisma.InboxMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<InboxMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.InboxMessageCountArgs<ExtArgs>
            result: $Utils.Optional<InboxMessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    file?: FileOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    company?: CompanyOmit
    knowledgeItem?: KnowledgeItemOmit
    quickAnswer?: QuickAnswerOmit
    aiTemplate?: AiTemplateOmit
    aiTemplateOption?: AiTemplateOptionOmit
    companyMember?: CompanyMemberOmit
    subscriptionPlan?: SubscriptionPlanOmit
    customerSubscription?: CustomerSubscriptionOmit
    usageTracking?: UsageTrackingOmit
    companySettings?: CompanySettingsOmit
    companyWhatsappNumber?: CompanyWhatsappNumberOmit
    inboxCustomer?: InboxCustomerOmit
    inboxConversation?: InboxConversationOmit
    inboxMessage?: InboxMessageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    companyMembers: number
    files: number
    knowledgeItems: number
    quickAnswers: number
    aiTemplates: number
    assignedInboxConversations: number
    inboxMessages: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    companyMembers?: boolean | UserCountOutputTypeCountCompanyMembersArgs
    files?: boolean | UserCountOutputTypeCountFilesArgs
    knowledgeItems?: boolean | UserCountOutputTypeCountKnowledgeItemsArgs
    quickAnswers?: boolean | UserCountOutputTypeCountQuickAnswersArgs
    aiTemplates?: boolean | UserCountOutputTypeCountAiTemplatesArgs
    assignedInboxConversations?: boolean | UserCountOutputTypeCountAssignedInboxConversationsArgs
    inboxMessages?: boolean | UserCountOutputTypeCountInboxMessagesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompanyMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountKnowledgeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeItemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuickAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuickAnswerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAiTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiTemplateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedInboxConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxConversationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInboxMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxMessageWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    avatarFor: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatarFor?: boolean | FileCountOutputTypeCountAvatarForArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountAvatarForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    members: number
    user: number
    CustomerSubscription: number
    UsageTracking: number
    knowledgeItems: number
    quickAnswers: number
    aiTemplates: number
    inboxCustomers: number
    inboxConversations: number
    inboxMessages: number
    whatsappNumbers: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | CompanyCountOutputTypeCountMembersArgs
    user?: boolean | CompanyCountOutputTypeCountUserArgs
    CustomerSubscription?: boolean | CompanyCountOutputTypeCountCustomerSubscriptionArgs
    UsageTracking?: boolean | CompanyCountOutputTypeCountUsageTrackingArgs
    knowledgeItems?: boolean | CompanyCountOutputTypeCountKnowledgeItemsArgs
    quickAnswers?: boolean | CompanyCountOutputTypeCountQuickAnswersArgs
    aiTemplates?: boolean | CompanyCountOutputTypeCountAiTemplatesArgs
    inboxCustomers?: boolean | CompanyCountOutputTypeCountInboxCustomersArgs
    inboxConversations?: boolean | CompanyCountOutputTypeCountInboxConversationsArgs
    inboxMessages?: boolean | CompanyCountOutputTypeCountInboxMessagesArgs
    whatsappNumbers?: boolean | CompanyCountOutputTypeCountWhatsappNumbersArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountCustomerSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSubscriptionWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountUsageTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageTrackingWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountKnowledgeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeItemWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountQuickAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuickAnswerWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAiTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiTemplateWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountInboxCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxCustomerWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountInboxConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxConversationWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountInboxMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxMessageWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountWhatsappNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhatsappNumberWhereInput
  }


  /**
   * Count Type AiTemplateCountOutputType
   */

  export type AiTemplateCountOutputType = {
    options: number
  }

  export type AiTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | AiTemplateCountOutputTypeCountOptionsArgs
  }

  // Custom InputTypes
  /**
   * AiTemplateCountOutputType without action
   */
  export type AiTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateCountOutputType
     */
    select?: AiTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AiTemplateCountOutputType without action
   */
  export type AiTemplateCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiTemplateOptionWhereInput
  }


  /**
   * Count Type SubscriptionPlanCountOutputType
   */

  export type SubscriptionPlanCountOutputType = {
    subscriptions: number
  }

  export type SubscriptionPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlanCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlanCountOutputType
     */
    select?: SubscriptionPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionPlanCountOutputType without action
   */
  export type SubscriptionPlanCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSubscriptionWhereInput
  }


  /**
   * Count Type CustomerSubscriptionCountOutputType
   */

  export type CustomerSubscriptionCountOutputType = {
    usageTracking: number
  }

  export type CustomerSubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usageTracking?: boolean | CustomerSubscriptionCountOutputTypeCountUsageTrackingArgs
  }

  // Custom InputTypes
  /**
   * CustomerSubscriptionCountOutputType without action
   */
  export type CustomerSubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscriptionCountOutputType
     */
    select?: CustomerSubscriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerSubscriptionCountOutputType without action
   */
  export type CustomerSubscriptionCountOutputTypeCountUsageTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageTrackingWhereInput
  }


  /**
   * Count Type InboxCustomerCountOutputType
   */

  export type InboxCustomerCountOutputType = {
    conversations: number
  }

  export type InboxCustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    conversations?: boolean | InboxCustomerCountOutputTypeCountConversationsArgs
  }

  // Custom InputTypes
  /**
   * InboxCustomerCountOutputType without action
   */
  export type InboxCustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomerCountOutputType
     */
    select?: InboxCustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InboxCustomerCountOutputType without action
   */
  export type InboxCustomerCountOutputTypeCountConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxConversationWhereInput
  }


  /**
   * Count Type InboxConversationCountOutputType
   */

  export type InboxConversationCountOutputType = {
    messages: number
  }

  export type InboxConversationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | InboxConversationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * InboxConversationCountOutputType without action
   */
  export type InboxConversationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversationCountOutputType
     */
    select?: InboxConversationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InboxConversationCountOutputType without action
   */
  export type InboxConversationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    defaultCompanyId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    defaultCompanyId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    provider: $Enums.Provider | null
    password: string | null
    resetPasswordToken: string | null
    confirmationToken: string | null
    confirmed: boolean | null
    blocked: boolean | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    position: string | null
    companyName: string | null
    country: string | null
    linkedinUrl: string | null
    twitterUrl: string | null
    websiteUrl: string | null
    githubUrl: string | null
    avatarUrl: string | null
    language: $Enums.Language | null
    createdAt: Date | null
    updatedAt: Date | null
    avatarId: string | null
    idProvider: string | null
    resetPasswordExpires: Date | null
    theme: $Enums.Theme | null
    defaultCompanyId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    provider: $Enums.Provider | null
    password: string | null
    resetPasswordToken: string | null
    confirmationToken: string | null
    confirmed: boolean | null
    blocked: boolean | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    position: string | null
    companyName: string | null
    country: string | null
    linkedinUrl: string | null
    twitterUrl: string | null
    websiteUrl: string | null
    githubUrl: string | null
    avatarUrl: string | null
    language: $Enums.Language | null
    createdAt: Date | null
    updatedAt: Date | null
    avatarId: string | null
    idProvider: string | null
    resetPasswordExpires: Date | null
    theme: $Enums.Theme | null
    defaultCompanyId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    provider: number
    password: number
    resetPasswordToken: number
    confirmationToken: number
    confirmed: number
    blocked: number
    phone: number
    firstName: number
    lastName: number
    position: number
    companyName: number
    country: number
    linkedinUrl: number
    twitterUrl: number
    websiteUrl: number
    githubUrl: number
    avatarUrl: number
    language: number
    createdAt: number
    updatedAt: number
    avatarId: number
    idProvider: number
    resetPasswordExpires: number
    theme: number
    defaultCompanyId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    defaultCompanyId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    defaultCompanyId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    provider?: true
    password?: true
    resetPasswordToken?: true
    confirmationToken?: true
    confirmed?: true
    blocked?: true
    phone?: true
    firstName?: true
    lastName?: true
    position?: true
    companyName?: true
    country?: true
    linkedinUrl?: true
    twitterUrl?: true
    websiteUrl?: true
    githubUrl?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    avatarId?: true
    idProvider?: true
    resetPasswordExpires?: true
    theme?: true
    defaultCompanyId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    provider?: true
    password?: true
    resetPasswordToken?: true
    confirmationToken?: true
    confirmed?: true
    blocked?: true
    phone?: true
    firstName?: true
    lastName?: true
    position?: true
    companyName?: true
    country?: true
    linkedinUrl?: true
    twitterUrl?: true
    websiteUrl?: true
    githubUrl?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    avatarId?: true
    idProvider?: true
    resetPasswordExpires?: true
    theme?: true
    defaultCompanyId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    provider?: true
    password?: true
    resetPasswordToken?: true
    confirmationToken?: true
    confirmed?: true
    blocked?: true
    phone?: true
    firstName?: true
    lastName?: true
    position?: true
    companyName?: true
    country?: true
    linkedinUrl?: true
    twitterUrl?: true
    websiteUrl?: true
    githubUrl?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    avatarId?: true
    idProvider?: true
    resetPasswordExpires?: true
    theme?: true
    defaultCompanyId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    provider: $Enums.Provider
    password: string | null
    resetPasswordToken: string | null
    confirmationToken: string | null
    confirmed: boolean | null
    blocked: boolean | null
    phone: string | null
    firstName: string
    lastName: string | null
    position: string | null
    companyName: string | null
    country: string | null
    linkedinUrl: string | null
    twitterUrl: string | null
    websiteUrl: string | null
    githubUrl: string | null
    avatarUrl: string | null
    language: $Enums.Language
    createdAt: Date
    updatedAt: Date
    avatarId: string | null
    idProvider: string | null
    resetPasswordExpires: Date | null
    theme: $Enums.Theme
    defaultCompanyId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    position?: boolean
    companyName?: boolean
    country?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    githubUrl?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultCompanyId?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    companyMembers?: boolean | User$companyMembersArgs<ExtArgs>
    avatar?: boolean | User$avatarArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    knowledgeItems?: boolean | User$knowledgeItemsArgs<ExtArgs>
    quickAnswers?: boolean | User$quickAnswersArgs<ExtArgs>
    aiTemplates?: boolean | User$aiTemplatesArgs<ExtArgs>
    assignedInboxConversations?: boolean | User$assignedInboxConversationsArgs<ExtArgs>
    inboxMessages?: boolean | User$inboxMessagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    position?: boolean
    companyName?: boolean
    country?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    githubUrl?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultCompanyId?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    position?: boolean
    companyName?: boolean
    country?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    githubUrl?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultCompanyId?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    position?: boolean
    companyName?: boolean
    country?: boolean
    linkedinUrl?: boolean
    twitterUrl?: boolean
    websiteUrl?: boolean
    githubUrl?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultCompanyId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "provider" | "password" | "resetPasswordToken" | "confirmationToken" | "confirmed" | "blocked" | "phone" | "firstName" | "lastName" | "position" | "companyName" | "country" | "linkedinUrl" | "twitterUrl" | "websiteUrl" | "githubUrl" | "avatarUrl" | "language" | "createdAt" | "updatedAt" | "avatarId" | "idProvider" | "resetPasswordExpires" | "theme" | "defaultCompanyId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    companyMembers?: boolean | User$companyMembersArgs<ExtArgs>
    avatar?: boolean | User$avatarArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
    files?: boolean | User$filesArgs<ExtArgs>
    knowledgeItems?: boolean | User$knowledgeItemsArgs<ExtArgs>
    quickAnswers?: boolean | User$quickAnswersArgs<ExtArgs>
    aiTemplates?: boolean | User$aiTemplatesArgs<ExtArgs>
    assignedInboxConversations?: boolean | User$assignedInboxConversationsArgs<ExtArgs>
    inboxMessages?: boolean | User$inboxMessagesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
    company?: boolean | User$companyArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      companyMembers: Prisma.$CompanyMemberPayload<ExtArgs>[]
      avatar: Prisma.$FilePayload<ExtArgs> | null
      company: Prisma.$CompanyPayload<ExtArgs> | null
      files: Prisma.$FilePayload<ExtArgs>[]
      knowledgeItems: Prisma.$KnowledgeItemPayload<ExtArgs>[]
      quickAnswers: Prisma.$QuickAnswerPayload<ExtArgs>[]
      aiTemplates: Prisma.$AiTemplatePayload<ExtArgs>[]
      assignedInboxConversations: Prisma.$InboxConversationPayload<ExtArgs>[]
      inboxMessages: Prisma.$InboxMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      provider: $Enums.Provider
      password: string | null
      resetPasswordToken: string | null
      confirmationToken: string | null
      confirmed: boolean | null
      blocked: boolean | null
      phone: string | null
      firstName: string
      lastName: string | null
      position: string | null
      companyName: string | null
      country: string | null
      linkedinUrl: string | null
      twitterUrl: string | null
      websiteUrl: string | null
      githubUrl: string | null
      avatarUrl: string | null
      language: $Enums.Language
      createdAt: Date
      updatedAt: Date
      avatarId: string | null
      idProvider: string | null
      resetPasswordExpires: Date | null
      theme: $Enums.Theme
      defaultCompanyId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companyMembers<T extends User$companyMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$companyMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    avatar<T extends User$avatarArgs<ExtArgs> = {}>(args?: Subset<T, User$avatarArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    files<T extends User$filesArgs<ExtArgs> = {}>(args?: Subset<T, User$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    knowledgeItems<T extends User$knowledgeItemsArgs<ExtArgs> = {}>(args?: Subset<T, User$knowledgeItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quickAnswers<T extends User$quickAnswersArgs<ExtArgs> = {}>(args?: Subset<T, User$quickAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiTemplates<T extends User$aiTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, User$aiTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedInboxConversations<T extends User$assignedInboxConversationsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedInboxConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inboxMessages<T extends User$inboxMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$inboxMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly provider: FieldRef<"User", 'Provider'>
    readonly password: FieldRef<"User", 'String'>
    readonly resetPasswordToken: FieldRef<"User", 'String'>
    readonly confirmationToken: FieldRef<"User", 'String'>
    readonly confirmed: FieldRef<"User", 'Boolean'>
    readonly blocked: FieldRef<"User", 'Boolean'>
    readonly phone: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly position: FieldRef<"User", 'String'>
    readonly companyName: FieldRef<"User", 'String'>
    readonly country: FieldRef<"User", 'String'>
    readonly linkedinUrl: FieldRef<"User", 'String'>
    readonly twitterUrl: FieldRef<"User", 'String'>
    readonly websiteUrl: FieldRef<"User", 'String'>
    readonly githubUrl: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly language: FieldRef<"User", 'Language'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly avatarId: FieldRef<"User", 'String'>
    readonly idProvider: FieldRef<"User", 'String'>
    readonly resetPasswordExpires: FieldRef<"User", 'DateTime'>
    readonly theme: FieldRef<"User", 'Theme'>
    readonly defaultCompanyId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.companyMembers
   */
  export type User$companyMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    cursor?: CompanyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * User.avatar
   */
  export type User$avatarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.files
   */
  export type User$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * User.knowledgeItems
   */
  export type User$knowledgeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    where?: KnowledgeItemWhereInput
    orderBy?: KnowledgeItemOrderByWithRelationInput | KnowledgeItemOrderByWithRelationInput[]
    cursor?: KnowledgeItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KnowledgeItemScalarFieldEnum | KnowledgeItemScalarFieldEnum[]
  }

  /**
   * User.quickAnswers
   */
  export type User$quickAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    where?: QuickAnswerWhereInput
    orderBy?: QuickAnswerOrderByWithRelationInput | QuickAnswerOrderByWithRelationInput[]
    cursor?: QuickAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuickAnswerScalarFieldEnum | QuickAnswerScalarFieldEnum[]
  }

  /**
   * User.aiTemplates
   */
  export type User$aiTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    where?: AiTemplateWhereInput
    orderBy?: AiTemplateOrderByWithRelationInput | AiTemplateOrderByWithRelationInput[]
    cursor?: AiTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiTemplateScalarFieldEnum | AiTemplateScalarFieldEnum[]
  }

  /**
   * User.assignedInboxConversations
   */
  export type User$assignedInboxConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    where?: InboxConversationWhereInput
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    cursor?: InboxConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxConversationScalarFieldEnum | InboxConversationScalarFieldEnum[]
  }

  /**
   * User.inboxMessages
   */
  export type User$inboxMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    where?: InboxMessageWhereInput
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    cursor?: InboxMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxMessageScalarFieldEnum | InboxMessageScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
    userId: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
    userId: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    publicId: string | null
    format: string | null
    version: string | null
    mimeType: string | null
    size: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    publicId: string | null
    format: string | null
    version: string | null
    mimeType: string | null
    size: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    url: number
    publicId: number
    format: number
    version: number
    mimeType: number
    size: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
    userId?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
    userId?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    publicId?: true
    format?: true
    version?: true
    mimeType?: true
    size?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    publicId?: true
    format?: true
    version?: true
    mimeType?: true
    size?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    publicId?: true
    format?: true
    version?: true
    mimeType?: true
    size?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    name: string
    url: string
    publicId: string | null
    format: string | null
    version: string | null
    mimeType: string | null
    size: number | null
    userId: number | null
    createdAt: Date
    updatedAt: Date
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarFor?: boolean | File$avatarForArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | File$userArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | File$userArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "url" | "publicId" | "format" | "version" | "mimeType" | "size" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatarFor?: boolean | File$avatarForArgs<ExtArgs>
    user?: boolean | File$userArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | File$userArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | File$userArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      avatarFor: Prisma.$UserPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      url: string
      publicId: string | null
      format: string | null
      version: string | null
      mimeType: string | null
      size: number | null
      userId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    avatarFor<T extends File$avatarForArgs<ExtArgs> = {}>(args?: Subset<T, File$avatarForArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends File$userArgs<ExtArgs> = {}>(args?: Subset<T, File$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly name: FieldRef<"File", 'String'>
    readonly url: FieldRef<"File", 'String'>
    readonly publicId: FieldRef<"File", 'String'>
    readonly format: FieldRef<"File", 'String'>
    readonly version: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly userId: FieldRef<"File", 'Int'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.avatarFor
   */
  export type File$avatarForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * File.user
   */
  export type File$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'Int'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: number
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: number
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number | null
  }

  export type CompanySumAggregateOutputType = {
    id: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    tokenApi: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    tokenApi: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    tokenApi: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tokenApi?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tokenApi?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    tokenApi?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: number
    name: string
    description: string | null
    tokenApi: string | null
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    tokenApi?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Company$membersArgs<ExtArgs>
    user?: boolean | Company$userArgs<ExtArgs>
    CustomerSubscription?: boolean | Company$CustomerSubscriptionArgs<ExtArgs>
    UsageTracking?: boolean | Company$UsageTrackingArgs<ExtArgs>
    knowledgeItems?: boolean | Company$knowledgeItemsArgs<ExtArgs>
    quickAnswers?: boolean | Company$quickAnswersArgs<ExtArgs>
    aiTemplates?: boolean | Company$aiTemplatesArgs<ExtArgs>
    inboxCustomers?: boolean | Company$inboxCustomersArgs<ExtArgs>
    inboxConversations?: boolean | Company$inboxConversationsArgs<ExtArgs>
    inboxMessages?: boolean | Company$inboxMessagesArgs<ExtArgs>
    settings?: boolean | Company$settingsArgs<ExtArgs>
    whatsappNumbers?: boolean | Company$whatsappNumbersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    tokenApi?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    tokenApi?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    tokenApi?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "tokenApi" | "createdAt" | "updatedAt", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Company$membersArgs<ExtArgs>
    user?: boolean | Company$userArgs<ExtArgs>
    CustomerSubscription?: boolean | Company$CustomerSubscriptionArgs<ExtArgs>
    UsageTracking?: boolean | Company$UsageTrackingArgs<ExtArgs>
    knowledgeItems?: boolean | Company$knowledgeItemsArgs<ExtArgs>
    quickAnswers?: boolean | Company$quickAnswersArgs<ExtArgs>
    aiTemplates?: boolean | Company$aiTemplatesArgs<ExtArgs>
    inboxCustomers?: boolean | Company$inboxCustomersArgs<ExtArgs>
    inboxConversations?: boolean | Company$inboxConversationsArgs<ExtArgs>
    inboxMessages?: boolean | Company$inboxMessagesArgs<ExtArgs>
    settings?: boolean | Company$settingsArgs<ExtArgs>
    whatsappNumbers?: boolean | Company$whatsappNumbersArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      members: Prisma.$CompanyMemberPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>[]
      CustomerSubscription: Prisma.$CustomerSubscriptionPayload<ExtArgs>[]
      UsageTracking: Prisma.$UsageTrackingPayload<ExtArgs>[]
      knowledgeItems: Prisma.$KnowledgeItemPayload<ExtArgs>[]
      quickAnswers: Prisma.$QuickAnswerPayload<ExtArgs>[]
      aiTemplates: Prisma.$AiTemplatePayload<ExtArgs>[]
      inboxCustomers: Prisma.$InboxCustomerPayload<ExtArgs>[]
      inboxConversations: Prisma.$InboxConversationPayload<ExtArgs>[]
      inboxMessages: Prisma.$InboxMessagePayload<ExtArgs>[]
      settings: Prisma.$CompanySettingsPayload<ExtArgs> | null
      whatsappNumbers: Prisma.$CompanyWhatsappNumberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      tokenApi: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Company$membersArgs<ExtArgs> = {}>(args?: Subset<T, Company$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends Company$userArgs<ExtArgs> = {}>(args?: Subset<T, Company$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CustomerSubscription<T extends Company$CustomerSubscriptionArgs<ExtArgs> = {}>(args?: Subset<T, Company$CustomerSubscriptionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UsageTracking<T extends Company$UsageTrackingArgs<ExtArgs> = {}>(args?: Subset<T, Company$UsageTrackingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    knowledgeItems<T extends Company$knowledgeItemsArgs<ExtArgs> = {}>(args?: Subset<T, Company$knowledgeItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    quickAnswers<T extends Company$quickAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Company$quickAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiTemplates<T extends Company$aiTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$aiTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inboxCustomers<T extends Company$inboxCustomersArgs<ExtArgs> = {}>(args?: Subset<T, Company$inboxCustomersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inboxConversations<T extends Company$inboxConversationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$inboxConversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inboxMessages<T extends Company$inboxMessagesArgs<ExtArgs> = {}>(args?: Subset<T, Company$inboxMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    settings<T extends Company$settingsArgs<ExtArgs> = {}>(args?: Subset<T, Company$settingsArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    whatsappNumbers<T extends Company$whatsappNumbersArgs<ExtArgs> = {}>(args?: Subset<T, Company$whatsappNumbersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'Int'>
    readonly name: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly tokenApi: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.members
   */
  export type Company$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    cursor?: CompanyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * Company.user
   */
  export type Company$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Company.CustomerSubscription
   */
  export type Company$CustomerSubscriptionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    where?: CustomerSubscriptionWhereInput
    orderBy?: CustomerSubscriptionOrderByWithRelationInput | CustomerSubscriptionOrderByWithRelationInput[]
    cursor?: CustomerSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerSubscriptionScalarFieldEnum | CustomerSubscriptionScalarFieldEnum[]
  }

  /**
   * Company.UsageTracking
   */
  export type Company$UsageTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    where?: UsageTrackingWhereInput
    orderBy?: UsageTrackingOrderByWithRelationInput | UsageTrackingOrderByWithRelationInput[]
    cursor?: UsageTrackingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageTrackingScalarFieldEnum | UsageTrackingScalarFieldEnum[]
  }

  /**
   * Company.knowledgeItems
   */
  export type Company$knowledgeItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    where?: KnowledgeItemWhereInput
    orderBy?: KnowledgeItemOrderByWithRelationInput | KnowledgeItemOrderByWithRelationInput[]
    cursor?: KnowledgeItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KnowledgeItemScalarFieldEnum | KnowledgeItemScalarFieldEnum[]
  }

  /**
   * Company.quickAnswers
   */
  export type Company$quickAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    where?: QuickAnswerWhereInput
    orderBy?: QuickAnswerOrderByWithRelationInput | QuickAnswerOrderByWithRelationInput[]
    cursor?: QuickAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuickAnswerScalarFieldEnum | QuickAnswerScalarFieldEnum[]
  }

  /**
   * Company.aiTemplates
   */
  export type Company$aiTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    where?: AiTemplateWhereInput
    orderBy?: AiTemplateOrderByWithRelationInput | AiTemplateOrderByWithRelationInput[]
    cursor?: AiTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiTemplateScalarFieldEnum | AiTemplateScalarFieldEnum[]
  }

  /**
   * Company.inboxCustomers
   */
  export type Company$inboxCustomersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    where?: InboxCustomerWhereInput
    orderBy?: InboxCustomerOrderByWithRelationInput | InboxCustomerOrderByWithRelationInput[]
    cursor?: InboxCustomerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxCustomerScalarFieldEnum | InboxCustomerScalarFieldEnum[]
  }

  /**
   * Company.inboxConversations
   */
  export type Company$inboxConversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    where?: InboxConversationWhereInput
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    cursor?: InboxConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxConversationScalarFieldEnum | InboxConversationScalarFieldEnum[]
  }

  /**
   * Company.inboxMessages
   */
  export type Company$inboxMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    where?: InboxMessageWhereInput
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    cursor?: InboxMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxMessageScalarFieldEnum | InboxMessageScalarFieldEnum[]
  }

  /**
   * Company.settings
   */
  export type Company$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    where?: CompanySettingsWhereInput
  }

  /**
   * Company.whatsappNumbers
   */
  export type Company$whatsappNumbersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    where?: CompanyWhatsappNumberWhereInput
    orderBy?: CompanyWhatsappNumberOrderByWithRelationInput | CompanyWhatsappNumberOrderByWithRelationInput[]
    cursor?: CompanyWhatsappNumberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyWhatsappNumberScalarFieldEnum | CompanyWhatsappNumberScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model KnowledgeItem
   */

  export type AggregateKnowledgeItem = {
    _count: KnowledgeItemCountAggregateOutputType | null
    _avg: KnowledgeItemAvgAggregateOutputType | null
    _sum: KnowledgeItemSumAggregateOutputType | null
    _min: KnowledgeItemMinAggregateOutputType | null
    _max: KnowledgeItemMaxAggregateOutputType | null
  }

  export type KnowledgeItemAvgAggregateOutputType = {
    companyId: number | null
    createdById: number | null
  }

  export type KnowledgeItemSumAggregateOutputType = {
    companyId: number | null
    createdById: number | null
  }

  export type KnowledgeItemMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    type: $Enums.KnowledgeItemType | null
    title: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type KnowledgeItemMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    type: $Enums.KnowledgeItemType | null
    title: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type KnowledgeItemCountAggregateOutputType = {
    id: number
    companyId: number
    type: number
    title: number
    content: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type KnowledgeItemAvgAggregateInputType = {
    companyId?: true
    createdById?: true
  }

  export type KnowledgeItemSumAggregateInputType = {
    companyId?: true
    createdById?: true
  }

  export type KnowledgeItemMinAggregateInputType = {
    id?: true
    companyId?: true
    type?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type KnowledgeItemMaxAggregateInputType = {
    id?: true
    companyId?: true
    type?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type KnowledgeItemCountAggregateInputType = {
    id?: true
    companyId?: true
    type?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type KnowledgeItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnowledgeItem to aggregate.
     */
    where?: KnowledgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeItems to fetch.
     */
    orderBy?: KnowledgeItemOrderByWithRelationInput | KnowledgeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KnowledgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KnowledgeItems
    **/
    _count?: true | KnowledgeItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KnowledgeItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KnowledgeItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KnowledgeItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KnowledgeItemMaxAggregateInputType
  }

  export type GetKnowledgeItemAggregateType<T extends KnowledgeItemAggregateArgs> = {
        [P in keyof T & keyof AggregateKnowledgeItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKnowledgeItem[P]>
      : GetScalarType<T[P], AggregateKnowledgeItem[P]>
  }




  export type KnowledgeItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KnowledgeItemWhereInput
    orderBy?: KnowledgeItemOrderByWithAggregationInput | KnowledgeItemOrderByWithAggregationInput[]
    by: KnowledgeItemScalarFieldEnum[] | KnowledgeItemScalarFieldEnum
    having?: KnowledgeItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KnowledgeItemCountAggregateInputType | true
    _avg?: KnowledgeItemAvgAggregateInputType
    _sum?: KnowledgeItemSumAggregateInputType
    _min?: KnowledgeItemMinAggregateInputType
    _max?: KnowledgeItemMaxAggregateInputType
  }

  export type KnowledgeItemGroupByOutputType = {
    id: string
    companyId: number
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt: Date
    updatedAt: Date
    createdById: number | null
    _count: KnowledgeItemCountAggregateOutputType | null
    _avg: KnowledgeItemAvgAggregateOutputType | null
    _sum: KnowledgeItemSumAggregateOutputType | null
    _min: KnowledgeItemMinAggregateOutputType | null
    _max: KnowledgeItemMaxAggregateOutputType | null
  }

  type GetKnowledgeItemGroupByPayload<T extends KnowledgeItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KnowledgeItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KnowledgeItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KnowledgeItemGroupByOutputType[P]>
            : GetScalarType<T[P], KnowledgeItemGroupByOutputType[P]>
        }
      >
    >


  export type KnowledgeItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | KnowledgeItem$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["knowledgeItem"]>

  export type KnowledgeItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | KnowledgeItem$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["knowledgeItem"]>

  export type KnowledgeItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | KnowledgeItem$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["knowledgeItem"]>

  export type KnowledgeItemSelectScalar = {
    id?: boolean
    companyId?: boolean
    type?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type KnowledgeItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "type" | "title" | "content" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["knowledgeItem"]>
  export type KnowledgeItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | KnowledgeItem$createdByArgs<ExtArgs>
  }
  export type KnowledgeItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | KnowledgeItem$createdByArgs<ExtArgs>
  }
  export type KnowledgeItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | KnowledgeItem$createdByArgs<ExtArgs>
  }

  export type $KnowledgeItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KnowledgeItem"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      type: $Enums.KnowledgeItemType
      title: string
      content: string
      createdAt: Date
      updatedAt: Date
      createdById: number | null
    }, ExtArgs["result"]["knowledgeItem"]>
    composites: {}
  }

  type KnowledgeItemGetPayload<S extends boolean | null | undefined | KnowledgeItemDefaultArgs> = $Result.GetResult<Prisma.$KnowledgeItemPayload, S>

  type KnowledgeItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<KnowledgeItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KnowledgeItemCountAggregateInputType | true
    }

  export interface KnowledgeItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KnowledgeItem'], meta: { name: 'KnowledgeItem' } }
    /**
     * Find zero or one KnowledgeItem that matches the filter.
     * @param {KnowledgeItemFindUniqueArgs} args - Arguments to find a KnowledgeItem
     * @example
     * // Get one KnowledgeItem
     * const knowledgeItem = await prisma.knowledgeItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KnowledgeItemFindUniqueArgs>(args: SelectSubset<T, KnowledgeItemFindUniqueArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KnowledgeItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {KnowledgeItemFindUniqueOrThrowArgs} args - Arguments to find a KnowledgeItem
     * @example
     * // Get one KnowledgeItem
     * const knowledgeItem = await prisma.knowledgeItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KnowledgeItemFindUniqueOrThrowArgs>(args: SelectSubset<T, KnowledgeItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnowledgeItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemFindFirstArgs} args - Arguments to find a KnowledgeItem
     * @example
     * // Get one KnowledgeItem
     * const knowledgeItem = await prisma.knowledgeItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KnowledgeItemFindFirstArgs>(args?: SelectSubset<T, KnowledgeItemFindFirstArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KnowledgeItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemFindFirstOrThrowArgs} args - Arguments to find a KnowledgeItem
     * @example
     * // Get one KnowledgeItem
     * const knowledgeItem = await prisma.knowledgeItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KnowledgeItemFindFirstOrThrowArgs>(args?: SelectSubset<T, KnowledgeItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KnowledgeItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KnowledgeItems
     * const knowledgeItems = await prisma.knowledgeItem.findMany()
     * 
     * // Get first 10 KnowledgeItems
     * const knowledgeItems = await prisma.knowledgeItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const knowledgeItemWithIdOnly = await prisma.knowledgeItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KnowledgeItemFindManyArgs>(args?: SelectSubset<T, KnowledgeItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KnowledgeItem.
     * @param {KnowledgeItemCreateArgs} args - Arguments to create a KnowledgeItem.
     * @example
     * // Create one KnowledgeItem
     * const KnowledgeItem = await prisma.knowledgeItem.create({
     *   data: {
     *     // ... data to create a KnowledgeItem
     *   }
     * })
     * 
     */
    create<T extends KnowledgeItemCreateArgs>(args: SelectSubset<T, KnowledgeItemCreateArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KnowledgeItems.
     * @param {KnowledgeItemCreateManyArgs} args - Arguments to create many KnowledgeItems.
     * @example
     * // Create many KnowledgeItems
     * const knowledgeItem = await prisma.knowledgeItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KnowledgeItemCreateManyArgs>(args?: SelectSubset<T, KnowledgeItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KnowledgeItems and returns the data saved in the database.
     * @param {KnowledgeItemCreateManyAndReturnArgs} args - Arguments to create many KnowledgeItems.
     * @example
     * // Create many KnowledgeItems
     * const knowledgeItem = await prisma.knowledgeItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KnowledgeItems and only return the `id`
     * const knowledgeItemWithIdOnly = await prisma.knowledgeItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KnowledgeItemCreateManyAndReturnArgs>(args?: SelectSubset<T, KnowledgeItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KnowledgeItem.
     * @param {KnowledgeItemDeleteArgs} args - Arguments to delete one KnowledgeItem.
     * @example
     * // Delete one KnowledgeItem
     * const KnowledgeItem = await prisma.knowledgeItem.delete({
     *   where: {
     *     // ... filter to delete one KnowledgeItem
     *   }
     * })
     * 
     */
    delete<T extends KnowledgeItemDeleteArgs>(args: SelectSubset<T, KnowledgeItemDeleteArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KnowledgeItem.
     * @param {KnowledgeItemUpdateArgs} args - Arguments to update one KnowledgeItem.
     * @example
     * // Update one KnowledgeItem
     * const knowledgeItem = await prisma.knowledgeItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KnowledgeItemUpdateArgs>(args: SelectSubset<T, KnowledgeItemUpdateArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KnowledgeItems.
     * @param {KnowledgeItemDeleteManyArgs} args - Arguments to filter KnowledgeItems to delete.
     * @example
     * // Delete a few KnowledgeItems
     * const { count } = await prisma.knowledgeItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KnowledgeItemDeleteManyArgs>(args?: SelectSubset<T, KnowledgeItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnowledgeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KnowledgeItems
     * const knowledgeItem = await prisma.knowledgeItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KnowledgeItemUpdateManyArgs>(args: SelectSubset<T, KnowledgeItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KnowledgeItems and returns the data updated in the database.
     * @param {KnowledgeItemUpdateManyAndReturnArgs} args - Arguments to update many KnowledgeItems.
     * @example
     * // Update many KnowledgeItems
     * const knowledgeItem = await prisma.knowledgeItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KnowledgeItems and only return the `id`
     * const knowledgeItemWithIdOnly = await prisma.knowledgeItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends KnowledgeItemUpdateManyAndReturnArgs>(args: SelectSubset<T, KnowledgeItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KnowledgeItem.
     * @param {KnowledgeItemUpsertArgs} args - Arguments to update or create a KnowledgeItem.
     * @example
     * // Update or create a KnowledgeItem
     * const knowledgeItem = await prisma.knowledgeItem.upsert({
     *   create: {
     *     // ... data to create a KnowledgeItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KnowledgeItem we want to update
     *   }
     * })
     */
    upsert<T extends KnowledgeItemUpsertArgs>(args: SelectSubset<T, KnowledgeItemUpsertArgs<ExtArgs>>): Prisma__KnowledgeItemClient<$Result.GetResult<Prisma.$KnowledgeItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KnowledgeItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemCountArgs} args - Arguments to filter KnowledgeItems to count.
     * @example
     * // Count the number of KnowledgeItems
     * const count = await prisma.knowledgeItem.count({
     *   where: {
     *     // ... the filter for the KnowledgeItems we want to count
     *   }
     * })
    **/
    count<T extends KnowledgeItemCountArgs>(
      args?: Subset<T, KnowledgeItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KnowledgeItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KnowledgeItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KnowledgeItemAggregateArgs>(args: Subset<T, KnowledgeItemAggregateArgs>): Prisma.PrismaPromise<GetKnowledgeItemAggregateType<T>>

    /**
     * Group by KnowledgeItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KnowledgeItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KnowledgeItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KnowledgeItemGroupByArgs['orderBy'] }
        : { orderBy?: KnowledgeItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KnowledgeItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKnowledgeItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KnowledgeItem model
   */
  readonly fields: KnowledgeItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KnowledgeItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KnowledgeItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends KnowledgeItem$createdByArgs<ExtArgs> = {}>(args?: Subset<T, KnowledgeItem$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KnowledgeItem model
   */
  interface KnowledgeItemFieldRefs {
    readonly id: FieldRef<"KnowledgeItem", 'String'>
    readonly companyId: FieldRef<"KnowledgeItem", 'Int'>
    readonly type: FieldRef<"KnowledgeItem", 'KnowledgeItemType'>
    readonly title: FieldRef<"KnowledgeItem", 'String'>
    readonly content: FieldRef<"KnowledgeItem", 'String'>
    readonly createdAt: FieldRef<"KnowledgeItem", 'DateTime'>
    readonly updatedAt: FieldRef<"KnowledgeItem", 'DateTime'>
    readonly createdById: FieldRef<"KnowledgeItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * KnowledgeItem findUnique
   */
  export type KnowledgeItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeItem to fetch.
     */
    where: KnowledgeItemWhereUniqueInput
  }

  /**
   * KnowledgeItem findUniqueOrThrow
   */
  export type KnowledgeItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeItem to fetch.
     */
    where: KnowledgeItemWhereUniqueInput
  }

  /**
   * KnowledgeItem findFirst
   */
  export type KnowledgeItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeItem to fetch.
     */
    where?: KnowledgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeItems to fetch.
     */
    orderBy?: KnowledgeItemOrderByWithRelationInput | KnowledgeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnowledgeItems.
     */
    cursor?: KnowledgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnowledgeItems.
     */
    distinct?: KnowledgeItemScalarFieldEnum | KnowledgeItemScalarFieldEnum[]
  }

  /**
   * KnowledgeItem findFirstOrThrow
   */
  export type KnowledgeItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeItem to fetch.
     */
    where?: KnowledgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeItems to fetch.
     */
    orderBy?: KnowledgeItemOrderByWithRelationInput | KnowledgeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KnowledgeItems.
     */
    cursor?: KnowledgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KnowledgeItems.
     */
    distinct?: KnowledgeItemScalarFieldEnum | KnowledgeItemScalarFieldEnum[]
  }

  /**
   * KnowledgeItem findMany
   */
  export type KnowledgeItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * Filter, which KnowledgeItems to fetch.
     */
    where?: KnowledgeItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KnowledgeItems to fetch.
     */
    orderBy?: KnowledgeItemOrderByWithRelationInput | KnowledgeItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KnowledgeItems.
     */
    cursor?: KnowledgeItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KnowledgeItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KnowledgeItems.
     */
    skip?: number
    distinct?: KnowledgeItemScalarFieldEnum | KnowledgeItemScalarFieldEnum[]
  }

  /**
   * KnowledgeItem create
   */
  export type KnowledgeItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * The data needed to create a KnowledgeItem.
     */
    data: XOR<KnowledgeItemCreateInput, KnowledgeItemUncheckedCreateInput>
  }

  /**
   * KnowledgeItem createMany
   */
  export type KnowledgeItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KnowledgeItems.
     */
    data: KnowledgeItemCreateManyInput | KnowledgeItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KnowledgeItem createManyAndReturn
   */
  export type KnowledgeItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * The data used to create many KnowledgeItems.
     */
    data: KnowledgeItemCreateManyInput | KnowledgeItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KnowledgeItem update
   */
  export type KnowledgeItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * The data needed to update a KnowledgeItem.
     */
    data: XOR<KnowledgeItemUpdateInput, KnowledgeItemUncheckedUpdateInput>
    /**
     * Choose, which KnowledgeItem to update.
     */
    where: KnowledgeItemWhereUniqueInput
  }

  /**
   * KnowledgeItem updateMany
   */
  export type KnowledgeItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KnowledgeItems.
     */
    data: XOR<KnowledgeItemUpdateManyMutationInput, KnowledgeItemUncheckedUpdateManyInput>
    /**
     * Filter which KnowledgeItems to update
     */
    where?: KnowledgeItemWhereInput
    /**
     * Limit how many KnowledgeItems to update.
     */
    limit?: number
  }

  /**
   * KnowledgeItem updateManyAndReturn
   */
  export type KnowledgeItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * The data used to update KnowledgeItems.
     */
    data: XOR<KnowledgeItemUpdateManyMutationInput, KnowledgeItemUncheckedUpdateManyInput>
    /**
     * Filter which KnowledgeItems to update
     */
    where?: KnowledgeItemWhereInput
    /**
     * Limit how many KnowledgeItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * KnowledgeItem upsert
   */
  export type KnowledgeItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * The filter to search for the KnowledgeItem to update in case it exists.
     */
    where: KnowledgeItemWhereUniqueInput
    /**
     * In case the KnowledgeItem found by the `where` argument doesn't exist, create a new KnowledgeItem with this data.
     */
    create: XOR<KnowledgeItemCreateInput, KnowledgeItemUncheckedCreateInput>
    /**
     * In case the KnowledgeItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KnowledgeItemUpdateInput, KnowledgeItemUncheckedUpdateInput>
  }

  /**
   * KnowledgeItem delete
   */
  export type KnowledgeItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
    /**
     * Filter which KnowledgeItem to delete.
     */
    where: KnowledgeItemWhereUniqueInput
  }

  /**
   * KnowledgeItem deleteMany
   */
  export type KnowledgeItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KnowledgeItems to delete
     */
    where?: KnowledgeItemWhereInput
    /**
     * Limit how many KnowledgeItems to delete.
     */
    limit?: number
  }

  /**
   * KnowledgeItem.createdBy
   */
  export type KnowledgeItem$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * KnowledgeItem without action
   */
  export type KnowledgeItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KnowledgeItem
     */
    select?: KnowledgeItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the KnowledgeItem
     */
    omit?: KnowledgeItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KnowledgeItemInclude<ExtArgs> | null
  }


  /**
   * Model QuickAnswer
   */

  export type AggregateQuickAnswer = {
    _count: QuickAnswerCountAggregateOutputType | null
    _avg: QuickAnswerAvgAggregateOutputType | null
    _sum: QuickAnswerSumAggregateOutputType | null
    _min: QuickAnswerMinAggregateOutputType | null
    _max: QuickAnswerMaxAggregateOutputType | null
  }

  export type QuickAnswerAvgAggregateOutputType = {
    companyId: number | null
    createdById: number | null
  }

  export type QuickAnswerSumAggregateOutputType = {
    companyId: number | null
    createdById: number | null
  }

  export type QuickAnswerMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type QuickAnswerMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type QuickAnswerCountAggregateOutputType = {
    id: number
    companyId: number
    title: number
    content: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type QuickAnswerAvgAggregateInputType = {
    companyId?: true
    createdById?: true
  }

  export type QuickAnswerSumAggregateInputType = {
    companyId?: true
    createdById?: true
  }

  export type QuickAnswerMinAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type QuickAnswerMaxAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type QuickAnswerCountAggregateInputType = {
    id?: true
    companyId?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type QuickAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuickAnswer to aggregate.
     */
    where?: QuickAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuickAnswers to fetch.
     */
    orderBy?: QuickAnswerOrderByWithRelationInput | QuickAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuickAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuickAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuickAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuickAnswers
    **/
    _count?: true | QuickAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuickAnswerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuickAnswerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuickAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuickAnswerMaxAggregateInputType
  }

  export type GetQuickAnswerAggregateType<T extends QuickAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateQuickAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuickAnswer[P]>
      : GetScalarType<T[P], AggregateQuickAnswer[P]>
  }




  export type QuickAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuickAnswerWhereInput
    orderBy?: QuickAnswerOrderByWithAggregationInput | QuickAnswerOrderByWithAggregationInput[]
    by: QuickAnswerScalarFieldEnum[] | QuickAnswerScalarFieldEnum
    having?: QuickAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuickAnswerCountAggregateInputType | true
    _avg?: QuickAnswerAvgAggregateInputType
    _sum?: QuickAnswerSumAggregateInputType
    _min?: QuickAnswerMinAggregateInputType
    _max?: QuickAnswerMaxAggregateInputType
  }

  export type QuickAnswerGroupByOutputType = {
    id: string
    companyId: number
    title: string
    content: string
    createdAt: Date
    updatedAt: Date
    createdById: number | null
    _count: QuickAnswerCountAggregateOutputType | null
    _avg: QuickAnswerAvgAggregateOutputType | null
    _sum: QuickAnswerSumAggregateOutputType | null
    _min: QuickAnswerMinAggregateOutputType | null
    _max: QuickAnswerMaxAggregateOutputType | null
  }

  type GetQuickAnswerGroupByPayload<T extends QuickAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuickAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuickAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuickAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], QuickAnswerGroupByOutputType[P]>
        }
      >
    >


  export type QuickAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | QuickAnswer$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["quickAnswer"]>

  export type QuickAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | QuickAnswer$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["quickAnswer"]>

  export type QuickAnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | QuickAnswer$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["quickAnswer"]>

  export type QuickAnswerSelectScalar = {
    id?: boolean
    companyId?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type QuickAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "title" | "content" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["quickAnswer"]>
  export type QuickAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | QuickAnswer$createdByArgs<ExtArgs>
  }
  export type QuickAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | QuickAnswer$createdByArgs<ExtArgs>
  }
  export type QuickAnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | QuickAnswer$createdByArgs<ExtArgs>
  }

  export type $QuickAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuickAnswer"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      title: string
      content: string
      createdAt: Date
      updatedAt: Date
      createdById: number | null
    }, ExtArgs["result"]["quickAnswer"]>
    composites: {}
  }

  type QuickAnswerGetPayload<S extends boolean | null | undefined | QuickAnswerDefaultArgs> = $Result.GetResult<Prisma.$QuickAnswerPayload, S>

  type QuickAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuickAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuickAnswerCountAggregateInputType | true
    }

  export interface QuickAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuickAnswer'], meta: { name: 'QuickAnswer' } }
    /**
     * Find zero or one QuickAnswer that matches the filter.
     * @param {QuickAnswerFindUniqueArgs} args - Arguments to find a QuickAnswer
     * @example
     * // Get one QuickAnswer
     * const quickAnswer = await prisma.quickAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuickAnswerFindUniqueArgs>(args: SelectSubset<T, QuickAnswerFindUniqueArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuickAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuickAnswerFindUniqueOrThrowArgs} args - Arguments to find a QuickAnswer
     * @example
     * // Get one QuickAnswer
     * const quickAnswer = await prisma.quickAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuickAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, QuickAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuickAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerFindFirstArgs} args - Arguments to find a QuickAnswer
     * @example
     * // Get one QuickAnswer
     * const quickAnswer = await prisma.quickAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuickAnswerFindFirstArgs>(args?: SelectSubset<T, QuickAnswerFindFirstArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuickAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerFindFirstOrThrowArgs} args - Arguments to find a QuickAnswer
     * @example
     * // Get one QuickAnswer
     * const quickAnswer = await prisma.quickAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuickAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, QuickAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuickAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuickAnswers
     * const quickAnswers = await prisma.quickAnswer.findMany()
     * 
     * // Get first 10 QuickAnswers
     * const quickAnswers = await prisma.quickAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quickAnswerWithIdOnly = await prisma.quickAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuickAnswerFindManyArgs>(args?: SelectSubset<T, QuickAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuickAnswer.
     * @param {QuickAnswerCreateArgs} args - Arguments to create a QuickAnswer.
     * @example
     * // Create one QuickAnswer
     * const QuickAnswer = await prisma.quickAnswer.create({
     *   data: {
     *     // ... data to create a QuickAnswer
     *   }
     * })
     * 
     */
    create<T extends QuickAnswerCreateArgs>(args: SelectSubset<T, QuickAnswerCreateArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuickAnswers.
     * @param {QuickAnswerCreateManyArgs} args - Arguments to create many QuickAnswers.
     * @example
     * // Create many QuickAnswers
     * const quickAnswer = await prisma.quickAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuickAnswerCreateManyArgs>(args?: SelectSubset<T, QuickAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuickAnswers and returns the data saved in the database.
     * @param {QuickAnswerCreateManyAndReturnArgs} args - Arguments to create many QuickAnswers.
     * @example
     * // Create many QuickAnswers
     * const quickAnswer = await prisma.quickAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuickAnswers and only return the `id`
     * const quickAnswerWithIdOnly = await prisma.quickAnswer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuickAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, QuickAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuickAnswer.
     * @param {QuickAnswerDeleteArgs} args - Arguments to delete one QuickAnswer.
     * @example
     * // Delete one QuickAnswer
     * const QuickAnswer = await prisma.quickAnswer.delete({
     *   where: {
     *     // ... filter to delete one QuickAnswer
     *   }
     * })
     * 
     */
    delete<T extends QuickAnswerDeleteArgs>(args: SelectSubset<T, QuickAnswerDeleteArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuickAnswer.
     * @param {QuickAnswerUpdateArgs} args - Arguments to update one QuickAnswer.
     * @example
     * // Update one QuickAnswer
     * const quickAnswer = await prisma.quickAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuickAnswerUpdateArgs>(args: SelectSubset<T, QuickAnswerUpdateArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuickAnswers.
     * @param {QuickAnswerDeleteManyArgs} args - Arguments to filter QuickAnswers to delete.
     * @example
     * // Delete a few QuickAnswers
     * const { count } = await prisma.quickAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuickAnswerDeleteManyArgs>(args?: SelectSubset<T, QuickAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuickAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuickAnswers
     * const quickAnswer = await prisma.quickAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuickAnswerUpdateManyArgs>(args: SelectSubset<T, QuickAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuickAnswers and returns the data updated in the database.
     * @param {QuickAnswerUpdateManyAndReturnArgs} args - Arguments to update many QuickAnswers.
     * @example
     * // Update many QuickAnswers
     * const quickAnswer = await prisma.quickAnswer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuickAnswers and only return the `id`
     * const quickAnswerWithIdOnly = await prisma.quickAnswer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuickAnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, QuickAnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuickAnswer.
     * @param {QuickAnswerUpsertArgs} args - Arguments to update or create a QuickAnswer.
     * @example
     * // Update or create a QuickAnswer
     * const quickAnswer = await prisma.quickAnswer.upsert({
     *   create: {
     *     // ... data to create a QuickAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuickAnswer we want to update
     *   }
     * })
     */
    upsert<T extends QuickAnswerUpsertArgs>(args: SelectSubset<T, QuickAnswerUpsertArgs<ExtArgs>>): Prisma__QuickAnswerClient<$Result.GetResult<Prisma.$QuickAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuickAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerCountArgs} args - Arguments to filter QuickAnswers to count.
     * @example
     * // Count the number of QuickAnswers
     * const count = await prisma.quickAnswer.count({
     *   where: {
     *     // ... the filter for the QuickAnswers we want to count
     *   }
     * })
    **/
    count<T extends QuickAnswerCountArgs>(
      args?: Subset<T, QuickAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuickAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuickAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuickAnswerAggregateArgs>(args: Subset<T, QuickAnswerAggregateArgs>): Prisma.PrismaPromise<GetQuickAnswerAggregateType<T>>

    /**
     * Group by QuickAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuickAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuickAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuickAnswerGroupByArgs['orderBy'] }
        : { orderBy?: QuickAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuickAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuickAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuickAnswer model
   */
  readonly fields: QuickAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuickAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuickAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends QuickAnswer$createdByArgs<ExtArgs> = {}>(args?: Subset<T, QuickAnswer$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuickAnswer model
   */
  interface QuickAnswerFieldRefs {
    readonly id: FieldRef<"QuickAnswer", 'String'>
    readonly companyId: FieldRef<"QuickAnswer", 'Int'>
    readonly title: FieldRef<"QuickAnswer", 'String'>
    readonly content: FieldRef<"QuickAnswer", 'String'>
    readonly createdAt: FieldRef<"QuickAnswer", 'DateTime'>
    readonly updatedAt: FieldRef<"QuickAnswer", 'DateTime'>
    readonly createdById: FieldRef<"QuickAnswer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuickAnswer findUnique
   */
  export type QuickAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuickAnswer to fetch.
     */
    where: QuickAnswerWhereUniqueInput
  }

  /**
   * QuickAnswer findUniqueOrThrow
   */
  export type QuickAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuickAnswer to fetch.
     */
    where: QuickAnswerWhereUniqueInput
  }

  /**
   * QuickAnswer findFirst
   */
  export type QuickAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuickAnswer to fetch.
     */
    where?: QuickAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuickAnswers to fetch.
     */
    orderBy?: QuickAnswerOrderByWithRelationInput | QuickAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuickAnswers.
     */
    cursor?: QuickAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuickAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuickAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuickAnswers.
     */
    distinct?: QuickAnswerScalarFieldEnum | QuickAnswerScalarFieldEnum[]
  }

  /**
   * QuickAnswer findFirstOrThrow
   */
  export type QuickAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuickAnswer to fetch.
     */
    where?: QuickAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuickAnswers to fetch.
     */
    orderBy?: QuickAnswerOrderByWithRelationInput | QuickAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuickAnswers.
     */
    cursor?: QuickAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuickAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuickAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuickAnswers.
     */
    distinct?: QuickAnswerScalarFieldEnum | QuickAnswerScalarFieldEnum[]
  }

  /**
   * QuickAnswer findMany
   */
  export type QuickAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * Filter, which QuickAnswers to fetch.
     */
    where?: QuickAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuickAnswers to fetch.
     */
    orderBy?: QuickAnswerOrderByWithRelationInput | QuickAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuickAnswers.
     */
    cursor?: QuickAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuickAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuickAnswers.
     */
    skip?: number
    distinct?: QuickAnswerScalarFieldEnum | QuickAnswerScalarFieldEnum[]
  }

  /**
   * QuickAnswer create
   */
  export type QuickAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a QuickAnswer.
     */
    data: XOR<QuickAnswerCreateInput, QuickAnswerUncheckedCreateInput>
  }

  /**
   * QuickAnswer createMany
   */
  export type QuickAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuickAnswers.
     */
    data: QuickAnswerCreateManyInput | QuickAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuickAnswer createManyAndReturn
   */
  export type QuickAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * The data used to create many QuickAnswers.
     */
    data: QuickAnswerCreateManyInput | QuickAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuickAnswer update
   */
  export type QuickAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a QuickAnswer.
     */
    data: XOR<QuickAnswerUpdateInput, QuickAnswerUncheckedUpdateInput>
    /**
     * Choose, which QuickAnswer to update.
     */
    where: QuickAnswerWhereUniqueInput
  }

  /**
   * QuickAnswer updateMany
   */
  export type QuickAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuickAnswers.
     */
    data: XOR<QuickAnswerUpdateManyMutationInput, QuickAnswerUncheckedUpdateManyInput>
    /**
     * Filter which QuickAnswers to update
     */
    where?: QuickAnswerWhereInput
    /**
     * Limit how many QuickAnswers to update.
     */
    limit?: number
  }

  /**
   * QuickAnswer updateManyAndReturn
   */
  export type QuickAnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * The data used to update QuickAnswers.
     */
    data: XOR<QuickAnswerUpdateManyMutationInput, QuickAnswerUncheckedUpdateManyInput>
    /**
     * Filter which QuickAnswers to update
     */
    where?: QuickAnswerWhereInput
    /**
     * Limit how many QuickAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuickAnswer upsert
   */
  export type QuickAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the QuickAnswer to update in case it exists.
     */
    where: QuickAnswerWhereUniqueInput
    /**
     * In case the QuickAnswer found by the `where` argument doesn't exist, create a new QuickAnswer with this data.
     */
    create: XOR<QuickAnswerCreateInput, QuickAnswerUncheckedCreateInput>
    /**
     * In case the QuickAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuickAnswerUpdateInput, QuickAnswerUncheckedUpdateInput>
  }

  /**
   * QuickAnswer delete
   */
  export type QuickAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
    /**
     * Filter which QuickAnswer to delete.
     */
    where: QuickAnswerWhereUniqueInput
  }

  /**
   * QuickAnswer deleteMany
   */
  export type QuickAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuickAnswers to delete
     */
    where?: QuickAnswerWhereInput
    /**
     * Limit how many QuickAnswers to delete.
     */
    limit?: number
  }

  /**
   * QuickAnswer.createdBy
   */
  export type QuickAnswer$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QuickAnswer without action
   */
  export type QuickAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuickAnswer
     */
    select?: QuickAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuickAnswer
     */
    omit?: QuickAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuickAnswerInclude<ExtArgs> | null
  }


  /**
   * Model AiTemplate
   */

  export type AggregateAiTemplate = {
    _count: AiTemplateCountAggregateOutputType | null
    _avg: AiTemplateAvgAggregateOutputType | null
    _sum: AiTemplateSumAggregateOutputType | null
    _min: AiTemplateMinAggregateOutputType | null
    _max: AiTemplateMaxAggregateOutputType | null
  }

  export type AiTemplateAvgAggregateOutputType = {
    companyId: number | null
    createdById: number | null
  }

  export type AiTemplateSumAggregateOutputType = {
    companyId: number | null
    createdById: number | null
  }

  export type AiTemplateMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    name: string | null
    content: string | null
    category: $Enums.AiTemplateCategory | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type AiTemplateMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    name: string | null
    content: string | null
    category: $Enums.AiTemplateCategory | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: number | null
  }

  export type AiTemplateCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    content: number
    category: number
    createdAt: number
    updatedAt: number
    createdById: number
    _all: number
  }


  export type AiTemplateAvgAggregateInputType = {
    companyId?: true
    createdById?: true
  }

  export type AiTemplateSumAggregateInputType = {
    companyId?: true
    createdById?: true
  }

  export type AiTemplateMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    content?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type AiTemplateMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    content?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type AiTemplateCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    content?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    _all?: true
  }

  export type AiTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiTemplate to aggregate.
     */
    where?: AiTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplates to fetch.
     */
    orderBy?: AiTemplateOrderByWithRelationInput | AiTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiTemplates
    **/
    _count?: true | AiTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AiTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AiTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiTemplateMaxAggregateInputType
  }

  export type GetAiTemplateAggregateType<T extends AiTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateAiTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiTemplate[P]>
      : GetScalarType<T[P], AggregateAiTemplate[P]>
  }




  export type AiTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiTemplateWhereInput
    orderBy?: AiTemplateOrderByWithAggregationInput | AiTemplateOrderByWithAggregationInput[]
    by: AiTemplateScalarFieldEnum[] | AiTemplateScalarFieldEnum
    having?: AiTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiTemplateCountAggregateInputType | true
    _avg?: AiTemplateAvgAggregateInputType
    _sum?: AiTemplateSumAggregateInputType
    _min?: AiTemplateMinAggregateInputType
    _max?: AiTemplateMaxAggregateInputType
  }

  export type AiTemplateGroupByOutputType = {
    id: string
    companyId: number
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt: Date
    updatedAt: Date
    createdById: number | null
    _count: AiTemplateCountAggregateOutputType | null
    _avg: AiTemplateAvgAggregateOutputType | null
    _sum: AiTemplateSumAggregateOutputType | null
    _min: AiTemplateMinAggregateOutputType | null
    _max: AiTemplateMaxAggregateOutputType | null
  }

  type GetAiTemplateGroupByPayload<T extends AiTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], AiTemplateGroupByOutputType[P]>
        }
      >
    >


  export type AiTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    content?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | AiTemplate$createdByArgs<ExtArgs>
    options?: boolean | AiTemplate$optionsArgs<ExtArgs>
    _count?: boolean | AiTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiTemplate"]>

  export type AiTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    content?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | AiTemplate$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["aiTemplate"]>

  export type AiTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    content?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | AiTemplate$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["aiTemplate"]>

  export type AiTemplateSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    content?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
  }

  export type AiTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "content" | "category" | "createdAt" | "updatedAt" | "createdById", ExtArgs["result"]["aiTemplate"]>
  export type AiTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | AiTemplate$createdByArgs<ExtArgs>
    options?: boolean | AiTemplate$optionsArgs<ExtArgs>
    _count?: boolean | AiTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AiTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | AiTemplate$createdByArgs<ExtArgs>
  }
  export type AiTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    createdBy?: boolean | AiTemplate$createdByArgs<ExtArgs>
  }

  export type $AiTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiTemplate"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      options: Prisma.$AiTemplateOptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      name: string
      content: string
      category: $Enums.AiTemplateCategory
      createdAt: Date
      updatedAt: Date
      createdById: number | null
    }, ExtArgs["result"]["aiTemplate"]>
    composites: {}
  }

  type AiTemplateGetPayload<S extends boolean | null | undefined | AiTemplateDefaultArgs> = $Result.GetResult<Prisma.$AiTemplatePayload, S>

  type AiTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiTemplateCountAggregateInputType | true
    }

  export interface AiTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiTemplate'], meta: { name: 'AiTemplate' } }
    /**
     * Find zero or one AiTemplate that matches the filter.
     * @param {AiTemplateFindUniqueArgs} args - Arguments to find a AiTemplate
     * @example
     * // Get one AiTemplate
     * const aiTemplate = await prisma.aiTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiTemplateFindUniqueArgs>(args: SelectSubset<T, AiTemplateFindUniqueArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiTemplateFindUniqueOrThrowArgs} args - Arguments to find a AiTemplate
     * @example
     * // Get one AiTemplate
     * const aiTemplate = await prisma.aiTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, AiTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateFindFirstArgs} args - Arguments to find a AiTemplate
     * @example
     * // Get one AiTemplate
     * const aiTemplate = await prisma.aiTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiTemplateFindFirstArgs>(args?: SelectSubset<T, AiTemplateFindFirstArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateFindFirstOrThrowArgs} args - Arguments to find a AiTemplate
     * @example
     * // Get one AiTemplate
     * const aiTemplate = await prisma.aiTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, AiTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiTemplates
     * const aiTemplates = await prisma.aiTemplate.findMany()
     * 
     * // Get first 10 AiTemplates
     * const aiTemplates = await prisma.aiTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiTemplateWithIdOnly = await prisma.aiTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiTemplateFindManyArgs>(args?: SelectSubset<T, AiTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiTemplate.
     * @param {AiTemplateCreateArgs} args - Arguments to create a AiTemplate.
     * @example
     * // Create one AiTemplate
     * const AiTemplate = await prisma.aiTemplate.create({
     *   data: {
     *     // ... data to create a AiTemplate
     *   }
     * })
     * 
     */
    create<T extends AiTemplateCreateArgs>(args: SelectSubset<T, AiTemplateCreateArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiTemplates.
     * @param {AiTemplateCreateManyArgs} args - Arguments to create many AiTemplates.
     * @example
     * // Create many AiTemplates
     * const aiTemplate = await prisma.aiTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiTemplateCreateManyArgs>(args?: SelectSubset<T, AiTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiTemplates and returns the data saved in the database.
     * @param {AiTemplateCreateManyAndReturnArgs} args - Arguments to create many AiTemplates.
     * @example
     * // Create many AiTemplates
     * const aiTemplate = await prisma.aiTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiTemplates and only return the `id`
     * const aiTemplateWithIdOnly = await prisma.aiTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, AiTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiTemplate.
     * @param {AiTemplateDeleteArgs} args - Arguments to delete one AiTemplate.
     * @example
     * // Delete one AiTemplate
     * const AiTemplate = await prisma.aiTemplate.delete({
     *   where: {
     *     // ... filter to delete one AiTemplate
     *   }
     * })
     * 
     */
    delete<T extends AiTemplateDeleteArgs>(args: SelectSubset<T, AiTemplateDeleteArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiTemplate.
     * @param {AiTemplateUpdateArgs} args - Arguments to update one AiTemplate.
     * @example
     * // Update one AiTemplate
     * const aiTemplate = await prisma.aiTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiTemplateUpdateArgs>(args: SelectSubset<T, AiTemplateUpdateArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiTemplates.
     * @param {AiTemplateDeleteManyArgs} args - Arguments to filter AiTemplates to delete.
     * @example
     * // Delete a few AiTemplates
     * const { count } = await prisma.aiTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiTemplateDeleteManyArgs>(args?: SelectSubset<T, AiTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiTemplates
     * const aiTemplate = await prisma.aiTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiTemplateUpdateManyArgs>(args: SelectSubset<T, AiTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiTemplates and returns the data updated in the database.
     * @param {AiTemplateUpdateManyAndReturnArgs} args - Arguments to update many AiTemplates.
     * @example
     * // Update many AiTemplates
     * const aiTemplate = await prisma.aiTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiTemplates and only return the `id`
     * const aiTemplateWithIdOnly = await prisma.aiTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, AiTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiTemplate.
     * @param {AiTemplateUpsertArgs} args - Arguments to update or create a AiTemplate.
     * @example
     * // Update or create a AiTemplate
     * const aiTemplate = await prisma.aiTemplate.upsert({
     *   create: {
     *     // ... data to create a AiTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiTemplate we want to update
     *   }
     * })
     */
    upsert<T extends AiTemplateUpsertArgs>(args: SelectSubset<T, AiTemplateUpsertArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateCountArgs} args - Arguments to filter AiTemplates to count.
     * @example
     * // Count the number of AiTemplates
     * const count = await prisma.aiTemplate.count({
     *   where: {
     *     // ... the filter for the AiTemplates we want to count
     *   }
     * })
    **/
    count<T extends AiTemplateCountArgs>(
      args?: Subset<T, AiTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiTemplateAggregateArgs>(args: Subset<T, AiTemplateAggregateArgs>): Prisma.PrismaPromise<GetAiTemplateAggregateType<T>>

    /**
     * Group by AiTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiTemplateGroupByArgs['orderBy'] }
        : { orderBy?: AiTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiTemplate model
   */
  readonly fields: AiTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends AiTemplate$createdByArgs<ExtArgs> = {}>(args?: Subset<T, AiTemplate$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    options<T extends AiTemplate$optionsArgs<ExtArgs> = {}>(args?: Subset<T, AiTemplate$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiTemplate model
   */
  interface AiTemplateFieldRefs {
    readonly id: FieldRef<"AiTemplate", 'String'>
    readonly companyId: FieldRef<"AiTemplate", 'Int'>
    readonly name: FieldRef<"AiTemplate", 'String'>
    readonly content: FieldRef<"AiTemplate", 'String'>
    readonly category: FieldRef<"AiTemplate", 'AiTemplateCategory'>
    readonly createdAt: FieldRef<"AiTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"AiTemplate", 'DateTime'>
    readonly createdById: FieldRef<"AiTemplate", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AiTemplate findUnique
   */
  export type AiTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplate to fetch.
     */
    where: AiTemplateWhereUniqueInput
  }

  /**
   * AiTemplate findUniqueOrThrow
   */
  export type AiTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplate to fetch.
     */
    where: AiTemplateWhereUniqueInput
  }

  /**
   * AiTemplate findFirst
   */
  export type AiTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplate to fetch.
     */
    where?: AiTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplates to fetch.
     */
    orderBy?: AiTemplateOrderByWithRelationInput | AiTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiTemplates.
     */
    cursor?: AiTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiTemplates.
     */
    distinct?: AiTemplateScalarFieldEnum | AiTemplateScalarFieldEnum[]
  }

  /**
   * AiTemplate findFirstOrThrow
   */
  export type AiTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplate to fetch.
     */
    where?: AiTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplates to fetch.
     */
    orderBy?: AiTemplateOrderByWithRelationInput | AiTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiTemplates.
     */
    cursor?: AiTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiTemplates.
     */
    distinct?: AiTemplateScalarFieldEnum | AiTemplateScalarFieldEnum[]
  }

  /**
   * AiTemplate findMany
   */
  export type AiTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplates to fetch.
     */
    where?: AiTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplates to fetch.
     */
    orderBy?: AiTemplateOrderByWithRelationInput | AiTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiTemplates.
     */
    cursor?: AiTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplates.
     */
    skip?: number
    distinct?: AiTemplateScalarFieldEnum | AiTemplateScalarFieldEnum[]
  }

  /**
   * AiTemplate create
   */
  export type AiTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a AiTemplate.
     */
    data: XOR<AiTemplateCreateInput, AiTemplateUncheckedCreateInput>
  }

  /**
   * AiTemplate createMany
   */
  export type AiTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiTemplates.
     */
    data: AiTemplateCreateManyInput | AiTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiTemplate createManyAndReturn
   */
  export type AiTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many AiTemplates.
     */
    data: AiTemplateCreateManyInput | AiTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiTemplate update
   */
  export type AiTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a AiTemplate.
     */
    data: XOR<AiTemplateUpdateInput, AiTemplateUncheckedUpdateInput>
    /**
     * Choose, which AiTemplate to update.
     */
    where: AiTemplateWhereUniqueInput
  }

  /**
   * AiTemplate updateMany
   */
  export type AiTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiTemplates.
     */
    data: XOR<AiTemplateUpdateManyMutationInput, AiTemplateUncheckedUpdateManyInput>
    /**
     * Filter which AiTemplates to update
     */
    where?: AiTemplateWhereInput
    /**
     * Limit how many AiTemplates to update.
     */
    limit?: number
  }

  /**
   * AiTemplate updateManyAndReturn
   */
  export type AiTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * The data used to update AiTemplates.
     */
    data: XOR<AiTemplateUpdateManyMutationInput, AiTemplateUncheckedUpdateManyInput>
    /**
     * Filter which AiTemplates to update
     */
    where?: AiTemplateWhereInput
    /**
     * Limit how many AiTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiTemplate upsert
   */
  export type AiTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the AiTemplate to update in case it exists.
     */
    where: AiTemplateWhereUniqueInput
    /**
     * In case the AiTemplate found by the `where` argument doesn't exist, create a new AiTemplate with this data.
     */
    create: XOR<AiTemplateCreateInput, AiTemplateUncheckedCreateInput>
    /**
     * In case the AiTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiTemplateUpdateInput, AiTemplateUncheckedUpdateInput>
  }

  /**
   * AiTemplate delete
   */
  export type AiTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
    /**
     * Filter which AiTemplate to delete.
     */
    where: AiTemplateWhereUniqueInput
  }

  /**
   * AiTemplate deleteMany
   */
  export type AiTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiTemplates to delete
     */
    where?: AiTemplateWhereInput
    /**
     * Limit how many AiTemplates to delete.
     */
    limit?: number
  }

  /**
   * AiTemplate.createdBy
   */
  export type AiTemplate$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AiTemplate.options
   */
  export type AiTemplate$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    where?: AiTemplateOptionWhereInput
    orderBy?: AiTemplateOptionOrderByWithRelationInput | AiTemplateOptionOrderByWithRelationInput[]
    cursor?: AiTemplateOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AiTemplateOptionScalarFieldEnum | AiTemplateOptionScalarFieldEnum[]
  }

  /**
   * AiTemplate without action
   */
  export type AiTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplate
     */
    select?: AiTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplate
     */
    omit?: AiTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateInclude<ExtArgs> | null
  }


  /**
   * Model AiTemplateOption
   */

  export type AggregateAiTemplateOption = {
    _count: AiTemplateOptionCountAggregateOutputType | null
    _min: AiTemplateOptionMinAggregateOutputType | null
    _max: AiTemplateOptionMaxAggregateOutputType | null
  }

  export type AiTemplateOptionMinAggregateOutputType = {
    id: string | null
    templateId: string | null
    label: string | null
    value: string | null
    createdAt: Date | null
  }

  export type AiTemplateOptionMaxAggregateOutputType = {
    id: string | null
    templateId: string | null
    label: string | null
    value: string | null
    createdAt: Date | null
  }

  export type AiTemplateOptionCountAggregateOutputType = {
    id: number
    templateId: number
    label: number
    value: number
    createdAt: number
    _all: number
  }


  export type AiTemplateOptionMinAggregateInputType = {
    id?: true
    templateId?: true
    label?: true
    value?: true
    createdAt?: true
  }

  export type AiTemplateOptionMaxAggregateInputType = {
    id?: true
    templateId?: true
    label?: true
    value?: true
    createdAt?: true
  }

  export type AiTemplateOptionCountAggregateInputType = {
    id?: true
    templateId?: true
    label?: true
    value?: true
    createdAt?: true
    _all?: true
  }

  export type AiTemplateOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiTemplateOption to aggregate.
     */
    where?: AiTemplateOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplateOptions to fetch.
     */
    orderBy?: AiTemplateOptionOrderByWithRelationInput | AiTemplateOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AiTemplateOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplateOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplateOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AiTemplateOptions
    **/
    _count?: true | AiTemplateOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AiTemplateOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AiTemplateOptionMaxAggregateInputType
  }

  export type GetAiTemplateOptionAggregateType<T extends AiTemplateOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateAiTemplateOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAiTemplateOption[P]>
      : GetScalarType<T[P], AggregateAiTemplateOption[P]>
  }




  export type AiTemplateOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AiTemplateOptionWhereInput
    orderBy?: AiTemplateOptionOrderByWithAggregationInput | AiTemplateOptionOrderByWithAggregationInput[]
    by: AiTemplateOptionScalarFieldEnum[] | AiTemplateOptionScalarFieldEnum
    having?: AiTemplateOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AiTemplateOptionCountAggregateInputType | true
    _min?: AiTemplateOptionMinAggregateInputType
    _max?: AiTemplateOptionMaxAggregateInputType
  }

  export type AiTemplateOptionGroupByOutputType = {
    id: string
    templateId: string
    label: string
    value: string
    createdAt: Date
    _count: AiTemplateOptionCountAggregateOutputType | null
    _min: AiTemplateOptionMinAggregateOutputType | null
    _max: AiTemplateOptionMaxAggregateOutputType | null
  }

  type GetAiTemplateOptionGroupByPayload<T extends AiTemplateOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AiTemplateOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AiTemplateOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AiTemplateOptionGroupByOutputType[P]>
            : GetScalarType<T[P], AiTemplateOptionGroupByOutputType[P]>
        }
      >
    >


  export type AiTemplateOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    label?: boolean
    value?: boolean
    createdAt?: boolean
    template?: boolean | AiTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiTemplateOption"]>

  export type AiTemplateOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    label?: boolean
    value?: boolean
    createdAt?: boolean
    template?: boolean | AiTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiTemplateOption"]>

  export type AiTemplateOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    templateId?: boolean
    label?: boolean
    value?: boolean
    createdAt?: boolean
    template?: boolean | AiTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aiTemplateOption"]>

  export type AiTemplateOptionSelectScalar = {
    id?: boolean
    templateId?: boolean
    label?: boolean
    value?: boolean
    createdAt?: boolean
  }

  export type AiTemplateOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "templateId" | "label" | "value" | "createdAt", ExtArgs["result"]["aiTemplateOption"]>
  export type AiTemplateOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | AiTemplateDefaultArgs<ExtArgs>
  }
  export type AiTemplateOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | AiTemplateDefaultArgs<ExtArgs>
  }
  export type AiTemplateOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    template?: boolean | AiTemplateDefaultArgs<ExtArgs>
  }

  export type $AiTemplateOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AiTemplateOption"
    objects: {
      template: Prisma.$AiTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      templateId: string
      label: string
      value: string
      createdAt: Date
    }, ExtArgs["result"]["aiTemplateOption"]>
    composites: {}
  }

  type AiTemplateOptionGetPayload<S extends boolean | null | undefined | AiTemplateOptionDefaultArgs> = $Result.GetResult<Prisma.$AiTemplateOptionPayload, S>

  type AiTemplateOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AiTemplateOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AiTemplateOptionCountAggregateInputType | true
    }

  export interface AiTemplateOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AiTemplateOption'], meta: { name: 'AiTemplateOption' } }
    /**
     * Find zero or one AiTemplateOption that matches the filter.
     * @param {AiTemplateOptionFindUniqueArgs} args - Arguments to find a AiTemplateOption
     * @example
     * // Get one AiTemplateOption
     * const aiTemplateOption = await prisma.aiTemplateOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AiTemplateOptionFindUniqueArgs>(args: SelectSubset<T, AiTemplateOptionFindUniqueArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AiTemplateOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AiTemplateOptionFindUniqueOrThrowArgs} args - Arguments to find a AiTemplateOption
     * @example
     * // Get one AiTemplateOption
     * const aiTemplateOption = await prisma.aiTemplateOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AiTemplateOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, AiTemplateOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiTemplateOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionFindFirstArgs} args - Arguments to find a AiTemplateOption
     * @example
     * // Get one AiTemplateOption
     * const aiTemplateOption = await prisma.aiTemplateOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AiTemplateOptionFindFirstArgs>(args?: SelectSubset<T, AiTemplateOptionFindFirstArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AiTemplateOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionFindFirstOrThrowArgs} args - Arguments to find a AiTemplateOption
     * @example
     * // Get one AiTemplateOption
     * const aiTemplateOption = await prisma.aiTemplateOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AiTemplateOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, AiTemplateOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AiTemplateOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AiTemplateOptions
     * const aiTemplateOptions = await prisma.aiTemplateOption.findMany()
     * 
     * // Get first 10 AiTemplateOptions
     * const aiTemplateOptions = await prisma.aiTemplateOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aiTemplateOptionWithIdOnly = await prisma.aiTemplateOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AiTemplateOptionFindManyArgs>(args?: SelectSubset<T, AiTemplateOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AiTemplateOption.
     * @param {AiTemplateOptionCreateArgs} args - Arguments to create a AiTemplateOption.
     * @example
     * // Create one AiTemplateOption
     * const AiTemplateOption = await prisma.aiTemplateOption.create({
     *   data: {
     *     // ... data to create a AiTemplateOption
     *   }
     * })
     * 
     */
    create<T extends AiTemplateOptionCreateArgs>(args: SelectSubset<T, AiTemplateOptionCreateArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AiTemplateOptions.
     * @param {AiTemplateOptionCreateManyArgs} args - Arguments to create many AiTemplateOptions.
     * @example
     * // Create many AiTemplateOptions
     * const aiTemplateOption = await prisma.aiTemplateOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AiTemplateOptionCreateManyArgs>(args?: SelectSubset<T, AiTemplateOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AiTemplateOptions and returns the data saved in the database.
     * @param {AiTemplateOptionCreateManyAndReturnArgs} args - Arguments to create many AiTemplateOptions.
     * @example
     * // Create many AiTemplateOptions
     * const aiTemplateOption = await prisma.aiTemplateOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AiTemplateOptions and only return the `id`
     * const aiTemplateOptionWithIdOnly = await prisma.aiTemplateOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AiTemplateOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, AiTemplateOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AiTemplateOption.
     * @param {AiTemplateOptionDeleteArgs} args - Arguments to delete one AiTemplateOption.
     * @example
     * // Delete one AiTemplateOption
     * const AiTemplateOption = await prisma.aiTemplateOption.delete({
     *   where: {
     *     // ... filter to delete one AiTemplateOption
     *   }
     * })
     * 
     */
    delete<T extends AiTemplateOptionDeleteArgs>(args: SelectSubset<T, AiTemplateOptionDeleteArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AiTemplateOption.
     * @param {AiTemplateOptionUpdateArgs} args - Arguments to update one AiTemplateOption.
     * @example
     * // Update one AiTemplateOption
     * const aiTemplateOption = await prisma.aiTemplateOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AiTemplateOptionUpdateArgs>(args: SelectSubset<T, AiTemplateOptionUpdateArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AiTemplateOptions.
     * @param {AiTemplateOptionDeleteManyArgs} args - Arguments to filter AiTemplateOptions to delete.
     * @example
     * // Delete a few AiTemplateOptions
     * const { count } = await prisma.aiTemplateOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AiTemplateOptionDeleteManyArgs>(args?: SelectSubset<T, AiTemplateOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiTemplateOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AiTemplateOptions
     * const aiTemplateOption = await prisma.aiTemplateOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AiTemplateOptionUpdateManyArgs>(args: SelectSubset<T, AiTemplateOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AiTemplateOptions and returns the data updated in the database.
     * @param {AiTemplateOptionUpdateManyAndReturnArgs} args - Arguments to update many AiTemplateOptions.
     * @example
     * // Update many AiTemplateOptions
     * const aiTemplateOption = await prisma.aiTemplateOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AiTemplateOptions and only return the `id`
     * const aiTemplateOptionWithIdOnly = await prisma.aiTemplateOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AiTemplateOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, AiTemplateOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AiTemplateOption.
     * @param {AiTemplateOptionUpsertArgs} args - Arguments to update or create a AiTemplateOption.
     * @example
     * // Update or create a AiTemplateOption
     * const aiTemplateOption = await prisma.aiTemplateOption.upsert({
     *   create: {
     *     // ... data to create a AiTemplateOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AiTemplateOption we want to update
     *   }
     * })
     */
    upsert<T extends AiTemplateOptionUpsertArgs>(args: SelectSubset<T, AiTemplateOptionUpsertArgs<ExtArgs>>): Prisma__AiTemplateOptionClient<$Result.GetResult<Prisma.$AiTemplateOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AiTemplateOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionCountArgs} args - Arguments to filter AiTemplateOptions to count.
     * @example
     * // Count the number of AiTemplateOptions
     * const count = await prisma.aiTemplateOption.count({
     *   where: {
     *     // ... the filter for the AiTemplateOptions we want to count
     *   }
     * })
    **/
    count<T extends AiTemplateOptionCountArgs>(
      args?: Subset<T, AiTemplateOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AiTemplateOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AiTemplateOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AiTemplateOptionAggregateArgs>(args: Subset<T, AiTemplateOptionAggregateArgs>): Prisma.PrismaPromise<GetAiTemplateOptionAggregateType<T>>

    /**
     * Group by AiTemplateOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AiTemplateOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AiTemplateOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AiTemplateOptionGroupByArgs['orderBy'] }
        : { orderBy?: AiTemplateOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AiTemplateOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAiTemplateOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AiTemplateOption model
   */
  readonly fields: AiTemplateOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AiTemplateOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AiTemplateOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    template<T extends AiTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AiTemplateDefaultArgs<ExtArgs>>): Prisma__AiTemplateClient<$Result.GetResult<Prisma.$AiTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AiTemplateOption model
   */
  interface AiTemplateOptionFieldRefs {
    readonly id: FieldRef<"AiTemplateOption", 'String'>
    readonly templateId: FieldRef<"AiTemplateOption", 'String'>
    readonly label: FieldRef<"AiTemplateOption", 'String'>
    readonly value: FieldRef<"AiTemplateOption", 'String'>
    readonly createdAt: FieldRef<"AiTemplateOption", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AiTemplateOption findUnique
   */
  export type AiTemplateOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplateOption to fetch.
     */
    where: AiTemplateOptionWhereUniqueInput
  }

  /**
   * AiTemplateOption findUniqueOrThrow
   */
  export type AiTemplateOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplateOption to fetch.
     */
    where: AiTemplateOptionWhereUniqueInput
  }

  /**
   * AiTemplateOption findFirst
   */
  export type AiTemplateOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplateOption to fetch.
     */
    where?: AiTemplateOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplateOptions to fetch.
     */
    orderBy?: AiTemplateOptionOrderByWithRelationInput | AiTemplateOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiTemplateOptions.
     */
    cursor?: AiTemplateOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplateOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplateOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiTemplateOptions.
     */
    distinct?: AiTemplateOptionScalarFieldEnum | AiTemplateOptionScalarFieldEnum[]
  }

  /**
   * AiTemplateOption findFirstOrThrow
   */
  export type AiTemplateOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplateOption to fetch.
     */
    where?: AiTemplateOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplateOptions to fetch.
     */
    orderBy?: AiTemplateOptionOrderByWithRelationInput | AiTemplateOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AiTemplateOptions.
     */
    cursor?: AiTemplateOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplateOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplateOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AiTemplateOptions.
     */
    distinct?: AiTemplateOptionScalarFieldEnum | AiTemplateOptionScalarFieldEnum[]
  }

  /**
   * AiTemplateOption findMany
   */
  export type AiTemplateOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * Filter, which AiTemplateOptions to fetch.
     */
    where?: AiTemplateOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AiTemplateOptions to fetch.
     */
    orderBy?: AiTemplateOptionOrderByWithRelationInput | AiTemplateOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AiTemplateOptions.
     */
    cursor?: AiTemplateOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AiTemplateOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AiTemplateOptions.
     */
    skip?: number
    distinct?: AiTemplateOptionScalarFieldEnum | AiTemplateOptionScalarFieldEnum[]
  }

  /**
   * AiTemplateOption create
   */
  export type AiTemplateOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a AiTemplateOption.
     */
    data: XOR<AiTemplateOptionCreateInput, AiTemplateOptionUncheckedCreateInput>
  }

  /**
   * AiTemplateOption createMany
   */
  export type AiTemplateOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AiTemplateOptions.
     */
    data: AiTemplateOptionCreateManyInput | AiTemplateOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AiTemplateOption createManyAndReturn
   */
  export type AiTemplateOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * The data used to create many AiTemplateOptions.
     */
    data: AiTemplateOptionCreateManyInput | AiTemplateOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiTemplateOption update
   */
  export type AiTemplateOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a AiTemplateOption.
     */
    data: XOR<AiTemplateOptionUpdateInput, AiTemplateOptionUncheckedUpdateInput>
    /**
     * Choose, which AiTemplateOption to update.
     */
    where: AiTemplateOptionWhereUniqueInput
  }

  /**
   * AiTemplateOption updateMany
   */
  export type AiTemplateOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AiTemplateOptions.
     */
    data: XOR<AiTemplateOptionUpdateManyMutationInput, AiTemplateOptionUncheckedUpdateManyInput>
    /**
     * Filter which AiTemplateOptions to update
     */
    where?: AiTemplateOptionWhereInput
    /**
     * Limit how many AiTemplateOptions to update.
     */
    limit?: number
  }

  /**
   * AiTemplateOption updateManyAndReturn
   */
  export type AiTemplateOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * The data used to update AiTemplateOptions.
     */
    data: XOR<AiTemplateOptionUpdateManyMutationInput, AiTemplateOptionUncheckedUpdateManyInput>
    /**
     * Filter which AiTemplateOptions to update
     */
    where?: AiTemplateOptionWhereInput
    /**
     * Limit how many AiTemplateOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AiTemplateOption upsert
   */
  export type AiTemplateOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the AiTemplateOption to update in case it exists.
     */
    where: AiTemplateOptionWhereUniqueInput
    /**
     * In case the AiTemplateOption found by the `where` argument doesn't exist, create a new AiTemplateOption with this data.
     */
    create: XOR<AiTemplateOptionCreateInput, AiTemplateOptionUncheckedCreateInput>
    /**
     * In case the AiTemplateOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AiTemplateOptionUpdateInput, AiTemplateOptionUncheckedUpdateInput>
  }

  /**
   * AiTemplateOption delete
   */
  export type AiTemplateOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
    /**
     * Filter which AiTemplateOption to delete.
     */
    where: AiTemplateOptionWhereUniqueInput
  }

  /**
   * AiTemplateOption deleteMany
   */
  export type AiTemplateOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AiTemplateOptions to delete
     */
    where?: AiTemplateOptionWhereInput
    /**
     * Limit how many AiTemplateOptions to delete.
     */
    limit?: number
  }

  /**
   * AiTemplateOption without action
   */
  export type AiTemplateOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AiTemplateOption
     */
    select?: AiTemplateOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AiTemplateOption
     */
    omit?: AiTemplateOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AiTemplateOptionInclude<ExtArgs> | null
  }


  /**
   * Model CompanyMember
   */

  export type AggregateCompanyMember = {
    _count: CompanyMemberCountAggregateOutputType | null
    _avg: CompanyMemberAvgAggregateOutputType | null
    _sum: CompanyMemberSumAggregateOutputType | null
    _min: CompanyMemberMinAggregateOutputType | null
    _max: CompanyMemberMaxAggregateOutputType | null
  }

  export type CompanyMemberAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type CompanyMemberSumAggregateOutputType = {
    id: number | null
    userId: number | null
    companyId: number | null
  }

  export type CompanyMemberMinAggregateOutputType = {
    id: number | null
    isAdmin: boolean | null
    canPost: boolean | null
    canApprove: boolean | null
    isOwner: boolean | null
    companyMemberStatus: $Enums.CompanyMemberStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    companyId: number | null
  }

  export type CompanyMemberMaxAggregateOutputType = {
    id: number | null
    isAdmin: boolean | null
    canPost: boolean | null
    canApprove: boolean | null
    isOwner: boolean | null
    companyMemberStatus: $Enums.CompanyMemberStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    companyId: number | null
  }

  export type CompanyMemberCountAggregateOutputType = {
    id: number
    isAdmin: number
    canPost: number
    canApprove: number
    isOwner: number
    companyMemberStatus: number
    createdAt: number
    updatedAt: number
    userId: number
    companyId: number
    _all: number
  }


  export type CompanyMemberAvgAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type CompanyMemberSumAggregateInputType = {
    id?: true
    userId?: true
    companyId?: true
  }

  export type CompanyMemberMinAggregateInputType = {
    id?: true
    isAdmin?: true
    canPost?: true
    canApprove?: true
    isOwner?: true
    companyMemberStatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    companyId?: true
  }

  export type CompanyMemberMaxAggregateInputType = {
    id?: true
    isAdmin?: true
    canPost?: true
    canApprove?: true
    isOwner?: true
    companyMemberStatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    companyId?: true
  }

  export type CompanyMemberCountAggregateInputType = {
    id?: true
    isAdmin?: true
    canPost?: true
    canApprove?: true
    isOwner?: true
    companyMemberStatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    companyId?: true
    _all?: true
  }

  export type CompanyMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMember to aggregate.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyMembers
    **/
    _count?: true | CompanyMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMemberMaxAggregateInputType
  }

  export type GetCompanyMemberAggregateType<T extends CompanyMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyMember[P]>
      : GetScalarType<T[P], AggregateCompanyMember[P]>
  }




  export type CompanyMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithAggregationInput | CompanyMemberOrderByWithAggregationInput[]
    by: CompanyMemberScalarFieldEnum[] | CompanyMemberScalarFieldEnum
    having?: CompanyMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyMemberCountAggregateInputType | true
    _avg?: CompanyMemberAvgAggregateInputType
    _sum?: CompanyMemberSumAggregateInputType
    _min?: CompanyMemberMinAggregateInputType
    _max?: CompanyMemberMaxAggregateInputType
  }

  export type CompanyMemberGroupByOutputType = {
    id: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt: Date
    updatedAt: Date
    userId: number
    companyId: number
    _count: CompanyMemberCountAggregateOutputType | null
    _avg: CompanyMemberAvgAggregateOutputType | null
    _sum: CompanyMemberSumAggregateOutputType | null
    _min: CompanyMemberMinAggregateOutputType | null
    _max: CompanyMemberMaxAggregateOutputType | null
  }

  type GetCompanyMemberGroupByPayload<T extends CompanyMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyMemberGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyMemberGroupByOutputType[P]>
        }
      >
    >


  export type CompanyMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    companyMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    companyMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    companyMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    companyId?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectScalar = {
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    companyMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    companyId?: boolean
  }

  export type CompanyMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isAdmin" | "canPost" | "canApprove" | "isOwner" | "companyMemberStatus" | "createdAt" | "updatedAt" | "userId" | "companyId", ExtArgs["result"]["companyMember"]>
  export type CompanyMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompanyMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyMember"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      isAdmin: boolean
      canPost: boolean
      canApprove: boolean
      isOwner: boolean
      companyMemberStatus: $Enums.CompanyMemberStatus
      createdAt: Date
      updatedAt: Date
      userId: number
      companyId: number
    }, ExtArgs["result"]["companyMember"]>
    composites: {}
  }

  type CompanyMemberGetPayload<S extends boolean | null | undefined | CompanyMemberDefaultArgs> = $Result.GetResult<Prisma.$CompanyMemberPayload, S>

  type CompanyMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyMemberCountAggregateInputType | true
    }

  export interface CompanyMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyMember'], meta: { name: 'CompanyMember' } }
    /**
     * Find zero or one CompanyMember that matches the filter.
     * @param {CompanyMemberFindUniqueArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyMemberFindUniqueArgs>(args: SelectSubset<T, CompanyMemberFindUniqueArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyMemberFindUniqueOrThrowArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindFirstArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyMemberFindFirstArgs>(args?: SelectSubset<T, CompanyMemberFindFirstArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindFirstOrThrowArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyMembers
     * const companyMembers = await prisma.companyMember.findMany()
     * 
     * // Get first 10 CompanyMembers
     * const companyMembers = await prisma.companyMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyMemberFindManyArgs>(args?: SelectSubset<T, CompanyMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyMember.
     * @param {CompanyMemberCreateArgs} args - Arguments to create a CompanyMember.
     * @example
     * // Create one CompanyMember
     * const CompanyMember = await prisma.companyMember.create({
     *   data: {
     *     // ... data to create a CompanyMember
     *   }
     * })
     * 
     */
    create<T extends CompanyMemberCreateArgs>(args: SelectSubset<T, CompanyMemberCreateArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyMembers.
     * @param {CompanyMemberCreateManyArgs} args - Arguments to create many CompanyMembers.
     * @example
     * // Create many CompanyMembers
     * const companyMember = await prisma.companyMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyMemberCreateManyArgs>(args?: SelectSubset<T, CompanyMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyMembers and returns the data saved in the database.
     * @param {CompanyMemberCreateManyAndReturnArgs} args - Arguments to create many CompanyMembers.
     * @example
     * // Create many CompanyMembers
     * const companyMember = await prisma.companyMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyMembers and only return the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyMember.
     * @param {CompanyMemberDeleteArgs} args - Arguments to delete one CompanyMember.
     * @example
     * // Delete one CompanyMember
     * const CompanyMember = await prisma.companyMember.delete({
     *   where: {
     *     // ... filter to delete one CompanyMember
     *   }
     * })
     * 
     */
    delete<T extends CompanyMemberDeleteArgs>(args: SelectSubset<T, CompanyMemberDeleteArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyMember.
     * @param {CompanyMemberUpdateArgs} args - Arguments to update one CompanyMember.
     * @example
     * // Update one CompanyMember
     * const companyMember = await prisma.companyMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyMemberUpdateArgs>(args: SelectSubset<T, CompanyMemberUpdateArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyMembers.
     * @param {CompanyMemberDeleteManyArgs} args - Arguments to filter CompanyMembers to delete.
     * @example
     * // Delete a few CompanyMembers
     * const { count } = await prisma.companyMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyMemberDeleteManyArgs>(args?: SelectSubset<T, CompanyMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyMembers
     * const companyMember = await prisma.companyMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyMemberUpdateManyArgs>(args: SelectSubset<T, CompanyMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyMembers and returns the data updated in the database.
     * @param {CompanyMemberUpdateManyAndReturnArgs} args - Arguments to update many CompanyMembers.
     * @example
     * // Update many CompanyMembers
     * const companyMember = await prisma.companyMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyMembers and only return the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyMember.
     * @param {CompanyMemberUpsertArgs} args - Arguments to update or create a CompanyMember.
     * @example
     * // Update or create a CompanyMember
     * const companyMember = await prisma.companyMember.upsert({
     *   create: {
     *     // ... data to create a CompanyMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyMember we want to update
     *   }
     * })
     */
    upsert<T extends CompanyMemberUpsertArgs>(args: SelectSubset<T, CompanyMemberUpsertArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberCountArgs} args - Arguments to filter CompanyMembers to count.
     * @example
     * // Count the number of CompanyMembers
     * const count = await prisma.companyMember.count({
     *   where: {
     *     // ... the filter for the CompanyMembers we want to count
     *   }
     * })
    **/
    count<T extends CompanyMemberCountArgs>(
      args?: Subset<T, CompanyMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyMemberAggregateArgs>(args: Subset<T, CompanyMemberAggregateArgs>): Prisma.PrismaPromise<GetCompanyMemberAggregateType<T>>

    /**
     * Group by CompanyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyMemberGroupByArgs['orderBy'] }
        : { orderBy?: CompanyMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyMember model
   */
  readonly fields: CompanyMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyMember model
   */
  interface CompanyMemberFieldRefs {
    readonly id: FieldRef<"CompanyMember", 'Int'>
    readonly isAdmin: FieldRef<"CompanyMember", 'Boolean'>
    readonly canPost: FieldRef<"CompanyMember", 'Boolean'>
    readonly canApprove: FieldRef<"CompanyMember", 'Boolean'>
    readonly isOwner: FieldRef<"CompanyMember", 'Boolean'>
    readonly companyMemberStatus: FieldRef<"CompanyMember", 'CompanyMemberStatus'>
    readonly createdAt: FieldRef<"CompanyMember", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyMember", 'DateTime'>
    readonly userId: FieldRef<"CompanyMember", 'Int'>
    readonly companyId: FieldRef<"CompanyMember", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CompanyMember findUnique
   */
  export type CompanyMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember findUniqueOrThrow
   */
  export type CompanyMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember findFirst
   */
  export type CompanyMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMembers.
     */
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember findFirstOrThrow
   */
  export type CompanyMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMembers.
     */
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember findMany
   */
  export type CompanyMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMembers to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember create
   */
  export type CompanyMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyMember.
     */
    data: XOR<CompanyMemberCreateInput, CompanyMemberUncheckedCreateInput>
  }

  /**
   * CompanyMember createMany
   */
  export type CompanyMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyMembers.
     */
    data: CompanyMemberCreateManyInput | CompanyMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyMember createManyAndReturn
   */
  export type CompanyMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyMembers.
     */
    data: CompanyMemberCreateManyInput | CompanyMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyMember update
   */
  export type CompanyMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyMember.
     */
    data: XOR<CompanyMemberUpdateInput, CompanyMemberUncheckedUpdateInput>
    /**
     * Choose, which CompanyMember to update.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember updateMany
   */
  export type CompanyMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyMembers.
     */
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyMembers to update
     */
    where?: CompanyMemberWhereInput
    /**
     * Limit how many CompanyMembers to update.
     */
    limit?: number
  }

  /**
   * CompanyMember updateManyAndReturn
   */
  export type CompanyMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * The data used to update CompanyMembers.
     */
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyMembers to update
     */
    where?: CompanyMemberWhereInput
    /**
     * Limit how many CompanyMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyMember upsert
   */
  export type CompanyMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyMember to update in case it exists.
     */
    where: CompanyMemberWhereUniqueInput
    /**
     * In case the CompanyMember found by the `where` argument doesn't exist, create a new CompanyMember with this data.
     */
    create: XOR<CompanyMemberCreateInput, CompanyMemberUncheckedCreateInput>
    /**
     * In case the CompanyMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyMemberUpdateInput, CompanyMemberUncheckedUpdateInput>
  }

  /**
   * CompanyMember delete
   */
  export type CompanyMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter which CompanyMember to delete.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember deleteMany
   */
  export type CompanyMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMembers to delete
     */
    where?: CompanyMemberWhereInput
    /**
     * Limit how many CompanyMembers to delete.
     */
    limit?: number
  }

  /**
   * CompanyMember without action
   */
  export type CompanyMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionPlan
   */

  export type AggregateSubscriptionPlan = {
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  export type SubscriptionPlanAvgAggregateOutputType = {
    priceMonthly: Decimal | null
    priceYearly: Decimal | null
  }

  export type SubscriptionPlanSumAggregateOutputType = {
    priceMonthly: Decimal | null
    priceYearly: Decimal | null
  }

  export type SubscriptionPlanMinAggregateOutputType = {
    id: string | null
    planType: $Enums.PlanType | null
    stripeProductId: string | null
    stripePriceIdMonthly: string | null
    stripePriceIdYearly: string | null
    priceMonthly: Decimal | null
    priceYearly: Decimal | null
    currency: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionPlanMaxAggregateOutputType = {
    id: string | null
    planType: $Enums.PlanType | null
    stripeProductId: string | null
    stripePriceIdMonthly: string | null
    stripePriceIdYearly: string | null
    priceMonthly: Decimal | null
    priceYearly: Decimal | null
    currency: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionPlanCountAggregateOutputType = {
    id: number
    planType: number
    stripeProductId: number
    stripePriceIdMonthly: number
    stripePriceIdYearly: number
    priceMonthly: number
    priceYearly: number
    currency: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionPlanAvgAggregateInputType = {
    priceMonthly?: true
    priceYearly?: true
  }

  export type SubscriptionPlanSumAggregateInputType = {
    priceMonthly?: true
    priceYearly?: true
  }

  export type SubscriptionPlanMinAggregateInputType = {
    id?: true
    planType?: true
    stripeProductId?: true
    stripePriceIdMonthly?: true
    stripePriceIdYearly?: true
    priceMonthly?: true
    priceYearly?: true
    currency?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionPlanMaxAggregateInputType = {
    id?: true
    planType?: true
    stripeProductId?: true
    stripePriceIdMonthly?: true
    stripePriceIdYearly?: true
    priceMonthly?: true
    priceYearly?: true
    currency?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionPlanCountAggregateInputType = {
    id?: true
    planType?: true
    stripeProductId?: true
    stripePriceIdMonthly?: true
    stripePriceIdYearly?: true
    priceMonthly?: true
    priceYearly?: true
    currency?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlan to aggregate.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionPlans
    **/
    _count?: true | SubscriptionPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type GetSubscriptionPlanAggregateType<T extends SubscriptionPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
      : GetScalarType<T[P], AggregateSubscriptionPlan[P]>
  }




  export type SubscriptionPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPlanWhereInput
    orderBy?: SubscriptionPlanOrderByWithAggregationInput | SubscriptionPlanOrderByWithAggregationInput[]
    by: SubscriptionPlanScalarFieldEnum[] | SubscriptionPlanScalarFieldEnum
    having?: SubscriptionPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionPlanCountAggregateInputType | true
    _avg?: SubscriptionPlanAvgAggregateInputType
    _sum?: SubscriptionPlanSumAggregateInputType
    _min?: SubscriptionPlanMinAggregateInputType
    _max?: SubscriptionPlanMaxAggregateInputType
  }

  export type SubscriptionPlanGroupByOutputType = {
    id: string
    planType: $Enums.PlanType
    stripeProductId: string | null
    stripePriceIdMonthly: string | null
    stripePriceIdYearly: string | null
    priceMonthly: Decimal
    priceYearly: Decimal
    currency: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionPlanCountAggregateOutputType | null
    _avg: SubscriptionPlanAvgAggregateOutputType | null
    _sum: SubscriptionPlanSumAggregateOutputType | null
    _min: SubscriptionPlanMinAggregateOutputType | null
    _max: SubscriptionPlanMaxAggregateOutputType | null
  }

  type GetSubscriptionPlanGroupByPayload<T extends SubscriptionPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionPlanGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planType?: boolean
    stripeProductId?: boolean
    stripePriceIdMonthly?: boolean
    stripePriceIdYearly?: boolean
    priceMonthly?: boolean
    priceYearly?: boolean
    currency?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planType?: boolean
    stripeProductId?: boolean
    stripePriceIdMonthly?: boolean
    stripePriceIdYearly?: boolean
    priceMonthly?: boolean
    priceYearly?: boolean
    currency?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planType?: boolean
    stripeProductId?: boolean
    stripePriceIdMonthly?: boolean
    stripePriceIdYearly?: boolean
    priceMonthly?: boolean
    priceYearly?: boolean
    currency?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["subscriptionPlan"]>

  export type SubscriptionPlanSelectScalar = {
    id?: boolean
    planType?: boolean
    stripeProductId?: boolean
    stripePriceIdMonthly?: boolean
    stripePriceIdYearly?: boolean
    priceMonthly?: boolean
    priceYearly?: boolean
    currency?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planType" | "stripeProductId" | "stripePriceIdMonthly" | "stripePriceIdYearly" | "priceMonthly" | "priceYearly" | "currency" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["subscriptionPlan"]>
  export type SubscriptionPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | SubscriptionPlan$subscriptionsArgs<ExtArgs>
    _count?: boolean | SubscriptionPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SubscriptionPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SubscriptionPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SubscriptionPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionPlan"
    objects: {
      subscriptions: Prisma.$CustomerSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planType: $Enums.PlanType
      stripeProductId: string | null
      stripePriceIdMonthly: string | null
      stripePriceIdYearly: string | null
      priceMonthly: Prisma.Decimal
      priceYearly: Prisma.Decimal
      currency: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscriptionPlan"]>
    composites: {}
  }

  type SubscriptionPlanGetPayload<S extends boolean | null | undefined | SubscriptionPlanDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPlanPayload, S>

  type SubscriptionPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionPlanCountAggregateInputType | true
    }

  export interface SubscriptionPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionPlan'], meta: { name: 'SubscriptionPlan' } }
    /**
     * Find zero or one SubscriptionPlan that matches the filter.
     * @param {SubscriptionPlanFindUniqueArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionPlanFindUniqueArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubscriptionPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionPlanFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionPlanFindFirstArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindFirstOrThrowArgs} args - Arguments to find a SubscriptionPlan
     * @example
     * // Get one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubscriptionPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany()
     * 
     * // Get first 10 SubscriptionPlans
     * const subscriptionPlans = await prisma.subscriptionPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionPlanFindManyArgs>(args?: SelectSubset<T, SubscriptionPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubscriptionPlan.
     * @param {SubscriptionPlanCreateArgs} args - Arguments to create a SubscriptionPlan.
     * @example
     * // Create one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.create({
     *   data: {
     *     // ... data to create a SubscriptionPlan
     *   }
     * })
     * 
     */
    create<T extends SubscriptionPlanCreateArgs>(args: SelectSubset<T, SubscriptionPlanCreateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubscriptionPlans.
     * @param {SubscriptionPlanCreateManyArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionPlanCreateManyArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubscriptionPlans and returns the data saved in the database.
     * @param {SubscriptionPlanCreateManyAndReturnArgs} args - Arguments to create many SubscriptionPlans.
     * @example
     * // Create many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubscriptionPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, SubscriptionPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SubscriptionPlan.
     * @param {SubscriptionPlanDeleteArgs} args - Arguments to delete one SubscriptionPlan.
     * @example
     * // Delete one SubscriptionPlan
     * const SubscriptionPlan = await prisma.subscriptionPlan.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionPlan
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionPlanDeleteArgs>(args: SelectSubset<T, SubscriptionPlanDeleteArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubscriptionPlan.
     * @param {SubscriptionPlanUpdateArgs} args - Arguments to update one SubscriptionPlan.
     * @example
     * // Update one SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionPlanUpdateArgs>(args: SelectSubset<T, SubscriptionPlanUpdateArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubscriptionPlans.
     * @param {SubscriptionPlanDeleteManyArgs} args - Arguments to filter SubscriptionPlans to delete.
     * @example
     * // Delete a few SubscriptionPlans
     * const { count } = await prisma.subscriptionPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionPlanDeleteManyArgs>(args?: SelectSubset<T, SubscriptionPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionPlanUpdateManyArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPlans and returns the data updated in the database.
     * @param {SubscriptionPlanUpdateManyAndReturnArgs} args - Arguments to update many SubscriptionPlans.
     * @example
     * // Update many SubscriptionPlans
     * const subscriptionPlan = await prisma.subscriptionPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubscriptionPlans and only return the `id`
     * const subscriptionPlanWithIdOnly = await prisma.subscriptionPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubscriptionPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SubscriptionPlan.
     * @param {SubscriptionPlanUpsertArgs} args - Arguments to update or create a SubscriptionPlan.
     * @example
     * // Update or create a SubscriptionPlan
     * const subscriptionPlan = await prisma.subscriptionPlan.upsert({
     *   create: {
     *     // ... data to create a SubscriptionPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionPlan we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionPlanUpsertArgs>(args: SelectSubset<T, SubscriptionPlanUpsertArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubscriptionPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanCountArgs} args - Arguments to filter SubscriptionPlans to count.
     * @example
     * // Count the number of SubscriptionPlans
     * const count = await prisma.subscriptionPlan.count({
     *   where: {
     *     // ... the filter for the SubscriptionPlans we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionPlanCountArgs>(
      args?: Subset<T, SubscriptionPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionPlanAggregateArgs>(args: Subset<T, SubscriptionPlanAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionPlanAggregateType<T>>

    /**
     * Group by SubscriptionPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionPlanGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionPlan model
   */
  readonly fields: SubscriptionPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends SubscriptionPlan$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlan$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionPlan model
   */
  interface SubscriptionPlanFieldRefs {
    readonly id: FieldRef<"SubscriptionPlan", 'String'>
    readonly planType: FieldRef<"SubscriptionPlan", 'PlanType'>
    readonly stripeProductId: FieldRef<"SubscriptionPlan", 'String'>
    readonly stripePriceIdMonthly: FieldRef<"SubscriptionPlan", 'String'>
    readonly stripePriceIdYearly: FieldRef<"SubscriptionPlan", 'String'>
    readonly priceMonthly: FieldRef<"SubscriptionPlan", 'Decimal'>
    readonly priceYearly: FieldRef<"SubscriptionPlan", 'Decimal'>
    readonly currency: FieldRef<"SubscriptionPlan", 'String'>
    readonly isActive: FieldRef<"SubscriptionPlan", 'Boolean'>
    readonly createdAt: FieldRef<"SubscriptionPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"SubscriptionPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionPlan findUnique
   */
  export type SubscriptionPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findUniqueOrThrow
   */
  export type SubscriptionPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan findFirst
   */
  export type SubscriptionPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findFirstOrThrow
   */
  export type SubscriptionPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlan to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPlans.
     */
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan findMany
   */
  export type SubscriptionPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPlans to fetch.
     */
    where?: SubscriptionPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPlans to fetch.
     */
    orderBy?: SubscriptionPlanOrderByWithRelationInput | SubscriptionPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionPlans.
     */
    cursor?: SubscriptionPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPlans.
     */
    skip?: number
    distinct?: SubscriptionPlanScalarFieldEnum | SubscriptionPlanScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan create
   */
  export type SubscriptionPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
  }

  /**
   * SubscriptionPlan createMany
   */
  export type SubscriptionPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan createManyAndReturn
   */
  export type SubscriptionPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to create many SubscriptionPlans.
     */
    data: SubscriptionPlanCreateManyInput | SubscriptionPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPlan update
   */
  export type SubscriptionPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionPlan.
     */
    data: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionPlan to update.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan updateMany
   */
  export type SubscriptionPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan updateManyAndReturn
   */
  export type SubscriptionPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * The data used to update SubscriptionPlans.
     */
    data: XOR<SubscriptionPlanUpdateManyMutationInput, SubscriptionPlanUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPlans to update
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan upsert
   */
  export type SubscriptionPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionPlan to update in case it exists.
     */
    where: SubscriptionPlanWhereUniqueInput
    /**
     * In case the SubscriptionPlan found by the `where` argument doesn't exist, create a new SubscriptionPlan with this data.
     */
    create: XOR<SubscriptionPlanCreateInput, SubscriptionPlanUncheckedCreateInput>
    /**
     * In case the SubscriptionPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionPlanUpdateInput, SubscriptionPlanUncheckedUpdateInput>
  }

  /**
   * SubscriptionPlan delete
   */
  export type SubscriptionPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionPlan to delete.
     */
    where: SubscriptionPlanWhereUniqueInput
  }

  /**
   * SubscriptionPlan deleteMany
   */
  export type SubscriptionPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPlans to delete
     */
    where?: SubscriptionPlanWhereInput
    /**
     * Limit how many SubscriptionPlans to delete.
     */
    limit?: number
  }

  /**
   * SubscriptionPlan.subscriptions
   */
  export type SubscriptionPlan$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    where?: CustomerSubscriptionWhereInput
    orderBy?: CustomerSubscriptionOrderByWithRelationInput | CustomerSubscriptionOrderByWithRelationInput[]
    cursor?: CustomerSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerSubscriptionScalarFieldEnum | CustomerSubscriptionScalarFieldEnum[]
  }

  /**
   * SubscriptionPlan without action
   */
  export type SubscriptionPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPlan
     */
    select?: SubscriptionPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPlan
     */
    omit?: SubscriptionPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPlanInclude<ExtArgs> | null
  }


  /**
   * Model CustomerSubscription
   */

  export type AggregateCustomerSubscription = {
    _count: CustomerSubscriptionCountAggregateOutputType | null
    _avg: CustomerSubscriptionAvgAggregateOutputType | null
    _sum: CustomerSubscriptionSumAggregateOutputType | null
    _min: CustomerSubscriptionMinAggregateOutputType | null
    _max: CustomerSubscriptionMaxAggregateOutputType | null
  }

  export type CustomerSubscriptionAvgAggregateOutputType = {
    companyId: number | null
  }

  export type CustomerSubscriptionSumAggregateOutputType = {
    companyId: number | null
  }

  export type CustomerSubscriptionMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    planId: string | null
    status: $Enums.SubscriptionStatus | null
    billingInterval: $Enums.BillingInterval | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    cancellationDetails: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean | null
    trialStart: Date | null
    trialEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerSubscriptionMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    planId: string | null
    status: $Enums.SubscriptionStatus | null
    billingInterval: $Enums.BillingInterval | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    cancellationDetails: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean | null
    trialStart: Date | null
    trialEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerSubscriptionCountAggregateOutputType = {
    id: number
    companyId: number
    planId: number
    status: number
    billingInterval: number
    stripeCustomerId: number
    stripeSubscriptionId: number
    cancellationDetails: number
    currentPeriodStart: number
    currentPeriodEnd: number
    cancelAtPeriodEnd: number
    trialStart: number
    trialEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerSubscriptionAvgAggregateInputType = {
    companyId?: true
  }

  export type CustomerSubscriptionSumAggregateInputType = {
    companyId?: true
  }

  export type CustomerSubscriptionMinAggregateInputType = {
    id?: true
    companyId?: true
    planId?: true
    status?: true
    billingInterval?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    cancellationDetails?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    trialStart?: true
    trialEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerSubscriptionMaxAggregateInputType = {
    id?: true
    companyId?: true
    planId?: true
    status?: true
    billingInterval?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    cancellationDetails?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    trialStart?: true
    trialEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerSubscriptionCountAggregateInputType = {
    id?: true
    companyId?: true
    planId?: true
    status?: true
    billingInterval?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    cancellationDetails?: true
    currentPeriodStart?: true
    currentPeriodEnd?: true
    cancelAtPeriodEnd?: true
    trialStart?: true
    trialEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerSubscription to aggregate.
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSubscriptions to fetch.
     */
    orderBy?: CustomerSubscriptionOrderByWithRelationInput | CustomerSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerSubscriptions
    **/
    _count?: true | CustomerSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerSubscriptionMaxAggregateInputType
  }

  export type GetCustomerSubscriptionAggregateType<T extends CustomerSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerSubscription[P]>
      : GetScalarType<T[P], AggregateCustomerSubscription[P]>
  }




  export type CustomerSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSubscriptionWhereInput
    orderBy?: CustomerSubscriptionOrderByWithAggregationInput | CustomerSubscriptionOrderByWithAggregationInput[]
    by: CustomerSubscriptionScalarFieldEnum[] | CustomerSubscriptionScalarFieldEnum
    having?: CustomerSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerSubscriptionCountAggregateInputType | true
    _avg?: CustomerSubscriptionAvgAggregateInputType
    _sum?: CustomerSubscriptionSumAggregateInputType
    _min?: CustomerSubscriptionMinAggregateInputType
    _max?: CustomerSubscriptionMaxAggregateInputType
  }

  export type CustomerSubscriptionGroupByOutputType = {
    id: string
    companyId: number
    planId: string
    status: $Enums.SubscriptionStatus
    billingInterval: $Enums.BillingInterval
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    cancellationDetails: string | null
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelAtPeriodEnd: boolean
    trialStart: Date | null
    trialEnd: Date | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerSubscriptionCountAggregateOutputType | null
    _avg: CustomerSubscriptionAvgAggregateOutputType | null
    _sum: CustomerSubscriptionSumAggregateOutputType | null
    _min: CustomerSubscriptionMinAggregateOutputType | null
    _max: CustomerSubscriptionMaxAggregateOutputType | null
  }

  type GetCustomerSubscriptionGroupByPayload<T extends CustomerSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    planId?: boolean
    status?: boolean
    billingInterval?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    cancellationDetails?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    usageTracking?: boolean | CustomerSubscription$usageTrackingArgs<ExtArgs>
    _count?: boolean | CustomerSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerSubscription"]>

  export type CustomerSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    planId?: boolean
    status?: boolean
    billingInterval?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    cancellationDetails?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerSubscription"]>

  export type CustomerSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    planId?: boolean
    status?: boolean
    billingInterval?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    cancellationDetails?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerSubscription"]>

  export type CustomerSubscriptionSelectScalar = {
    id?: boolean
    companyId?: boolean
    planId?: boolean
    status?: boolean
    billingInterval?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    cancellationDetails?: boolean
    currentPeriodStart?: boolean
    currentPeriodEnd?: boolean
    cancelAtPeriodEnd?: boolean
    trialStart?: boolean
    trialEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "planId" | "status" | "billingInterval" | "stripeCustomerId" | "stripeSubscriptionId" | "cancellationDetails" | "currentPeriodStart" | "currentPeriodEnd" | "cancelAtPeriodEnd" | "trialStart" | "trialEnd" | "createdAt" | "updatedAt", ExtArgs["result"]["customerSubscription"]>
  export type CustomerSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
    usageTracking?: boolean | CustomerSubscription$usageTrackingArgs<ExtArgs>
    _count?: boolean | CustomerSubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }
  export type CustomerSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    plan?: boolean | SubscriptionPlanDefaultArgs<ExtArgs>
  }

  export type $CustomerSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerSubscription"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      plan: Prisma.$SubscriptionPlanPayload<ExtArgs>
      usageTracking: Prisma.$UsageTrackingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      planId: string
      status: $Enums.SubscriptionStatus
      billingInterval: $Enums.BillingInterval
      stripeCustomerId: string | null
      stripeSubscriptionId: string | null
      cancellationDetails: string | null
      currentPeriodStart: Date | null
      currentPeriodEnd: Date | null
      cancelAtPeriodEnd: boolean
      trialStart: Date | null
      trialEnd: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customerSubscription"]>
    composites: {}
  }

  type CustomerSubscriptionGetPayload<S extends boolean | null | undefined | CustomerSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$CustomerSubscriptionPayload, S>

  type CustomerSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerSubscriptionCountAggregateInputType | true
    }

  export interface CustomerSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerSubscription'], meta: { name: 'CustomerSubscription' } }
    /**
     * Find zero or one CustomerSubscription that matches the filter.
     * @param {CustomerSubscriptionFindUniqueArgs} args - Arguments to find a CustomerSubscription
     * @example
     * // Get one CustomerSubscription
     * const customerSubscription = await prisma.customerSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerSubscriptionFindUniqueArgs>(args: SelectSubset<T, CustomerSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a CustomerSubscription
     * @example
     * // Get one CustomerSubscription
     * const customerSubscription = await prisma.customerSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionFindFirstArgs} args - Arguments to find a CustomerSubscription
     * @example
     * // Get one CustomerSubscription
     * const customerSubscription = await prisma.customerSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerSubscriptionFindFirstArgs>(args?: SelectSubset<T, CustomerSubscriptionFindFirstArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionFindFirstOrThrowArgs} args - Arguments to find a CustomerSubscription
     * @example
     * // Get one CustomerSubscription
     * const customerSubscription = await prisma.customerSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerSubscriptions
     * const customerSubscriptions = await prisma.customerSubscription.findMany()
     * 
     * // Get first 10 CustomerSubscriptions
     * const customerSubscriptions = await prisma.customerSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerSubscriptionWithIdOnly = await prisma.customerSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerSubscriptionFindManyArgs>(args?: SelectSubset<T, CustomerSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerSubscription.
     * @param {CustomerSubscriptionCreateArgs} args - Arguments to create a CustomerSubscription.
     * @example
     * // Create one CustomerSubscription
     * const CustomerSubscription = await prisma.customerSubscription.create({
     *   data: {
     *     // ... data to create a CustomerSubscription
     *   }
     * })
     * 
     */
    create<T extends CustomerSubscriptionCreateArgs>(args: SelectSubset<T, CustomerSubscriptionCreateArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerSubscriptions.
     * @param {CustomerSubscriptionCreateManyArgs} args - Arguments to create many CustomerSubscriptions.
     * @example
     * // Create many CustomerSubscriptions
     * const customerSubscription = await prisma.customerSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerSubscriptionCreateManyArgs>(args?: SelectSubset<T, CustomerSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerSubscriptions and returns the data saved in the database.
     * @param {CustomerSubscriptionCreateManyAndReturnArgs} args - Arguments to create many CustomerSubscriptions.
     * @example
     * // Create many CustomerSubscriptions
     * const customerSubscription = await prisma.customerSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerSubscriptions and only return the `id`
     * const customerSubscriptionWithIdOnly = await prisma.customerSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerSubscription.
     * @param {CustomerSubscriptionDeleteArgs} args - Arguments to delete one CustomerSubscription.
     * @example
     * // Delete one CustomerSubscription
     * const CustomerSubscription = await prisma.customerSubscription.delete({
     *   where: {
     *     // ... filter to delete one CustomerSubscription
     *   }
     * })
     * 
     */
    delete<T extends CustomerSubscriptionDeleteArgs>(args: SelectSubset<T, CustomerSubscriptionDeleteArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerSubscription.
     * @param {CustomerSubscriptionUpdateArgs} args - Arguments to update one CustomerSubscription.
     * @example
     * // Update one CustomerSubscription
     * const customerSubscription = await prisma.customerSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerSubscriptionUpdateArgs>(args: SelectSubset<T, CustomerSubscriptionUpdateArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerSubscriptions.
     * @param {CustomerSubscriptionDeleteManyArgs} args - Arguments to filter CustomerSubscriptions to delete.
     * @example
     * // Delete a few CustomerSubscriptions
     * const { count } = await prisma.customerSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerSubscriptionDeleteManyArgs>(args?: SelectSubset<T, CustomerSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerSubscriptions
     * const customerSubscription = await prisma.customerSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerSubscriptionUpdateManyArgs>(args: SelectSubset<T, CustomerSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerSubscriptions and returns the data updated in the database.
     * @param {CustomerSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many CustomerSubscriptions.
     * @example
     * // Update many CustomerSubscriptions
     * const customerSubscription = await prisma.customerSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerSubscriptions and only return the `id`
     * const customerSubscriptionWithIdOnly = await prisma.customerSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerSubscription.
     * @param {CustomerSubscriptionUpsertArgs} args - Arguments to update or create a CustomerSubscription.
     * @example
     * // Update or create a CustomerSubscription
     * const customerSubscription = await prisma.customerSubscription.upsert({
     *   create: {
     *     // ... data to create a CustomerSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerSubscription we want to update
     *   }
     * })
     */
    upsert<T extends CustomerSubscriptionUpsertArgs>(args: SelectSubset<T, CustomerSubscriptionUpsertArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionCountArgs} args - Arguments to filter CustomerSubscriptions to count.
     * @example
     * // Count the number of CustomerSubscriptions
     * const count = await prisma.customerSubscription.count({
     *   where: {
     *     // ... the filter for the CustomerSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends CustomerSubscriptionCountArgs>(
      args?: Subset<T, CustomerSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerSubscriptionAggregateArgs>(args: Subset<T, CustomerSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetCustomerSubscriptionAggregateType<T>>

    /**
     * Group by CustomerSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: CustomerSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerSubscription model
   */
  readonly fields: CustomerSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    plan<T extends SubscriptionPlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionPlanDefaultArgs<ExtArgs>>): Prisma__SubscriptionPlanClient<$Result.GetResult<Prisma.$SubscriptionPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    usageTracking<T extends CustomerSubscription$usageTrackingArgs<ExtArgs> = {}>(args?: Subset<T, CustomerSubscription$usageTrackingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerSubscription model
   */
  interface CustomerSubscriptionFieldRefs {
    readonly id: FieldRef<"CustomerSubscription", 'String'>
    readonly companyId: FieldRef<"CustomerSubscription", 'Int'>
    readonly planId: FieldRef<"CustomerSubscription", 'String'>
    readonly status: FieldRef<"CustomerSubscription", 'SubscriptionStatus'>
    readonly billingInterval: FieldRef<"CustomerSubscription", 'BillingInterval'>
    readonly stripeCustomerId: FieldRef<"CustomerSubscription", 'String'>
    readonly stripeSubscriptionId: FieldRef<"CustomerSubscription", 'String'>
    readonly cancellationDetails: FieldRef<"CustomerSubscription", 'String'>
    readonly currentPeriodStart: FieldRef<"CustomerSubscription", 'DateTime'>
    readonly currentPeriodEnd: FieldRef<"CustomerSubscription", 'DateTime'>
    readonly cancelAtPeriodEnd: FieldRef<"CustomerSubscription", 'Boolean'>
    readonly trialStart: FieldRef<"CustomerSubscription", 'DateTime'>
    readonly trialEnd: FieldRef<"CustomerSubscription", 'DateTime'>
    readonly createdAt: FieldRef<"CustomerSubscription", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomerSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerSubscription findUnique
   */
  export type CustomerSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSubscription to fetch.
     */
    where: CustomerSubscriptionWhereUniqueInput
  }

  /**
   * CustomerSubscription findUniqueOrThrow
   */
  export type CustomerSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSubscription to fetch.
     */
    where: CustomerSubscriptionWhereUniqueInput
  }

  /**
   * CustomerSubscription findFirst
   */
  export type CustomerSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSubscription to fetch.
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSubscriptions to fetch.
     */
    orderBy?: CustomerSubscriptionOrderByWithRelationInput | CustomerSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerSubscriptions.
     */
    cursor?: CustomerSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerSubscriptions.
     */
    distinct?: CustomerSubscriptionScalarFieldEnum | CustomerSubscriptionScalarFieldEnum[]
  }

  /**
   * CustomerSubscription findFirstOrThrow
   */
  export type CustomerSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSubscription to fetch.
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSubscriptions to fetch.
     */
    orderBy?: CustomerSubscriptionOrderByWithRelationInput | CustomerSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerSubscriptions.
     */
    cursor?: CustomerSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerSubscriptions.
     */
    distinct?: CustomerSubscriptionScalarFieldEnum | CustomerSubscriptionScalarFieldEnum[]
  }

  /**
   * CustomerSubscription findMany
   */
  export type CustomerSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSubscriptions to fetch.
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSubscriptions to fetch.
     */
    orderBy?: CustomerSubscriptionOrderByWithRelationInput | CustomerSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerSubscriptions.
     */
    cursor?: CustomerSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSubscriptions.
     */
    skip?: number
    distinct?: CustomerSubscriptionScalarFieldEnum | CustomerSubscriptionScalarFieldEnum[]
  }

  /**
   * CustomerSubscription create
   */
  export type CustomerSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerSubscription.
     */
    data: XOR<CustomerSubscriptionCreateInput, CustomerSubscriptionUncheckedCreateInput>
  }

  /**
   * CustomerSubscription createMany
   */
  export type CustomerSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerSubscriptions.
     */
    data: CustomerSubscriptionCreateManyInput | CustomerSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerSubscription createManyAndReturn
   */
  export type CustomerSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerSubscriptions.
     */
    data: CustomerSubscriptionCreateManyInput | CustomerSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerSubscription update
   */
  export type CustomerSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerSubscription.
     */
    data: XOR<CustomerSubscriptionUpdateInput, CustomerSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which CustomerSubscription to update.
     */
    where: CustomerSubscriptionWhereUniqueInput
  }

  /**
   * CustomerSubscription updateMany
   */
  export type CustomerSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerSubscriptions.
     */
    data: XOR<CustomerSubscriptionUpdateManyMutationInput, CustomerSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which CustomerSubscriptions to update
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * Limit how many CustomerSubscriptions to update.
     */
    limit?: number
  }

  /**
   * CustomerSubscription updateManyAndReturn
   */
  export type CustomerSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update CustomerSubscriptions.
     */
    data: XOR<CustomerSubscriptionUpdateManyMutationInput, CustomerSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which CustomerSubscriptions to update
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * Limit how many CustomerSubscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerSubscription upsert
   */
  export type CustomerSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerSubscription to update in case it exists.
     */
    where: CustomerSubscriptionWhereUniqueInput
    /**
     * In case the CustomerSubscription found by the `where` argument doesn't exist, create a new CustomerSubscription with this data.
     */
    create: XOR<CustomerSubscriptionCreateInput, CustomerSubscriptionUncheckedCreateInput>
    /**
     * In case the CustomerSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerSubscriptionUpdateInput, CustomerSubscriptionUncheckedUpdateInput>
  }

  /**
   * CustomerSubscription delete
   */
  export type CustomerSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which CustomerSubscription to delete.
     */
    where: CustomerSubscriptionWhereUniqueInput
  }

  /**
   * CustomerSubscription deleteMany
   */
  export type CustomerSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerSubscriptions to delete
     */
    where?: CustomerSubscriptionWhereInput
    /**
     * Limit how many CustomerSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * CustomerSubscription.usageTracking
   */
  export type CustomerSubscription$usageTrackingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    where?: UsageTrackingWhereInput
    orderBy?: UsageTrackingOrderByWithRelationInput | UsageTrackingOrderByWithRelationInput[]
    cursor?: UsageTrackingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsageTrackingScalarFieldEnum | UsageTrackingScalarFieldEnum[]
  }

  /**
   * CustomerSubscription without action
   */
  export type CustomerSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSubscription
     */
    select?: CustomerSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSubscription
     */
    omit?: CustomerSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model UsageTracking
   */

  export type AggregateUsageTracking = {
    _count: UsageTrackingCountAggregateOutputType | null
    _avg: UsageTrackingAvgAggregateOutputType | null
    _sum: UsageTrackingSumAggregateOutputType | null
    _min: UsageTrackingMinAggregateOutputType | null
    _max: UsageTrackingMaxAggregateOutputType | null
  }

  export type UsageTrackingAvgAggregateOutputType = {
    companyId: number | null
    currentUsage: number | null
    limitValue: number | null
  }

  export type UsageTrackingSumAggregateOutputType = {
    companyId: number | null
    currentUsage: number | null
    limitValue: number | null
  }

  export type UsageTrackingMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    subscriptionId: string | null
    metricType: $Enums.UsageMetricType | null
    currentUsage: number | null
    limitValue: number | null
    periodStart: Date | null
    periodEnd: Date | null
    lastResetDate: Date | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type UsageTrackingMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    subscriptionId: string | null
    metricType: $Enums.UsageMetricType | null
    currentUsage: number | null
    limitValue: number | null
    periodStart: Date | null
    periodEnd: Date | null
    lastResetDate: Date | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type UsageTrackingCountAggregateOutputType = {
    id: number
    companyId: number
    subscriptionId: number
    metricType: number
    currentUsage: number
    limitValue: number
    periodStart: number
    periodEnd: number
    lastResetDate: number
    lastUpdated: number
    createdAt: number
    _all: number
  }


  export type UsageTrackingAvgAggregateInputType = {
    companyId?: true
    currentUsage?: true
    limitValue?: true
  }

  export type UsageTrackingSumAggregateInputType = {
    companyId?: true
    currentUsage?: true
    limitValue?: true
  }

  export type UsageTrackingMinAggregateInputType = {
    id?: true
    companyId?: true
    subscriptionId?: true
    metricType?: true
    currentUsage?: true
    limitValue?: true
    periodStart?: true
    periodEnd?: true
    lastResetDate?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type UsageTrackingMaxAggregateInputType = {
    id?: true
    companyId?: true
    subscriptionId?: true
    metricType?: true
    currentUsage?: true
    limitValue?: true
    periodStart?: true
    periodEnd?: true
    lastResetDate?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type UsageTrackingCountAggregateInputType = {
    id?: true
    companyId?: true
    subscriptionId?: true
    metricType?: true
    currentUsage?: true
    limitValue?: true
    periodStart?: true
    periodEnd?: true
    lastResetDate?: true
    lastUpdated?: true
    createdAt?: true
    _all?: true
  }

  export type UsageTrackingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageTracking to aggregate.
     */
    where?: UsageTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageTrackings to fetch.
     */
    orderBy?: UsageTrackingOrderByWithRelationInput | UsageTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsageTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UsageTrackings
    **/
    _count?: true | UsageTrackingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsageTrackingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsageTrackingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsageTrackingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsageTrackingMaxAggregateInputType
  }

  export type GetUsageTrackingAggregateType<T extends UsageTrackingAggregateArgs> = {
        [P in keyof T & keyof AggregateUsageTracking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsageTracking[P]>
      : GetScalarType<T[P], AggregateUsageTracking[P]>
  }




  export type UsageTrackingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsageTrackingWhereInput
    orderBy?: UsageTrackingOrderByWithAggregationInput | UsageTrackingOrderByWithAggregationInput[]
    by: UsageTrackingScalarFieldEnum[] | UsageTrackingScalarFieldEnum
    having?: UsageTrackingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsageTrackingCountAggregateInputType | true
    _avg?: UsageTrackingAvgAggregateInputType
    _sum?: UsageTrackingSumAggregateInputType
    _min?: UsageTrackingMinAggregateInputType
    _max?: UsageTrackingMaxAggregateInputType
  }

  export type UsageTrackingGroupByOutputType = {
    id: string
    companyId: number
    subscriptionId: string
    metricType: $Enums.UsageMetricType
    currentUsage: number
    limitValue: number
    periodStart: Date
    periodEnd: Date
    lastResetDate: Date | null
    lastUpdated: Date
    createdAt: Date
    _count: UsageTrackingCountAggregateOutputType | null
    _avg: UsageTrackingAvgAggregateOutputType | null
    _sum: UsageTrackingSumAggregateOutputType | null
    _min: UsageTrackingMinAggregateOutputType | null
    _max: UsageTrackingMaxAggregateOutputType | null
  }

  type GetUsageTrackingGroupByPayload<T extends UsageTrackingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsageTrackingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsageTrackingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsageTrackingGroupByOutputType[P]>
            : GetScalarType<T[P], UsageTrackingGroupByOutputType[P]>
        }
      >
    >


  export type UsageTrackingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    subscriptionId?: boolean
    metricType?: boolean
    currentUsage?: boolean
    limitValue?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    lastResetDate?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    subscription?: boolean | CustomerSubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageTracking"]>

  export type UsageTrackingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    subscriptionId?: boolean
    metricType?: boolean
    currentUsage?: boolean
    limitValue?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    lastResetDate?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    subscription?: boolean | CustomerSubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageTracking"]>

  export type UsageTrackingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    subscriptionId?: boolean
    metricType?: boolean
    currentUsage?: boolean
    limitValue?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    lastResetDate?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    subscription?: boolean | CustomerSubscriptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usageTracking"]>

  export type UsageTrackingSelectScalar = {
    id?: boolean
    companyId?: boolean
    subscriptionId?: boolean
    metricType?: boolean
    currentUsage?: boolean
    limitValue?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    lastResetDate?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
  }

  export type UsageTrackingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "subscriptionId" | "metricType" | "currentUsage" | "limitValue" | "periodStart" | "periodEnd" | "lastResetDate" | "lastUpdated" | "createdAt", ExtArgs["result"]["usageTracking"]>
  export type UsageTrackingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    subscription?: boolean | CustomerSubscriptionDefaultArgs<ExtArgs>
  }
  export type UsageTrackingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    subscription?: boolean | CustomerSubscriptionDefaultArgs<ExtArgs>
  }
  export type UsageTrackingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    subscription?: boolean | CustomerSubscriptionDefaultArgs<ExtArgs>
  }

  export type $UsageTrackingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UsageTracking"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      subscription: Prisma.$CustomerSubscriptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      subscriptionId: string
      metricType: $Enums.UsageMetricType
      currentUsage: number
      limitValue: number
      periodStart: Date
      periodEnd: Date
      lastResetDate: Date | null
      lastUpdated: Date
      createdAt: Date
    }, ExtArgs["result"]["usageTracking"]>
    composites: {}
  }

  type UsageTrackingGetPayload<S extends boolean | null | undefined | UsageTrackingDefaultArgs> = $Result.GetResult<Prisma.$UsageTrackingPayload, S>

  type UsageTrackingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsageTrackingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsageTrackingCountAggregateInputType | true
    }

  export interface UsageTrackingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UsageTracking'], meta: { name: 'UsageTracking' } }
    /**
     * Find zero or one UsageTracking that matches the filter.
     * @param {UsageTrackingFindUniqueArgs} args - Arguments to find a UsageTracking
     * @example
     * // Get one UsageTracking
     * const usageTracking = await prisma.usageTracking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsageTrackingFindUniqueArgs>(args: SelectSubset<T, UsageTrackingFindUniqueArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UsageTracking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsageTrackingFindUniqueOrThrowArgs} args - Arguments to find a UsageTracking
     * @example
     * // Get one UsageTracking
     * const usageTracking = await prisma.usageTracking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsageTrackingFindUniqueOrThrowArgs>(args: SelectSubset<T, UsageTrackingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageTracking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingFindFirstArgs} args - Arguments to find a UsageTracking
     * @example
     * // Get one UsageTracking
     * const usageTracking = await prisma.usageTracking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsageTrackingFindFirstArgs>(args?: SelectSubset<T, UsageTrackingFindFirstArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UsageTracking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingFindFirstOrThrowArgs} args - Arguments to find a UsageTracking
     * @example
     * // Get one UsageTracking
     * const usageTracking = await prisma.usageTracking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsageTrackingFindFirstOrThrowArgs>(args?: SelectSubset<T, UsageTrackingFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UsageTrackings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UsageTrackings
     * const usageTrackings = await prisma.usageTracking.findMany()
     * 
     * // Get first 10 UsageTrackings
     * const usageTrackings = await prisma.usageTracking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usageTrackingWithIdOnly = await prisma.usageTracking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsageTrackingFindManyArgs>(args?: SelectSubset<T, UsageTrackingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UsageTracking.
     * @param {UsageTrackingCreateArgs} args - Arguments to create a UsageTracking.
     * @example
     * // Create one UsageTracking
     * const UsageTracking = await prisma.usageTracking.create({
     *   data: {
     *     // ... data to create a UsageTracking
     *   }
     * })
     * 
     */
    create<T extends UsageTrackingCreateArgs>(args: SelectSubset<T, UsageTrackingCreateArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UsageTrackings.
     * @param {UsageTrackingCreateManyArgs} args - Arguments to create many UsageTrackings.
     * @example
     * // Create many UsageTrackings
     * const usageTracking = await prisma.usageTracking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsageTrackingCreateManyArgs>(args?: SelectSubset<T, UsageTrackingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UsageTrackings and returns the data saved in the database.
     * @param {UsageTrackingCreateManyAndReturnArgs} args - Arguments to create many UsageTrackings.
     * @example
     * // Create many UsageTrackings
     * const usageTracking = await prisma.usageTracking.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UsageTrackings and only return the `id`
     * const usageTrackingWithIdOnly = await prisma.usageTracking.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsageTrackingCreateManyAndReturnArgs>(args?: SelectSubset<T, UsageTrackingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UsageTracking.
     * @param {UsageTrackingDeleteArgs} args - Arguments to delete one UsageTracking.
     * @example
     * // Delete one UsageTracking
     * const UsageTracking = await prisma.usageTracking.delete({
     *   where: {
     *     // ... filter to delete one UsageTracking
     *   }
     * })
     * 
     */
    delete<T extends UsageTrackingDeleteArgs>(args: SelectSubset<T, UsageTrackingDeleteArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UsageTracking.
     * @param {UsageTrackingUpdateArgs} args - Arguments to update one UsageTracking.
     * @example
     * // Update one UsageTracking
     * const usageTracking = await prisma.usageTracking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsageTrackingUpdateArgs>(args: SelectSubset<T, UsageTrackingUpdateArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UsageTrackings.
     * @param {UsageTrackingDeleteManyArgs} args - Arguments to filter UsageTrackings to delete.
     * @example
     * // Delete a few UsageTrackings
     * const { count } = await prisma.usageTracking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsageTrackingDeleteManyArgs>(args?: SelectSubset<T, UsageTrackingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageTrackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UsageTrackings
     * const usageTracking = await prisma.usageTracking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsageTrackingUpdateManyArgs>(args: SelectSubset<T, UsageTrackingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UsageTrackings and returns the data updated in the database.
     * @param {UsageTrackingUpdateManyAndReturnArgs} args - Arguments to update many UsageTrackings.
     * @example
     * // Update many UsageTrackings
     * const usageTracking = await prisma.usageTracking.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UsageTrackings and only return the `id`
     * const usageTrackingWithIdOnly = await prisma.usageTracking.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsageTrackingUpdateManyAndReturnArgs>(args: SelectSubset<T, UsageTrackingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UsageTracking.
     * @param {UsageTrackingUpsertArgs} args - Arguments to update or create a UsageTracking.
     * @example
     * // Update or create a UsageTracking
     * const usageTracking = await prisma.usageTracking.upsert({
     *   create: {
     *     // ... data to create a UsageTracking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UsageTracking we want to update
     *   }
     * })
     */
    upsert<T extends UsageTrackingUpsertArgs>(args: SelectSubset<T, UsageTrackingUpsertArgs<ExtArgs>>): Prisma__UsageTrackingClient<$Result.GetResult<Prisma.$UsageTrackingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UsageTrackings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingCountArgs} args - Arguments to filter UsageTrackings to count.
     * @example
     * // Count the number of UsageTrackings
     * const count = await prisma.usageTracking.count({
     *   where: {
     *     // ... the filter for the UsageTrackings we want to count
     *   }
     * })
    **/
    count<T extends UsageTrackingCountArgs>(
      args?: Subset<T, UsageTrackingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsageTrackingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UsageTracking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsageTrackingAggregateArgs>(args: Subset<T, UsageTrackingAggregateArgs>): Prisma.PrismaPromise<GetUsageTrackingAggregateType<T>>

    /**
     * Group by UsageTracking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsageTrackingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsageTrackingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsageTrackingGroupByArgs['orderBy'] }
        : { orderBy?: UsageTrackingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsageTrackingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsageTrackingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UsageTracking model
   */
  readonly fields: UsageTrackingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UsageTracking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsageTrackingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscription<T extends CustomerSubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerSubscriptionDefaultArgs<ExtArgs>>): Prisma__CustomerSubscriptionClient<$Result.GetResult<Prisma.$CustomerSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UsageTracking model
   */
  interface UsageTrackingFieldRefs {
    readonly id: FieldRef<"UsageTracking", 'String'>
    readonly companyId: FieldRef<"UsageTracking", 'Int'>
    readonly subscriptionId: FieldRef<"UsageTracking", 'String'>
    readonly metricType: FieldRef<"UsageTracking", 'UsageMetricType'>
    readonly currentUsage: FieldRef<"UsageTracking", 'Int'>
    readonly limitValue: FieldRef<"UsageTracking", 'Int'>
    readonly periodStart: FieldRef<"UsageTracking", 'DateTime'>
    readonly periodEnd: FieldRef<"UsageTracking", 'DateTime'>
    readonly lastResetDate: FieldRef<"UsageTracking", 'DateTime'>
    readonly lastUpdated: FieldRef<"UsageTracking", 'DateTime'>
    readonly createdAt: FieldRef<"UsageTracking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UsageTracking findUnique
   */
  export type UsageTrackingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * Filter, which UsageTracking to fetch.
     */
    where: UsageTrackingWhereUniqueInput
  }

  /**
   * UsageTracking findUniqueOrThrow
   */
  export type UsageTrackingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * Filter, which UsageTracking to fetch.
     */
    where: UsageTrackingWhereUniqueInput
  }

  /**
   * UsageTracking findFirst
   */
  export type UsageTrackingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * Filter, which UsageTracking to fetch.
     */
    where?: UsageTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageTrackings to fetch.
     */
    orderBy?: UsageTrackingOrderByWithRelationInput | UsageTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageTrackings.
     */
    cursor?: UsageTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageTrackings.
     */
    distinct?: UsageTrackingScalarFieldEnum | UsageTrackingScalarFieldEnum[]
  }

  /**
   * UsageTracking findFirstOrThrow
   */
  export type UsageTrackingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * Filter, which UsageTracking to fetch.
     */
    where?: UsageTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageTrackings to fetch.
     */
    orderBy?: UsageTrackingOrderByWithRelationInput | UsageTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UsageTrackings.
     */
    cursor?: UsageTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageTrackings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UsageTrackings.
     */
    distinct?: UsageTrackingScalarFieldEnum | UsageTrackingScalarFieldEnum[]
  }

  /**
   * UsageTracking findMany
   */
  export type UsageTrackingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * Filter, which UsageTrackings to fetch.
     */
    where?: UsageTrackingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UsageTrackings to fetch.
     */
    orderBy?: UsageTrackingOrderByWithRelationInput | UsageTrackingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UsageTrackings.
     */
    cursor?: UsageTrackingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UsageTrackings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UsageTrackings.
     */
    skip?: number
    distinct?: UsageTrackingScalarFieldEnum | UsageTrackingScalarFieldEnum[]
  }

  /**
   * UsageTracking create
   */
  export type UsageTrackingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * The data needed to create a UsageTracking.
     */
    data: XOR<UsageTrackingCreateInput, UsageTrackingUncheckedCreateInput>
  }

  /**
   * UsageTracking createMany
   */
  export type UsageTrackingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UsageTrackings.
     */
    data: UsageTrackingCreateManyInput | UsageTrackingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UsageTracking createManyAndReturn
   */
  export type UsageTrackingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * The data used to create many UsageTrackings.
     */
    data: UsageTrackingCreateManyInput | UsageTrackingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageTracking update
   */
  export type UsageTrackingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * The data needed to update a UsageTracking.
     */
    data: XOR<UsageTrackingUpdateInput, UsageTrackingUncheckedUpdateInput>
    /**
     * Choose, which UsageTracking to update.
     */
    where: UsageTrackingWhereUniqueInput
  }

  /**
   * UsageTracking updateMany
   */
  export type UsageTrackingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UsageTrackings.
     */
    data: XOR<UsageTrackingUpdateManyMutationInput, UsageTrackingUncheckedUpdateManyInput>
    /**
     * Filter which UsageTrackings to update
     */
    where?: UsageTrackingWhereInput
    /**
     * Limit how many UsageTrackings to update.
     */
    limit?: number
  }

  /**
   * UsageTracking updateManyAndReturn
   */
  export type UsageTrackingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * The data used to update UsageTrackings.
     */
    data: XOR<UsageTrackingUpdateManyMutationInput, UsageTrackingUncheckedUpdateManyInput>
    /**
     * Filter which UsageTrackings to update
     */
    where?: UsageTrackingWhereInput
    /**
     * Limit how many UsageTrackings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UsageTracking upsert
   */
  export type UsageTrackingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * The filter to search for the UsageTracking to update in case it exists.
     */
    where: UsageTrackingWhereUniqueInput
    /**
     * In case the UsageTracking found by the `where` argument doesn't exist, create a new UsageTracking with this data.
     */
    create: XOR<UsageTrackingCreateInput, UsageTrackingUncheckedCreateInput>
    /**
     * In case the UsageTracking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsageTrackingUpdateInput, UsageTrackingUncheckedUpdateInput>
  }

  /**
   * UsageTracking delete
   */
  export type UsageTrackingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
    /**
     * Filter which UsageTracking to delete.
     */
    where: UsageTrackingWhereUniqueInput
  }

  /**
   * UsageTracking deleteMany
   */
  export type UsageTrackingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UsageTrackings to delete
     */
    where?: UsageTrackingWhereInput
    /**
     * Limit how many UsageTrackings to delete.
     */
    limit?: number
  }

  /**
   * UsageTracking without action
   */
  export type UsageTrackingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsageTracking
     */
    select?: UsageTrackingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UsageTracking
     */
    omit?: UsageTrackingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsageTrackingInclude<ExtArgs> | null
  }


  /**
   * Model CompanySettings
   */

  export type AggregateCompanySettings = {
    _count: CompanySettingsCountAggregateOutputType | null
    _avg: CompanySettingsAvgAggregateOutputType | null
    _sum: CompanySettingsSumAggregateOutputType | null
    _min: CompanySettingsMinAggregateOutputType | null
    _max: CompanySettingsMaxAggregateOutputType | null
  }

  export type CompanySettingsAvgAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type CompanySettingsSumAggregateOutputType = {
    id: number | null
    companyId: number | null
  }

  export type CompanySettingsMinAggregateOutputType = {
    id: number | null
    companyId: number | null
    emailNotifications: boolean | null
    newMessageAlerts: boolean | null
    dailyReports: boolean | null
    autoReply: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanySettingsMaxAggregateOutputType = {
    id: number | null
    companyId: number | null
    emailNotifications: boolean | null
    newMessageAlerts: boolean | null
    dailyReports: boolean | null
    autoReply: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanySettingsCountAggregateOutputType = {
    id: number
    companyId: number
    emailNotifications: number
    newMessageAlerts: number
    dailyReports: number
    autoReply: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanySettingsAvgAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type CompanySettingsSumAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type CompanySettingsMinAggregateInputType = {
    id?: true
    companyId?: true
    emailNotifications?: true
    newMessageAlerts?: true
    dailyReports?: true
    autoReply?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanySettingsMaxAggregateInputType = {
    id?: true
    companyId?: true
    emailNotifications?: true
    newMessageAlerts?: true
    dailyReports?: true
    autoReply?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanySettingsCountAggregateInputType = {
    id?: true
    companyId?: true
    emailNotifications?: true
    newMessageAlerts?: true
    dailyReports?: true
    autoReply?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanySettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanySettings to aggregate.
     */
    where?: CompanySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingsOrderByWithRelationInput | CompanySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanySettings
    **/
    _count?: true | CompanySettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanySettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanySettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanySettingsMaxAggregateInputType
  }

  export type GetCompanySettingsAggregateType<T extends CompanySettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanySettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanySettings[P]>
      : GetScalarType<T[P], AggregateCompanySettings[P]>
  }




  export type CompanySettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanySettingsWhereInput
    orderBy?: CompanySettingsOrderByWithAggregationInput | CompanySettingsOrderByWithAggregationInput[]
    by: CompanySettingsScalarFieldEnum[] | CompanySettingsScalarFieldEnum
    having?: CompanySettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanySettingsCountAggregateInputType | true
    _avg?: CompanySettingsAvgAggregateInputType
    _sum?: CompanySettingsSumAggregateInputType
    _min?: CompanySettingsMinAggregateInputType
    _max?: CompanySettingsMaxAggregateInputType
  }

  export type CompanySettingsGroupByOutputType = {
    id: number
    companyId: number
    emailNotifications: boolean
    newMessageAlerts: boolean
    dailyReports: boolean
    autoReply: boolean
    createdAt: Date
    updatedAt: Date
    _count: CompanySettingsCountAggregateOutputType | null
    _avg: CompanySettingsAvgAggregateOutputType | null
    _sum: CompanySettingsSumAggregateOutputType | null
    _min: CompanySettingsMinAggregateOutputType | null
    _max: CompanySettingsMaxAggregateOutputType | null
  }

  type GetCompanySettingsGroupByPayload<T extends CompanySettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanySettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanySettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanySettingsGroupByOutputType[P]>
            : GetScalarType<T[P], CompanySettingsGroupByOutputType[P]>
        }
      >
    >


  export type CompanySettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companySettings"]>

  export type CompanySettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companySettings"]>

  export type CompanySettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companySettings"]>

  export type CompanySettingsSelectScalar = {
    id?: boolean
    companyId?: boolean
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanySettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "emailNotifications" | "newMessageAlerts" | "dailyReports" | "autoReply" | "createdAt" | "updatedAt", ExtArgs["result"]["companySettings"]>
  export type CompanySettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanySettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanySettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CompanySettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanySettings"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyId: number
      emailNotifications: boolean
      newMessageAlerts: boolean
      dailyReports: boolean
      autoReply: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companySettings"]>
    composites: {}
  }

  type CompanySettingsGetPayload<S extends boolean | null | undefined | CompanySettingsDefaultArgs> = $Result.GetResult<Prisma.$CompanySettingsPayload, S>

  type CompanySettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanySettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanySettingsCountAggregateInputType | true
    }

  export interface CompanySettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanySettings'], meta: { name: 'CompanySettings' } }
    /**
     * Find zero or one CompanySettings that matches the filter.
     * @param {CompanySettingsFindUniqueArgs} args - Arguments to find a CompanySettings
     * @example
     * // Get one CompanySettings
     * const companySettings = await prisma.companySettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanySettingsFindUniqueArgs>(args: SelectSubset<T, CompanySettingsFindUniqueArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanySettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanySettingsFindUniqueOrThrowArgs} args - Arguments to find a CompanySettings
     * @example
     * // Get one CompanySettings
     * const companySettings = await prisma.companySettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanySettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanySettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanySettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsFindFirstArgs} args - Arguments to find a CompanySettings
     * @example
     * // Get one CompanySettings
     * const companySettings = await prisma.companySettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanySettingsFindFirstArgs>(args?: SelectSubset<T, CompanySettingsFindFirstArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanySettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsFindFirstOrThrowArgs} args - Arguments to find a CompanySettings
     * @example
     * // Get one CompanySettings
     * const companySettings = await prisma.companySettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanySettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanySettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanySettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanySettings
     * const companySettings = await prisma.companySettings.findMany()
     * 
     * // Get first 10 CompanySettings
     * const companySettings = await prisma.companySettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companySettingsWithIdOnly = await prisma.companySettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanySettingsFindManyArgs>(args?: SelectSubset<T, CompanySettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanySettings.
     * @param {CompanySettingsCreateArgs} args - Arguments to create a CompanySettings.
     * @example
     * // Create one CompanySettings
     * const CompanySettings = await prisma.companySettings.create({
     *   data: {
     *     // ... data to create a CompanySettings
     *   }
     * })
     * 
     */
    create<T extends CompanySettingsCreateArgs>(args: SelectSubset<T, CompanySettingsCreateArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanySettings.
     * @param {CompanySettingsCreateManyArgs} args - Arguments to create many CompanySettings.
     * @example
     * // Create many CompanySettings
     * const companySettings = await prisma.companySettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanySettingsCreateManyArgs>(args?: SelectSubset<T, CompanySettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanySettings and returns the data saved in the database.
     * @param {CompanySettingsCreateManyAndReturnArgs} args - Arguments to create many CompanySettings.
     * @example
     * // Create many CompanySettings
     * const companySettings = await prisma.companySettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanySettings and only return the `id`
     * const companySettingsWithIdOnly = await prisma.companySettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanySettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanySettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanySettings.
     * @param {CompanySettingsDeleteArgs} args - Arguments to delete one CompanySettings.
     * @example
     * // Delete one CompanySettings
     * const CompanySettings = await prisma.companySettings.delete({
     *   where: {
     *     // ... filter to delete one CompanySettings
     *   }
     * })
     * 
     */
    delete<T extends CompanySettingsDeleteArgs>(args: SelectSubset<T, CompanySettingsDeleteArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanySettings.
     * @param {CompanySettingsUpdateArgs} args - Arguments to update one CompanySettings.
     * @example
     * // Update one CompanySettings
     * const companySettings = await prisma.companySettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanySettingsUpdateArgs>(args: SelectSubset<T, CompanySettingsUpdateArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanySettings.
     * @param {CompanySettingsDeleteManyArgs} args - Arguments to filter CompanySettings to delete.
     * @example
     * // Delete a few CompanySettings
     * const { count } = await prisma.companySettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanySettingsDeleteManyArgs>(args?: SelectSubset<T, CompanySettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanySettings
     * const companySettings = await prisma.companySettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanySettingsUpdateManyArgs>(args: SelectSubset<T, CompanySettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanySettings and returns the data updated in the database.
     * @param {CompanySettingsUpdateManyAndReturnArgs} args - Arguments to update many CompanySettings.
     * @example
     * // Update many CompanySettings
     * const companySettings = await prisma.companySettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanySettings and only return the `id`
     * const companySettingsWithIdOnly = await prisma.companySettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanySettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanySettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanySettings.
     * @param {CompanySettingsUpsertArgs} args - Arguments to update or create a CompanySettings.
     * @example
     * // Update or create a CompanySettings
     * const companySettings = await prisma.companySettings.upsert({
     *   create: {
     *     // ... data to create a CompanySettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanySettings we want to update
     *   }
     * })
     */
    upsert<T extends CompanySettingsUpsertArgs>(args: SelectSubset<T, CompanySettingsUpsertArgs<ExtArgs>>): Prisma__CompanySettingsClient<$Result.GetResult<Prisma.$CompanySettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsCountArgs} args - Arguments to filter CompanySettings to count.
     * @example
     * // Count the number of CompanySettings
     * const count = await prisma.companySettings.count({
     *   where: {
     *     // ... the filter for the CompanySettings we want to count
     *   }
     * })
    **/
    count<T extends CompanySettingsCountArgs>(
      args?: Subset<T, CompanySettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanySettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanySettingsAggregateArgs>(args: Subset<T, CompanySettingsAggregateArgs>): Prisma.PrismaPromise<GetCompanySettingsAggregateType<T>>

    /**
     * Group by CompanySettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanySettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanySettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanySettingsGroupByArgs['orderBy'] }
        : { orderBy?: CompanySettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanySettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanySettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanySettings model
   */
  readonly fields: CompanySettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanySettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanySettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanySettings model
   */
  interface CompanySettingsFieldRefs {
    readonly id: FieldRef<"CompanySettings", 'Int'>
    readonly companyId: FieldRef<"CompanySettings", 'Int'>
    readonly emailNotifications: FieldRef<"CompanySettings", 'Boolean'>
    readonly newMessageAlerts: FieldRef<"CompanySettings", 'Boolean'>
    readonly dailyReports: FieldRef<"CompanySettings", 'Boolean'>
    readonly autoReply: FieldRef<"CompanySettings", 'Boolean'>
    readonly createdAt: FieldRef<"CompanySettings", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanySettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanySettings findUnique
   */
  export type CompanySettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * Filter, which CompanySettings to fetch.
     */
    where: CompanySettingsWhereUniqueInput
  }

  /**
   * CompanySettings findUniqueOrThrow
   */
  export type CompanySettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * Filter, which CompanySettings to fetch.
     */
    where: CompanySettingsWhereUniqueInput
  }

  /**
   * CompanySettings findFirst
   */
  export type CompanySettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * Filter, which CompanySettings to fetch.
     */
    where?: CompanySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingsOrderByWithRelationInput | CompanySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanySettings.
     */
    cursor?: CompanySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanySettings.
     */
    distinct?: CompanySettingsScalarFieldEnum | CompanySettingsScalarFieldEnum[]
  }

  /**
   * CompanySettings findFirstOrThrow
   */
  export type CompanySettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * Filter, which CompanySettings to fetch.
     */
    where?: CompanySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingsOrderByWithRelationInput | CompanySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanySettings.
     */
    cursor?: CompanySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanySettings.
     */
    distinct?: CompanySettingsScalarFieldEnum | CompanySettingsScalarFieldEnum[]
  }

  /**
   * CompanySettings findMany
   */
  export type CompanySettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * Filter, which CompanySettings to fetch.
     */
    where?: CompanySettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanySettings to fetch.
     */
    orderBy?: CompanySettingsOrderByWithRelationInput | CompanySettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanySettings.
     */
    cursor?: CompanySettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanySettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanySettings.
     */
    skip?: number
    distinct?: CompanySettingsScalarFieldEnum | CompanySettingsScalarFieldEnum[]
  }

  /**
   * CompanySettings create
   */
  export type CompanySettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanySettings.
     */
    data: XOR<CompanySettingsCreateInput, CompanySettingsUncheckedCreateInput>
  }

  /**
   * CompanySettings createMany
   */
  export type CompanySettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanySettings.
     */
    data: CompanySettingsCreateManyInput | CompanySettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanySettings createManyAndReturn
   */
  export type CompanySettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * The data used to create many CompanySettings.
     */
    data: CompanySettingsCreateManyInput | CompanySettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanySettings update
   */
  export type CompanySettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanySettings.
     */
    data: XOR<CompanySettingsUpdateInput, CompanySettingsUncheckedUpdateInput>
    /**
     * Choose, which CompanySettings to update.
     */
    where: CompanySettingsWhereUniqueInput
  }

  /**
   * CompanySettings updateMany
   */
  export type CompanySettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanySettings.
     */
    data: XOR<CompanySettingsUpdateManyMutationInput, CompanySettingsUncheckedUpdateManyInput>
    /**
     * Filter which CompanySettings to update
     */
    where?: CompanySettingsWhereInput
    /**
     * Limit how many CompanySettings to update.
     */
    limit?: number
  }

  /**
   * CompanySettings updateManyAndReturn
   */
  export type CompanySettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * The data used to update CompanySettings.
     */
    data: XOR<CompanySettingsUpdateManyMutationInput, CompanySettingsUncheckedUpdateManyInput>
    /**
     * Filter which CompanySettings to update
     */
    where?: CompanySettingsWhereInput
    /**
     * Limit how many CompanySettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanySettings upsert
   */
  export type CompanySettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanySettings to update in case it exists.
     */
    where: CompanySettingsWhereUniqueInput
    /**
     * In case the CompanySettings found by the `where` argument doesn't exist, create a new CompanySettings with this data.
     */
    create: XOR<CompanySettingsCreateInput, CompanySettingsUncheckedCreateInput>
    /**
     * In case the CompanySettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanySettingsUpdateInput, CompanySettingsUncheckedUpdateInput>
  }

  /**
   * CompanySettings delete
   */
  export type CompanySettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
    /**
     * Filter which CompanySettings to delete.
     */
    where: CompanySettingsWhereUniqueInput
  }

  /**
   * CompanySettings deleteMany
   */
  export type CompanySettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanySettings to delete
     */
    where?: CompanySettingsWhereInput
    /**
     * Limit how many CompanySettings to delete.
     */
    limit?: number
  }

  /**
   * CompanySettings without action
   */
  export type CompanySettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanySettings
     */
    select?: CompanySettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanySettings
     */
    omit?: CompanySettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanySettingsInclude<ExtArgs> | null
  }


  /**
   * Model CompanyWhatsappNumber
   */

  export type AggregateCompanyWhatsappNumber = {
    _count: CompanyWhatsappNumberCountAggregateOutputType | null
    _avg: CompanyWhatsappNumberAvgAggregateOutputType | null
    _sum: CompanyWhatsappNumberSumAggregateOutputType | null
    _min: CompanyWhatsappNumberMinAggregateOutputType | null
    _max: CompanyWhatsappNumberMaxAggregateOutputType | null
  }

  export type CompanyWhatsappNumberAvgAggregateOutputType = {
    companyId: number | null
    messagesThisMonth: number | null
  }

  export type CompanyWhatsappNumberSumAggregateOutputType = {
    companyId: number | null
    messagesThisMonth: number | null
  }

  export type CompanyWhatsappNumberMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    displayName: string | null
    phoneNumber: string | null
    isConnected: boolean | null
    messagesThisMonth: number | null
    lastSyncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyWhatsappNumberMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    displayName: string | null
    phoneNumber: string | null
    isConnected: boolean | null
    messagesThisMonth: number | null
    lastSyncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyWhatsappNumberCountAggregateOutputType = {
    id: number
    companyId: number
    displayName: number
    phoneNumber: number
    isConnected: number
    messagesThisMonth: number
    lastSyncedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyWhatsappNumberAvgAggregateInputType = {
    companyId?: true
    messagesThisMonth?: true
  }

  export type CompanyWhatsappNumberSumAggregateInputType = {
    companyId?: true
    messagesThisMonth?: true
  }

  export type CompanyWhatsappNumberMinAggregateInputType = {
    id?: true
    companyId?: true
    displayName?: true
    phoneNumber?: true
    isConnected?: true
    messagesThisMonth?: true
    lastSyncedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyWhatsappNumberMaxAggregateInputType = {
    id?: true
    companyId?: true
    displayName?: true
    phoneNumber?: true
    isConnected?: true
    messagesThisMonth?: true
    lastSyncedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyWhatsappNumberCountAggregateInputType = {
    id?: true
    companyId?: true
    displayName?: true
    phoneNumber?: true
    isConnected?: true
    messagesThisMonth?: true
    lastSyncedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyWhatsappNumberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyWhatsappNumber to aggregate.
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyWhatsappNumbers to fetch.
     */
    orderBy?: CompanyWhatsappNumberOrderByWithRelationInput | CompanyWhatsappNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhatsappNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyWhatsappNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyWhatsappNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyWhatsappNumbers
    **/
    _count?: true | CompanyWhatsappNumberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyWhatsappNumberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyWhatsappNumberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyWhatsappNumberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyWhatsappNumberMaxAggregateInputType
  }

  export type GetCompanyWhatsappNumberAggregateType<T extends CompanyWhatsappNumberAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyWhatsappNumber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyWhatsappNumber[P]>
      : GetScalarType<T[P], AggregateCompanyWhatsappNumber[P]>
  }




  export type CompanyWhatsappNumberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhatsappNumberWhereInput
    orderBy?: CompanyWhatsappNumberOrderByWithAggregationInput | CompanyWhatsappNumberOrderByWithAggregationInput[]
    by: CompanyWhatsappNumberScalarFieldEnum[] | CompanyWhatsappNumberScalarFieldEnum
    having?: CompanyWhatsappNumberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyWhatsappNumberCountAggregateInputType | true
    _avg?: CompanyWhatsappNumberAvgAggregateInputType
    _sum?: CompanyWhatsappNumberSumAggregateInputType
    _min?: CompanyWhatsappNumberMinAggregateInputType
    _max?: CompanyWhatsappNumberMaxAggregateInputType
  }

  export type CompanyWhatsappNumberGroupByOutputType = {
    id: string
    companyId: number
    displayName: string
    phoneNumber: string
    isConnected: boolean
    messagesThisMonth: number
    lastSyncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: CompanyWhatsappNumberCountAggregateOutputType | null
    _avg: CompanyWhatsappNumberAvgAggregateOutputType | null
    _sum: CompanyWhatsappNumberSumAggregateOutputType | null
    _min: CompanyWhatsappNumberMinAggregateOutputType | null
    _max: CompanyWhatsappNumberMaxAggregateOutputType | null
  }

  type GetCompanyWhatsappNumberGroupByPayload<T extends CompanyWhatsappNumberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyWhatsappNumberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyWhatsappNumberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyWhatsappNumberGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyWhatsappNumberGroupByOutputType[P]>
        }
      >
    >


  export type CompanyWhatsappNumberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    displayName?: boolean
    phoneNumber?: boolean
    isConnected?: boolean
    messagesThisMonth?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyWhatsappNumber"]>

  export type CompanyWhatsappNumberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    displayName?: boolean
    phoneNumber?: boolean
    isConnected?: boolean
    messagesThisMonth?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyWhatsappNumber"]>

  export type CompanyWhatsappNumberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    displayName?: boolean
    phoneNumber?: boolean
    isConnected?: boolean
    messagesThisMonth?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyWhatsappNumber"]>

  export type CompanyWhatsappNumberSelectScalar = {
    id?: boolean
    companyId?: boolean
    displayName?: boolean
    phoneNumber?: boolean
    isConnected?: boolean
    messagesThisMonth?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyWhatsappNumberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "displayName" | "phoneNumber" | "isConnected" | "messagesThisMonth" | "lastSyncedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["companyWhatsappNumber"]>
  export type CompanyWhatsappNumberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanyWhatsappNumberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CompanyWhatsappNumberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CompanyWhatsappNumberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyWhatsappNumber"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      displayName: string
      phoneNumber: string
      isConnected: boolean
      messagesThisMonth: number
      lastSyncedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companyWhatsappNumber"]>
    composites: {}
  }

  type CompanyWhatsappNumberGetPayload<S extends boolean | null | undefined | CompanyWhatsappNumberDefaultArgs> = $Result.GetResult<Prisma.$CompanyWhatsappNumberPayload, S>

  type CompanyWhatsappNumberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyWhatsappNumberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyWhatsappNumberCountAggregateInputType | true
    }

  export interface CompanyWhatsappNumberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyWhatsappNumber'], meta: { name: 'CompanyWhatsappNumber' } }
    /**
     * Find zero or one CompanyWhatsappNumber that matches the filter.
     * @param {CompanyWhatsappNumberFindUniqueArgs} args - Arguments to find a CompanyWhatsappNumber
     * @example
     * // Get one CompanyWhatsappNumber
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyWhatsappNumberFindUniqueArgs>(args: SelectSubset<T, CompanyWhatsappNumberFindUniqueArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyWhatsappNumber that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyWhatsappNumberFindUniqueOrThrowArgs} args - Arguments to find a CompanyWhatsappNumber
     * @example
     * // Get one CompanyWhatsappNumber
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyWhatsappNumberFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyWhatsappNumberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyWhatsappNumber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberFindFirstArgs} args - Arguments to find a CompanyWhatsappNumber
     * @example
     * // Get one CompanyWhatsappNumber
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyWhatsappNumberFindFirstArgs>(args?: SelectSubset<T, CompanyWhatsappNumberFindFirstArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyWhatsappNumber that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberFindFirstOrThrowArgs} args - Arguments to find a CompanyWhatsappNumber
     * @example
     * // Get one CompanyWhatsappNumber
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyWhatsappNumberFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyWhatsappNumberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyWhatsappNumbers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyWhatsappNumbers
     * const companyWhatsappNumbers = await prisma.companyWhatsappNumber.findMany()
     * 
     * // Get first 10 CompanyWhatsappNumbers
     * const companyWhatsappNumbers = await prisma.companyWhatsappNumber.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWhatsappNumberWithIdOnly = await prisma.companyWhatsappNumber.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyWhatsappNumberFindManyArgs>(args?: SelectSubset<T, CompanyWhatsappNumberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyWhatsappNumber.
     * @param {CompanyWhatsappNumberCreateArgs} args - Arguments to create a CompanyWhatsappNumber.
     * @example
     * // Create one CompanyWhatsappNumber
     * const CompanyWhatsappNumber = await prisma.companyWhatsappNumber.create({
     *   data: {
     *     // ... data to create a CompanyWhatsappNumber
     *   }
     * })
     * 
     */
    create<T extends CompanyWhatsappNumberCreateArgs>(args: SelectSubset<T, CompanyWhatsappNumberCreateArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyWhatsappNumbers.
     * @param {CompanyWhatsappNumberCreateManyArgs} args - Arguments to create many CompanyWhatsappNumbers.
     * @example
     * // Create many CompanyWhatsappNumbers
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyWhatsappNumberCreateManyArgs>(args?: SelectSubset<T, CompanyWhatsappNumberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyWhatsappNumbers and returns the data saved in the database.
     * @param {CompanyWhatsappNumberCreateManyAndReturnArgs} args - Arguments to create many CompanyWhatsappNumbers.
     * @example
     * // Create many CompanyWhatsappNumbers
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyWhatsappNumbers and only return the `id`
     * const companyWhatsappNumberWithIdOnly = await prisma.companyWhatsappNumber.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyWhatsappNumberCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyWhatsappNumberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyWhatsappNumber.
     * @param {CompanyWhatsappNumberDeleteArgs} args - Arguments to delete one CompanyWhatsappNumber.
     * @example
     * // Delete one CompanyWhatsappNumber
     * const CompanyWhatsappNumber = await prisma.companyWhatsappNumber.delete({
     *   where: {
     *     // ... filter to delete one CompanyWhatsappNumber
     *   }
     * })
     * 
     */
    delete<T extends CompanyWhatsappNumberDeleteArgs>(args: SelectSubset<T, CompanyWhatsappNumberDeleteArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyWhatsappNumber.
     * @param {CompanyWhatsappNumberUpdateArgs} args - Arguments to update one CompanyWhatsappNumber.
     * @example
     * // Update one CompanyWhatsappNumber
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyWhatsappNumberUpdateArgs>(args: SelectSubset<T, CompanyWhatsappNumberUpdateArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyWhatsappNumbers.
     * @param {CompanyWhatsappNumberDeleteManyArgs} args - Arguments to filter CompanyWhatsappNumbers to delete.
     * @example
     * // Delete a few CompanyWhatsappNumbers
     * const { count } = await prisma.companyWhatsappNumber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyWhatsappNumberDeleteManyArgs>(args?: SelectSubset<T, CompanyWhatsappNumberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyWhatsappNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyWhatsappNumbers
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyWhatsappNumberUpdateManyArgs>(args: SelectSubset<T, CompanyWhatsappNumberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyWhatsappNumbers and returns the data updated in the database.
     * @param {CompanyWhatsappNumberUpdateManyAndReturnArgs} args - Arguments to update many CompanyWhatsappNumbers.
     * @example
     * // Update many CompanyWhatsappNumbers
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyWhatsappNumbers and only return the `id`
     * const companyWhatsappNumberWithIdOnly = await prisma.companyWhatsappNumber.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyWhatsappNumberUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyWhatsappNumberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyWhatsappNumber.
     * @param {CompanyWhatsappNumberUpsertArgs} args - Arguments to update or create a CompanyWhatsappNumber.
     * @example
     * // Update or create a CompanyWhatsappNumber
     * const companyWhatsappNumber = await prisma.companyWhatsappNumber.upsert({
     *   create: {
     *     // ... data to create a CompanyWhatsappNumber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyWhatsappNumber we want to update
     *   }
     * })
     */
    upsert<T extends CompanyWhatsappNumberUpsertArgs>(args: SelectSubset<T, CompanyWhatsappNumberUpsertArgs<ExtArgs>>): Prisma__CompanyWhatsappNumberClient<$Result.GetResult<Prisma.$CompanyWhatsappNumberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyWhatsappNumbers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberCountArgs} args - Arguments to filter CompanyWhatsappNumbers to count.
     * @example
     * // Count the number of CompanyWhatsappNumbers
     * const count = await prisma.companyWhatsappNumber.count({
     *   where: {
     *     // ... the filter for the CompanyWhatsappNumbers we want to count
     *   }
     * })
    **/
    count<T extends CompanyWhatsappNumberCountArgs>(
      args?: Subset<T, CompanyWhatsappNumberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyWhatsappNumberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyWhatsappNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyWhatsappNumberAggregateArgs>(args: Subset<T, CompanyWhatsappNumberAggregateArgs>): Prisma.PrismaPromise<GetCompanyWhatsappNumberAggregateType<T>>

    /**
     * Group by CompanyWhatsappNumber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyWhatsappNumberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyWhatsappNumberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyWhatsappNumberGroupByArgs['orderBy'] }
        : { orderBy?: CompanyWhatsappNumberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyWhatsappNumberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyWhatsappNumberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyWhatsappNumber model
   */
  readonly fields: CompanyWhatsappNumberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyWhatsappNumber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyWhatsappNumberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyWhatsappNumber model
   */
  interface CompanyWhatsappNumberFieldRefs {
    readonly id: FieldRef<"CompanyWhatsappNumber", 'String'>
    readonly companyId: FieldRef<"CompanyWhatsappNumber", 'Int'>
    readonly displayName: FieldRef<"CompanyWhatsappNumber", 'String'>
    readonly phoneNumber: FieldRef<"CompanyWhatsappNumber", 'String'>
    readonly isConnected: FieldRef<"CompanyWhatsappNumber", 'Boolean'>
    readonly messagesThisMonth: FieldRef<"CompanyWhatsappNumber", 'Int'>
    readonly lastSyncedAt: FieldRef<"CompanyWhatsappNumber", 'DateTime'>
    readonly createdAt: FieldRef<"CompanyWhatsappNumber", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyWhatsappNumber", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyWhatsappNumber findUnique
   */
  export type CompanyWhatsappNumberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyWhatsappNumber to fetch.
     */
    where: CompanyWhatsappNumberWhereUniqueInput
  }

  /**
   * CompanyWhatsappNumber findUniqueOrThrow
   */
  export type CompanyWhatsappNumberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyWhatsappNumber to fetch.
     */
    where: CompanyWhatsappNumberWhereUniqueInput
  }

  /**
   * CompanyWhatsappNumber findFirst
   */
  export type CompanyWhatsappNumberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyWhatsappNumber to fetch.
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyWhatsappNumbers to fetch.
     */
    orderBy?: CompanyWhatsappNumberOrderByWithRelationInput | CompanyWhatsappNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyWhatsappNumbers.
     */
    cursor?: CompanyWhatsappNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyWhatsappNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyWhatsappNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyWhatsappNumbers.
     */
    distinct?: CompanyWhatsappNumberScalarFieldEnum | CompanyWhatsappNumberScalarFieldEnum[]
  }

  /**
   * CompanyWhatsappNumber findFirstOrThrow
   */
  export type CompanyWhatsappNumberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyWhatsappNumber to fetch.
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyWhatsappNumbers to fetch.
     */
    orderBy?: CompanyWhatsappNumberOrderByWithRelationInput | CompanyWhatsappNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyWhatsappNumbers.
     */
    cursor?: CompanyWhatsappNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyWhatsappNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyWhatsappNumbers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyWhatsappNumbers.
     */
    distinct?: CompanyWhatsappNumberScalarFieldEnum | CompanyWhatsappNumberScalarFieldEnum[]
  }

  /**
   * CompanyWhatsappNumber findMany
   */
  export type CompanyWhatsappNumberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyWhatsappNumbers to fetch.
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyWhatsappNumbers to fetch.
     */
    orderBy?: CompanyWhatsappNumberOrderByWithRelationInput | CompanyWhatsappNumberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyWhatsappNumbers.
     */
    cursor?: CompanyWhatsappNumberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyWhatsappNumbers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyWhatsappNumbers.
     */
    skip?: number
    distinct?: CompanyWhatsappNumberScalarFieldEnum | CompanyWhatsappNumberScalarFieldEnum[]
  }

  /**
   * CompanyWhatsappNumber create
   */
  export type CompanyWhatsappNumberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyWhatsappNumber.
     */
    data: XOR<CompanyWhatsappNumberCreateInput, CompanyWhatsappNumberUncheckedCreateInput>
  }

  /**
   * CompanyWhatsappNumber createMany
   */
  export type CompanyWhatsappNumberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyWhatsappNumbers.
     */
    data: CompanyWhatsappNumberCreateManyInput | CompanyWhatsappNumberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyWhatsappNumber createManyAndReturn
   */
  export type CompanyWhatsappNumberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyWhatsappNumbers.
     */
    data: CompanyWhatsappNumberCreateManyInput | CompanyWhatsappNumberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyWhatsappNumber update
   */
  export type CompanyWhatsappNumberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyWhatsappNumber.
     */
    data: XOR<CompanyWhatsappNumberUpdateInput, CompanyWhatsappNumberUncheckedUpdateInput>
    /**
     * Choose, which CompanyWhatsappNumber to update.
     */
    where: CompanyWhatsappNumberWhereUniqueInput
  }

  /**
   * CompanyWhatsappNumber updateMany
   */
  export type CompanyWhatsappNumberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyWhatsappNumbers.
     */
    data: XOR<CompanyWhatsappNumberUpdateManyMutationInput, CompanyWhatsappNumberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyWhatsappNumbers to update
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * Limit how many CompanyWhatsappNumbers to update.
     */
    limit?: number
  }

  /**
   * CompanyWhatsappNumber updateManyAndReturn
   */
  export type CompanyWhatsappNumberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * The data used to update CompanyWhatsappNumbers.
     */
    data: XOR<CompanyWhatsappNumberUpdateManyMutationInput, CompanyWhatsappNumberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyWhatsappNumbers to update
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * Limit how many CompanyWhatsappNumbers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyWhatsappNumber upsert
   */
  export type CompanyWhatsappNumberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyWhatsappNumber to update in case it exists.
     */
    where: CompanyWhatsappNumberWhereUniqueInput
    /**
     * In case the CompanyWhatsappNumber found by the `where` argument doesn't exist, create a new CompanyWhatsappNumber with this data.
     */
    create: XOR<CompanyWhatsappNumberCreateInput, CompanyWhatsappNumberUncheckedCreateInput>
    /**
     * In case the CompanyWhatsappNumber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyWhatsappNumberUpdateInput, CompanyWhatsappNumberUncheckedUpdateInput>
  }

  /**
   * CompanyWhatsappNumber delete
   */
  export type CompanyWhatsappNumberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
    /**
     * Filter which CompanyWhatsappNumber to delete.
     */
    where: CompanyWhatsappNumberWhereUniqueInput
  }

  /**
   * CompanyWhatsappNumber deleteMany
   */
  export type CompanyWhatsappNumberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyWhatsappNumbers to delete
     */
    where?: CompanyWhatsappNumberWhereInput
    /**
     * Limit how many CompanyWhatsappNumbers to delete.
     */
    limit?: number
  }

  /**
   * CompanyWhatsappNumber without action
   */
  export type CompanyWhatsappNumberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyWhatsappNumber
     */
    select?: CompanyWhatsappNumberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyWhatsappNumber
     */
    omit?: CompanyWhatsappNumberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyWhatsappNumberInclude<ExtArgs> | null
  }


  /**
   * Model InboxCustomer
   */

  export type AggregateInboxCustomer = {
    _count: InboxCustomerCountAggregateOutputType | null
    _avg: InboxCustomerAvgAggregateOutputType | null
    _sum: InboxCustomerSumAggregateOutputType | null
    _min: InboxCustomerMinAggregateOutputType | null
    _max: InboxCustomerMaxAggregateOutputType | null
  }

  export type InboxCustomerAvgAggregateOutputType = {
    companyId: number | null
  }

  export type InboxCustomerSumAggregateOutputType = {
    companyId: number | null
  }

  export type InboxCustomerMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    name: string | null
    phone: string | null
    email: string | null
    address: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InboxCustomerMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    name: string | null
    phone: string | null
    email: string | null
    address: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InboxCustomerCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    phone: number
    email: number
    address: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InboxCustomerAvgAggregateInputType = {
    companyId?: true
  }

  export type InboxCustomerSumAggregateInputType = {
    companyId?: true
  }

  export type InboxCustomerMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    phone?: true
    email?: true
    address?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InboxCustomerMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    phone?: true
    email?: true
    address?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InboxCustomerCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    phone?: true
    email?: true
    address?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InboxCustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InboxCustomer to aggregate.
     */
    where?: InboxCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxCustomers to fetch.
     */
    orderBy?: InboxCustomerOrderByWithRelationInput | InboxCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InboxCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InboxCustomers
    **/
    _count?: true | InboxCustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InboxCustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InboxCustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InboxCustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InboxCustomerMaxAggregateInputType
  }

  export type GetInboxCustomerAggregateType<T extends InboxCustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateInboxCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInboxCustomer[P]>
      : GetScalarType<T[P], AggregateInboxCustomer[P]>
  }




  export type InboxCustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxCustomerWhereInput
    orderBy?: InboxCustomerOrderByWithAggregationInput | InboxCustomerOrderByWithAggregationInput[]
    by: InboxCustomerScalarFieldEnum[] | InboxCustomerScalarFieldEnum
    having?: InboxCustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InboxCustomerCountAggregateInputType | true
    _avg?: InboxCustomerAvgAggregateInputType
    _sum?: InboxCustomerSumAggregateInputType
    _min?: InboxCustomerMinAggregateInputType
    _max?: InboxCustomerMaxAggregateInputType
  }

  export type InboxCustomerGroupByOutputType = {
    id: string
    companyId: number
    name: string
    phone: string | null
    email: string | null
    address: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: InboxCustomerCountAggregateOutputType | null
    _avg: InboxCustomerAvgAggregateOutputType | null
    _sum: InboxCustomerSumAggregateOutputType | null
    _min: InboxCustomerMinAggregateOutputType | null
    _max: InboxCustomerMaxAggregateOutputType | null
  }

  type GetInboxCustomerGroupByPayload<T extends InboxCustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InboxCustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InboxCustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InboxCustomerGroupByOutputType[P]>
            : GetScalarType<T[P], InboxCustomerGroupByOutputType[P]>
        }
      >
    >


  export type InboxCustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversations?: boolean | InboxCustomer$conversationsArgs<ExtArgs>
    _count?: boolean | InboxCustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inboxCustomer"]>

  export type InboxCustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inboxCustomer"]>

  export type InboxCustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inboxCustomer"]>

  export type InboxCustomerSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    phone?: boolean
    email?: boolean
    address?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InboxCustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "phone" | "email" | "address" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["inboxCustomer"]>
  export type InboxCustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversations?: boolean | InboxCustomer$conversationsArgs<ExtArgs>
    _count?: boolean | InboxCustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InboxCustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type InboxCustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $InboxCustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InboxCustomer"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      conversations: Prisma.$InboxConversationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      name: string
      phone: string | null
      email: string | null
      address: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inboxCustomer"]>
    composites: {}
  }

  type InboxCustomerGetPayload<S extends boolean | null | undefined | InboxCustomerDefaultArgs> = $Result.GetResult<Prisma.$InboxCustomerPayload, S>

  type InboxCustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InboxCustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InboxCustomerCountAggregateInputType | true
    }

  export interface InboxCustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InboxCustomer'], meta: { name: 'InboxCustomer' } }
    /**
     * Find zero or one InboxCustomer that matches the filter.
     * @param {InboxCustomerFindUniqueArgs} args - Arguments to find a InboxCustomer
     * @example
     * // Get one InboxCustomer
     * const inboxCustomer = await prisma.inboxCustomer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InboxCustomerFindUniqueArgs>(args: SelectSubset<T, InboxCustomerFindUniqueArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InboxCustomer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InboxCustomerFindUniqueOrThrowArgs} args - Arguments to find a InboxCustomer
     * @example
     * // Get one InboxCustomer
     * const inboxCustomer = await prisma.inboxCustomer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InboxCustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, InboxCustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InboxCustomer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerFindFirstArgs} args - Arguments to find a InboxCustomer
     * @example
     * // Get one InboxCustomer
     * const inboxCustomer = await prisma.inboxCustomer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InboxCustomerFindFirstArgs>(args?: SelectSubset<T, InboxCustomerFindFirstArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InboxCustomer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerFindFirstOrThrowArgs} args - Arguments to find a InboxCustomer
     * @example
     * // Get one InboxCustomer
     * const inboxCustomer = await prisma.inboxCustomer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InboxCustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, InboxCustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InboxCustomers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InboxCustomers
     * const inboxCustomers = await prisma.inboxCustomer.findMany()
     * 
     * // Get first 10 InboxCustomers
     * const inboxCustomers = await prisma.inboxCustomer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inboxCustomerWithIdOnly = await prisma.inboxCustomer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InboxCustomerFindManyArgs>(args?: SelectSubset<T, InboxCustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InboxCustomer.
     * @param {InboxCustomerCreateArgs} args - Arguments to create a InboxCustomer.
     * @example
     * // Create one InboxCustomer
     * const InboxCustomer = await prisma.inboxCustomer.create({
     *   data: {
     *     // ... data to create a InboxCustomer
     *   }
     * })
     * 
     */
    create<T extends InboxCustomerCreateArgs>(args: SelectSubset<T, InboxCustomerCreateArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InboxCustomers.
     * @param {InboxCustomerCreateManyArgs} args - Arguments to create many InboxCustomers.
     * @example
     * // Create many InboxCustomers
     * const inboxCustomer = await prisma.inboxCustomer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InboxCustomerCreateManyArgs>(args?: SelectSubset<T, InboxCustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InboxCustomers and returns the data saved in the database.
     * @param {InboxCustomerCreateManyAndReturnArgs} args - Arguments to create many InboxCustomers.
     * @example
     * // Create many InboxCustomers
     * const inboxCustomer = await prisma.inboxCustomer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InboxCustomers and only return the `id`
     * const inboxCustomerWithIdOnly = await prisma.inboxCustomer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InboxCustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, InboxCustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InboxCustomer.
     * @param {InboxCustomerDeleteArgs} args - Arguments to delete one InboxCustomer.
     * @example
     * // Delete one InboxCustomer
     * const InboxCustomer = await prisma.inboxCustomer.delete({
     *   where: {
     *     // ... filter to delete one InboxCustomer
     *   }
     * })
     * 
     */
    delete<T extends InboxCustomerDeleteArgs>(args: SelectSubset<T, InboxCustomerDeleteArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InboxCustomer.
     * @param {InboxCustomerUpdateArgs} args - Arguments to update one InboxCustomer.
     * @example
     * // Update one InboxCustomer
     * const inboxCustomer = await prisma.inboxCustomer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InboxCustomerUpdateArgs>(args: SelectSubset<T, InboxCustomerUpdateArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InboxCustomers.
     * @param {InboxCustomerDeleteManyArgs} args - Arguments to filter InboxCustomers to delete.
     * @example
     * // Delete a few InboxCustomers
     * const { count } = await prisma.inboxCustomer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InboxCustomerDeleteManyArgs>(args?: SelectSubset<T, InboxCustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InboxCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InboxCustomers
     * const inboxCustomer = await prisma.inboxCustomer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InboxCustomerUpdateManyArgs>(args: SelectSubset<T, InboxCustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InboxCustomers and returns the data updated in the database.
     * @param {InboxCustomerUpdateManyAndReturnArgs} args - Arguments to update many InboxCustomers.
     * @example
     * // Update many InboxCustomers
     * const inboxCustomer = await prisma.inboxCustomer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InboxCustomers and only return the `id`
     * const inboxCustomerWithIdOnly = await prisma.inboxCustomer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InboxCustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, InboxCustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InboxCustomer.
     * @param {InboxCustomerUpsertArgs} args - Arguments to update or create a InboxCustomer.
     * @example
     * // Update or create a InboxCustomer
     * const inboxCustomer = await prisma.inboxCustomer.upsert({
     *   create: {
     *     // ... data to create a InboxCustomer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InboxCustomer we want to update
     *   }
     * })
     */
    upsert<T extends InboxCustomerUpsertArgs>(args: SelectSubset<T, InboxCustomerUpsertArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InboxCustomers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerCountArgs} args - Arguments to filter InboxCustomers to count.
     * @example
     * // Count the number of InboxCustomers
     * const count = await prisma.inboxCustomer.count({
     *   where: {
     *     // ... the filter for the InboxCustomers we want to count
     *   }
     * })
    **/
    count<T extends InboxCustomerCountArgs>(
      args?: Subset<T, InboxCustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InboxCustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InboxCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InboxCustomerAggregateArgs>(args: Subset<T, InboxCustomerAggregateArgs>): Prisma.PrismaPromise<GetInboxCustomerAggregateType<T>>

    /**
     * Group by InboxCustomer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxCustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InboxCustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InboxCustomerGroupByArgs['orderBy'] }
        : { orderBy?: InboxCustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InboxCustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInboxCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InboxCustomer model
   */
  readonly fields: InboxCustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InboxCustomer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InboxCustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    conversations<T extends InboxCustomer$conversationsArgs<ExtArgs> = {}>(args?: Subset<T, InboxCustomer$conversationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InboxCustomer model
   */
  interface InboxCustomerFieldRefs {
    readonly id: FieldRef<"InboxCustomer", 'String'>
    readonly companyId: FieldRef<"InboxCustomer", 'Int'>
    readonly name: FieldRef<"InboxCustomer", 'String'>
    readonly phone: FieldRef<"InboxCustomer", 'String'>
    readonly email: FieldRef<"InboxCustomer", 'String'>
    readonly address: FieldRef<"InboxCustomer", 'String'>
    readonly notes: FieldRef<"InboxCustomer", 'String'>
    readonly createdAt: FieldRef<"InboxCustomer", 'DateTime'>
    readonly updatedAt: FieldRef<"InboxCustomer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InboxCustomer findUnique
   */
  export type InboxCustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * Filter, which InboxCustomer to fetch.
     */
    where: InboxCustomerWhereUniqueInput
  }

  /**
   * InboxCustomer findUniqueOrThrow
   */
  export type InboxCustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * Filter, which InboxCustomer to fetch.
     */
    where: InboxCustomerWhereUniqueInput
  }

  /**
   * InboxCustomer findFirst
   */
  export type InboxCustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * Filter, which InboxCustomer to fetch.
     */
    where?: InboxCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxCustomers to fetch.
     */
    orderBy?: InboxCustomerOrderByWithRelationInput | InboxCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InboxCustomers.
     */
    cursor?: InboxCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InboxCustomers.
     */
    distinct?: InboxCustomerScalarFieldEnum | InboxCustomerScalarFieldEnum[]
  }

  /**
   * InboxCustomer findFirstOrThrow
   */
  export type InboxCustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * Filter, which InboxCustomer to fetch.
     */
    where?: InboxCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxCustomers to fetch.
     */
    orderBy?: InboxCustomerOrderByWithRelationInput | InboxCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InboxCustomers.
     */
    cursor?: InboxCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxCustomers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InboxCustomers.
     */
    distinct?: InboxCustomerScalarFieldEnum | InboxCustomerScalarFieldEnum[]
  }

  /**
   * InboxCustomer findMany
   */
  export type InboxCustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * Filter, which InboxCustomers to fetch.
     */
    where?: InboxCustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxCustomers to fetch.
     */
    orderBy?: InboxCustomerOrderByWithRelationInput | InboxCustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InboxCustomers.
     */
    cursor?: InboxCustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxCustomers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxCustomers.
     */
    skip?: number
    distinct?: InboxCustomerScalarFieldEnum | InboxCustomerScalarFieldEnum[]
  }

  /**
   * InboxCustomer create
   */
  export type InboxCustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a InboxCustomer.
     */
    data: XOR<InboxCustomerCreateInput, InboxCustomerUncheckedCreateInput>
  }

  /**
   * InboxCustomer createMany
   */
  export type InboxCustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InboxCustomers.
     */
    data: InboxCustomerCreateManyInput | InboxCustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InboxCustomer createManyAndReturn
   */
  export type InboxCustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * The data used to create many InboxCustomers.
     */
    data: InboxCustomerCreateManyInput | InboxCustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InboxCustomer update
   */
  export type InboxCustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a InboxCustomer.
     */
    data: XOR<InboxCustomerUpdateInput, InboxCustomerUncheckedUpdateInput>
    /**
     * Choose, which InboxCustomer to update.
     */
    where: InboxCustomerWhereUniqueInput
  }

  /**
   * InboxCustomer updateMany
   */
  export type InboxCustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InboxCustomers.
     */
    data: XOR<InboxCustomerUpdateManyMutationInput, InboxCustomerUncheckedUpdateManyInput>
    /**
     * Filter which InboxCustomers to update
     */
    where?: InboxCustomerWhereInput
    /**
     * Limit how many InboxCustomers to update.
     */
    limit?: number
  }

  /**
   * InboxCustomer updateManyAndReturn
   */
  export type InboxCustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * The data used to update InboxCustomers.
     */
    data: XOR<InboxCustomerUpdateManyMutationInput, InboxCustomerUncheckedUpdateManyInput>
    /**
     * Filter which InboxCustomers to update
     */
    where?: InboxCustomerWhereInput
    /**
     * Limit how many InboxCustomers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InboxCustomer upsert
   */
  export type InboxCustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the InboxCustomer to update in case it exists.
     */
    where: InboxCustomerWhereUniqueInput
    /**
     * In case the InboxCustomer found by the `where` argument doesn't exist, create a new InboxCustomer with this data.
     */
    create: XOR<InboxCustomerCreateInput, InboxCustomerUncheckedCreateInput>
    /**
     * In case the InboxCustomer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InboxCustomerUpdateInput, InboxCustomerUncheckedUpdateInput>
  }

  /**
   * InboxCustomer delete
   */
  export type InboxCustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
    /**
     * Filter which InboxCustomer to delete.
     */
    where: InboxCustomerWhereUniqueInput
  }

  /**
   * InboxCustomer deleteMany
   */
  export type InboxCustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InboxCustomers to delete
     */
    where?: InboxCustomerWhereInput
    /**
     * Limit how many InboxCustomers to delete.
     */
    limit?: number
  }

  /**
   * InboxCustomer.conversations
   */
  export type InboxCustomer$conversationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    where?: InboxConversationWhereInput
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    cursor?: InboxConversationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxConversationScalarFieldEnum | InboxConversationScalarFieldEnum[]
  }

  /**
   * InboxCustomer without action
   */
  export type InboxCustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxCustomer
     */
    select?: InboxCustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxCustomer
     */
    omit?: InboxCustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxCustomerInclude<ExtArgs> | null
  }


  /**
   * Model InboxConversation
   */

  export type AggregateInboxConversation = {
    _count: InboxConversationCountAggregateOutputType | null
    _avg: InboxConversationAvgAggregateOutputType | null
    _sum: InboxConversationSumAggregateOutputType | null
    _min: InboxConversationMinAggregateOutputType | null
    _max: InboxConversationMaxAggregateOutputType | null
  }

  export type InboxConversationAvgAggregateOutputType = {
    companyId: number | null
    unreadCount: number | null
    satisfactionScore: number | null
    assignedToId: number | null
  }

  export type InboxConversationSumAggregateOutputType = {
    companyId: number | null
    unreadCount: number | null
    satisfactionScore: number | null
    assignedToId: number | null
  }

  export type InboxConversationMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    customerId: string | null
    subject: string | null
    lastMessagePreview: string | null
    lastMessageSentAt: Date | null
    unreadCount: number | null
    priority: $Enums.InboxConversationPriority | null
    satisfactionScore: number | null
    assignedToId: number | null
    isArchived: boolean | null
    archivedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InboxConversationMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    customerId: string | null
    subject: string | null
    lastMessagePreview: string | null
    lastMessageSentAt: Date | null
    unreadCount: number | null
    priority: $Enums.InboxConversationPriority | null
    satisfactionScore: number | null
    assignedToId: number | null
    isArchived: boolean | null
    archivedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InboxConversationCountAggregateOutputType = {
    id: number
    companyId: number
    customerId: number
    subject: number
    lastMessagePreview: number
    lastMessageSentAt: number
    unreadCount: number
    priority: number
    satisfactionScore: number
    tags: number
    assignedToId: number
    isArchived: number
    archivedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InboxConversationAvgAggregateInputType = {
    companyId?: true
    unreadCount?: true
    satisfactionScore?: true
    assignedToId?: true
  }

  export type InboxConversationSumAggregateInputType = {
    companyId?: true
    unreadCount?: true
    satisfactionScore?: true
    assignedToId?: true
  }

  export type InboxConversationMinAggregateInputType = {
    id?: true
    companyId?: true
    customerId?: true
    subject?: true
    lastMessagePreview?: true
    lastMessageSentAt?: true
    unreadCount?: true
    priority?: true
    satisfactionScore?: true
    assignedToId?: true
    isArchived?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InboxConversationMaxAggregateInputType = {
    id?: true
    companyId?: true
    customerId?: true
    subject?: true
    lastMessagePreview?: true
    lastMessageSentAt?: true
    unreadCount?: true
    priority?: true
    satisfactionScore?: true
    assignedToId?: true
    isArchived?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InboxConversationCountAggregateInputType = {
    id?: true
    companyId?: true
    customerId?: true
    subject?: true
    lastMessagePreview?: true
    lastMessageSentAt?: true
    unreadCount?: true
    priority?: true
    satisfactionScore?: true
    tags?: true
    assignedToId?: true
    isArchived?: true
    archivedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InboxConversationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InboxConversation to aggregate.
     */
    where?: InboxConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxConversations to fetch.
     */
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InboxConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxConversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InboxConversations
    **/
    _count?: true | InboxConversationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InboxConversationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InboxConversationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InboxConversationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InboxConversationMaxAggregateInputType
  }

  export type GetInboxConversationAggregateType<T extends InboxConversationAggregateArgs> = {
        [P in keyof T & keyof AggregateInboxConversation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInboxConversation[P]>
      : GetScalarType<T[P], AggregateInboxConversation[P]>
  }




  export type InboxConversationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxConversationWhereInput
    orderBy?: InboxConversationOrderByWithAggregationInput | InboxConversationOrderByWithAggregationInput[]
    by: InboxConversationScalarFieldEnum[] | InboxConversationScalarFieldEnum
    having?: InboxConversationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InboxConversationCountAggregateInputType | true
    _avg?: InboxConversationAvgAggregateInputType
    _sum?: InboxConversationSumAggregateInputType
    _min?: InboxConversationMinAggregateInputType
    _max?: InboxConversationMaxAggregateInputType
  }

  export type InboxConversationGroupByOutputType = {
    id: string
    companyId: number
    customerId: string
    subject: string | null
    lastMessagePreview: string | null
    lastMessageSentAt: Date | null
    unreadCount: number
    priority: $Enums.InboxConversationPriority
    satisfactionScore: number | null
    tags: string[]
    assignedToId: number | null
    isArchived: boolean
    archivedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: InboxConversationCountAggregateOutputType | null
    _avg: InboxConversationAvgAggregateOutputType | null
    _sum: InboxConversationSumAggregateOutputType | null
    _min: InboxConversationMinAggregateOutputType | null
    _max: InboxConversationMaxAggregateOutputType | null
  }

  type GetInboxConversationGroupByPayload<T extends InboxConversationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InboxConversationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InboxConversationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InboxConversationGroupByOutputType[P]>
            : GetScalarType<T[P], InboxConversationGroupByOutputType[P]>
        }
      >
    >


  export type InboxConversationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    customerId?: boolean
    subject?: boolean
    lastMessagePreview?: boolean
    lastMessageSentAt?: boolean
    unreadCount?: boolean
    priority?: boolean
    satisfactionScore?: boolean
    tags?: boolean
    assignedToId?: boolean
    isArchived?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    customer?: boolean | InboxCustomerDefaultArgs<ExtArgs>
    assignedTo?: boolean | InboxConversation$assignedToArgs<ExtArgs>
    messages?: boolean | InboxConversation$messagesArgs<ExtArgs>
    _count?: boolean | InboxConversationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inboxConversation"]>

  export type InboxConversationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    customerId?: boolean
    subject?: boolean
    lastMessagePreview?: boolean
    lastMessageSentAt?: boolean
    unreadCount?: boolean
    priority?: boolean
    satisfactionScore?: boolean
    tags?: boolean
    assignedToId?: boolean
    isArchived?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    customer?: boolean | InboxCustomerDefaultArgs<ExtArgs>
    assignedTo?: boolean | InboxConversation$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["inboxConversation"]>

  export type InboxConversationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    customerId?: boolean
    subject?: boolean
    lastMessagePreview?: boolean
    lastMessageSentAt?: boolean
    unreadCount?: boolean
    priority?: boolean
    satisfactionScore?: boolean
    tags?: boolean
    assignedToId?: boolean
    isArchived?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    customer?: boolean | InboxCustomerDefaultArgs<ExtArgs>
    assignedTo?: boolean | InboxConversation$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["inboxConversation"]>

  export type InboxConversationSelectScalar = {
    id?: boolean
    companyId?: boolean
    customerId?: boolean
    subject?: boolean
    lastMessagePreview?: boolean
    lastMessageSentAt?: boolean
    unreadCount?: boolean
    priority?: boolean
    satisfactionScore?: boolean
    tags?: boolean
    assignedToId?: boolean
    isArchived?: boolean
    archivedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InboxConversationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "customerId" | "subject" | "lastMessagePreview" | "lastMessageSentAt" | "unreadCount" | "priority" | "satisfactionScore" | "tags" | "assignedToId" | "isArchived" | "archivedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["inboxConversation"]>
  export type InboxConversationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    customer?: boolean | InboxCustomerDefaultArgs<ExtArgs>
    assignedTo?: boolean | InboxConversation$assignedToArgs<ExtArgs>
    messages?: boolean | InboxConversation$messagesArgs<ExtArgs>
    _count?: boolean | InboxConversationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InboxConversationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    customer?: boolean | InboxCustomerDefaultArgs<ExtArgs>
    assignedTo?: boolean | InboxConversation$assignedToArgs<ExtArgs>
  }
  export type InboxConversationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    customer?: boolean | InboxCustomerDefaultArgs<ExtArgs>
    assignedTo?: boolean | InboxConversation$assignedToArgs<ExtArgs>
  }

  export type $InboxConversationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InboxConversation"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      customer: Prisma.$InboxCustomerPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      messages: Prisma.$InboxMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      customerId: string
      subject: string | null
      lastMessagePreview: string | null
      lastMessageSentAt: Date | null
      unreadCount: number
      priority: $Enums.InboxConversationPriority
      satisfactionScore: number | null
      tags: string[]
      assignedToId: number | null
      isArchived: boolean
      archivedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inboxConversation"]>
    composites: {}
  }

  type InboxConversationGetPayload<S extends boolean | null | undefined | InboxConversationDefaultArgs> = $Result.GetResult<Prisma.$InboxConversationPayload, S>

  type InboxConversationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InboxConversationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InboxConversationCountAggregateInputType | true
    }

  export interface InboxConversationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InboxConversation'], meta: { name: 'InboxConversation' } }
    /**
     * Find zero or one InboxConversation that matches the filter.
     * @param {InboxConversationFindUniqueArgs} args - Arguments to find a InboxConversation
     * @example
     * // Get one InboxConversation
     * const inboxConversation = await prisma.inboxConversation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InboxConversationFindUniqueArgs>(args: SelectSubset<T, InboxConversationFindUniqueArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InboxConversation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InboxConversationFindUniqueOrThrowArgs} args - Arguments to find a InboxConversation
     * @example
     * // Get one InboxConversation
     * const inboxConversation = await prisma.inboxConversation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InboxConversationFindUniqueOrThrowArgs>(args: SelectSubset<T, InboxConversationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InboxConversation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationFindFirstArgs} args - Arguments to find a InboxConversation
     * @example
     * // Get one InboxConversation
     * const inboxConversation = await prisma.inboxConversation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InboxConversationFindFirstArgs>(args?: SelectSubset<T, InboxConversationFindFirstArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InboxConversation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationFindFirstOrThrowArgs} args - Arguments to find a InboxConversation
     * @example
     * // Get one InboxConversation
     * const inboxConversation = await prisma.inboxConversation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InboxConversationFindFirstOrThrowArgs>(args?: SelectSubset<T, InboxConversationFindFirstOrThrowArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InboxConversations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InboxConversations
     * const inboxConversations = await prisma.inboxConversation.findMany()
     * 
     * // Get first 10 InboxConversations
     * const inboxConversations = await prisma.inboxConversation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inboxConversationWithIdOnly = await prisma.inboxConversation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InboxConversationFindManyArgs>(args?: SelectSubset<T, InboxConversationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InboxConversation.
     * @param {InboxConversationCreateArgs} args - Arguments to create a InboxConversation.
     * @example
     * // Create one InboxConversation
     * const InboxConversation = await prisma.inboxConversation.create({
     *   data: {
     *     // ... data to create a InboxConversation
     *   }
     * })
     * 
     */
    create<T extends InboxConversationCreateArgs>(args: SelectSubset<T, InboxConversationCreateArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InboxConversations.
     * @param {InboxConversationCreateManyArgs} args - Arguments to create many InboxConversations.
     * @example
     * // Create many InboxConversations
     * const inboxConversation = await prisma.inboxConversation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InboxConversationCreateManyArgs>(args?: SelectSubset<T, InboxConversationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InboxConversations and returns the data saved in the database.
     * @param {InboxConversationCreateManyAndReturnArgs} args - Arguments to create many InboxConversations.
     * @example
     * // Create many InboxConversations
     * const inboxConversation = await prisma.inboxConversation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InboxConversations and only return the `id`
     * const inboxConversationWithIdOnly = await prisma.inboxConversation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InboxConversationCreateManyAndReturnArgs>(args?: SelectSubset<T, InboxConversationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InboxConversation.
     * @param {InboxConversationDeleteArgs} args - Arguments to delete one InboxConversation.
     * @example
     * // Delete one InboxConversation
     * const InboxConversation = await prisma.inboxConversation.delete({
     *   where: {
     *     // ... filter to delete one InboxConversation
     *   }
     * })
     * 
     */
    delete<T extends InboxConversationDeleteArgs>(args: SelectSubset<T, InboxConversationDeleteArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InboxConversation.
     * @param {InboxConversationUpdateArgs} args - Arguments to update one InboxConversation.
     * @example
     * // Update one InboxConversation
     * const inboxConversation = await prisma.inboxConversation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InboxConversationUpdateArgs>(args: SelectSubset<T, InboxConversationUpdateArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InboxConversations.
     * @param {InboxConversationDeleteManyArgs} args - Arguments to filter InboxConversations to delete.
     * @example
     * // Delete a few InboxConversations
     * const { count } = await prisma.inboxConversation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InboxConversationDeleteManyArgs>(args?: SelectSubset<T, InboxConversationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InboxConversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InboxConversations
     * const inboxConversation = await prisma.inboxConversation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InboxConversationUpdateManyArgs>(args: SelectSubset<T, InboxConversationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InboxConversations and returns the data updated in the database.
     * @param {InboxConversationUpdateManyAndReturnArgs} args - Arguments to update many InboxConversations.
     * @example
     * // Update many InboxConversations
     * const inboxConversation = await prisma.inboxConversation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InboxConversations and only return the `id`
     * const inboxConversationWithIdOnly = await prisma.inboxConversation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InboxConversationUpdateManyAndReturnArgs>(args: SelectSubset<T, InboxConversationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InboxConversation.
     * @param {InboxConversationUpsertArgs} args - Arguments to update or create a InboxConversation.
     * @example
     * // Update or create a InboxConversation
     * const inboxConversation = await prisma.inboxConversation.upsert({
     *   create: {
     *     // ... data to create a InboxConversation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InboxConversation we want to update
     *   }
     * })
     */
    upsert<T extends InboxConversationUpsertArgs>(args: SelectSubset<T, InboxConversationUpsertArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InboxConversations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationCountArgs} args - Arguments to filter InboxConversations to count.
     * @example
     * // Count the number of InboxConversations
     * const count = await prisma.inboxConversation.count({
     *   where: {
     *     // ... the filter for the InboxConversations we want to count
     *   }
     * })
    **/
    count<T extends InboxConversationCountArgs>(
      args?: Subset<T, InboxConversationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InboxConversationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InboxConversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InboxConversationAggregateArgs>(args: Subset<T, InboxConversationAggregateArgs>): Prisma.PrismaPromise<GetInboxConversationAggregateType<T>>

    /**
     * Group by InboxConversation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxConversationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InboxConversationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InboxConversationGroupByArgs['orderBy'] }
        : { orderBy?: InboxConversationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InboxConversationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInboxConversationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InboxConversation model
   */
  readonly fields: InboxConversationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InboxConversation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InboxConversationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customer<T extends InboxCustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InboxCustomerDefaultArgs<ExtArgs>>): Prisma__InboxCustomerClient<$Result.GetResult<Prisma.$InboxCustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTo<T extends InboxConversation$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, InboxConversation$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    messages<T extends InboxConversation$messagesArgs<ExtArgs> = {}>(args?: Subset<T, InboxConversation$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InboxConversation model
   */
  interface InboxConversationFieldRefs {
    readonly id: FieldRef<"InboxConversation", 'String'>
    readonly companyId: FieldRef<"InboxConversation", 'Int'>
    readonly customerId: FieldRef<"InboxConversation", 'String'>
    readonly subject: FieldRef<"InboxConversation", 'String'>
    readonly lastMessagePreview: FieldRef<"InboxConversation", 'String'>
    readonly lastMessageSentAt: FieldRef<"InboxConversation", 'DateTime'>
    readonly unreadCount: FieldRef<"InboxConversation", 'Int'>
    readonly priority: FieldRef<"InboxConversation", 'InboxConversationPriority'>
    readonly satisfactionScore: FieldRef<"InboxConversation", 'Int'>
    readonly tags: FieldRef<"InboxConversation", 'String[]'>
    readonly assignedToId: FieldRef<"InboxConversation", 'Int'>
    readonly isArchived: FieldRef<"InboxConversation", 'Boolean'>
    readonly archivedAt: FieldRef<"InboxConversation", 'DateTime'>
    readonly createdAt: FieldRef<"InboxConversation", 'DateTime'>
    readonly updatedAt: FieldRef<"InboxConversation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InboxConversation findUnique
   */
  export type InboxConversationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * Filter, which InboxConversation to fetch.
     */
    where: InboxConversationWhereUniqueInput
  }

  /**
   * InboxConversation findUniqueOrThrow
   */
  export type InboxConversationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * Filter, which InboxConversation to fetch.
     */
    where: InboxConversationWhereUniqueInput
  }

  /**
   * InboxConversation findFirst
   */
  export type InboxConversationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * Filter, which InboxConversation to fetch.
     */
    where?: InboxConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxConversations to fetch.
     */
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InboxConversations.
     */
    cursor?: InboxConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxConversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InboxConversations.
     */
    distinct?: InboxConversationScalarFieldEnum | InboxConversationScalarFieldEnum[]
  }

  /**
   * InboxConversation findFirstOrThrow
   */
  export type InboxConversationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * Filter, which InboxConversation to fetch.
     */
    where?: InboxConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxConversations to fetch.
     */
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InboxConversations.
     */
    cursor?: InboxConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxConversations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InboxConversations.
     */
    distinct?: InboxConversationScalarFieldEnum | InboxConversationScalarFieldEnum[]
  }

  /**
   * InboxConversation findMany
   */
  export type InboxConversationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * Filter, which InboxConversations to fetch.
     */
    where?: InboxConversationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxConversations to fetch.
     */
    orderBy?: InboxConversationOrderByWithRelationInput | InboxConversationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InboxConversations.
     */
    cursor?: InboxConversationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxConversations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxConversations.
     */
    skip?: number
    distinct?: InboxConversationScalarFieldEnum | InboxConversationScalarFieldEnum[]
  }

  /**
   * InboxConversation create
   */
  export type InboxConversationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * The data needed to create a InboxConversation.
     */
    data: XOR<InboxConversationCreateInput, InboxConversationUncheckedCreateInput>
  }

  /**
   * InboxConversation createMany
   */
  export type InboxConversationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InboxConversations.
     */
    data: InboxConversationCreateManyInput | InboxConversationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InboxConversation createManyAndReturn
   */
  export type InboxConversationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * The data used to create many InboxConversations.
     */
    data: InboxConversationCreateManyInput | InboxConversationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InboxConversation update
   */
  export type InboxConversationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * The data needed to update a InboxConversation.
     */
    data: XOR<InboxConversationUpdateInput, InboxConversationUncheckedUpdateInput>
    /**
     * Choose, which InboxConversation to update.
     */
    where: InboxConversationWhereUniqueInput
  }

  /**
   * InboxConversation updateMany
   */
  export type InboxConversationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InboxConversations.
     */
    data: XOR<InboxConversationUpdateManyMutationInput, InboxConversationUncheckedUpdateManyInput>
    /**
     * Filter which InboxConversations to update
     */
    where?: InboxConversationWhereInput
    /**
     * Limit how many InboxConversations to update.
     */
    limit?: number
  }

  /**
   * InboxConversation updateManyAndReturn
   */
  export type InboxConversationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * The data used to update InboxConversations.
     */
    data: XOR<InboxConversationUpdateManyMutationInput, InboxConversationUncheckedUpdateManyInput>
    /**
     * Filter which InboxConversations to update
     */
    where?: InboxConversationWhereInput
    /**
     * Limit how many InboxConversations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InboxConversation upsert
   */
  export type InboxConversationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * The filter to search for the InboxConversation to update in case it exists.
     */
    where: InboxConversationWhereUniqueInput
    /**
     * In case the InboxConversation found by the `where` argument doesn't exist, create a new InboxConversation with this data.
     */
    create: XOR<InboxConversationCreateInput, InboxConversationUncheckedCreateInput>
    /**
     * In case the InboxConversation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InboxConversationUpdateInput, InboxConversationUncheckedUpdateInput>
  }

  /**
   * InboxConversation delete
   */
  export type InboxConversationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
    /**
     * Filter which InboxConversation to delete.
     */
    where: InboxConversationWhereUniqueInput
  }

  /**
   * InboxConversation deleteMany
   */
  export type InboxConversationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InboxConversations to delete
     */
    where?: InboxConversationWhereInput
    /**
     * Limit how many InboxConversations to delete.
     */
    limit?: number
  }

  /**
   * InboxConversation.assignedTo
   */
  export type InboxConversation$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * InboxConversation.messages
   */
  export type InboxConversation$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    where?: InboxMessageWhereInput
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    cursor?: InboxMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InboxMessageScalarFieldEnum | InboxMessageScalarFieldEnum[]
  }

  /**
   * InboxConversation without action
   */
  export type InboxConversationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxConversation
     */
    select?: InboxConversationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxConversation
     */
    omit?: InboxConversationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxConversationInclude<ExtArgs> | null
  }


  /**
   * Model InboxMessage
   */

  export type AggregateInboxMessage = {
    _count: InboxMessageCountAggregateOutputType | null
    _avg: InboxMessageAvgAggregateOutputType | null
    _sum: InboxMessageSumAggregateOutputType | null
    _min: InboxMessageMinAggregateOutputType | null
    _max: InboxMessageMaxAggregateOutputType | null
  }

  export type InboxMessageAvgAggregateOutputType = {
    companyId: number | null
    senderUserId: number | null
  }

  export type InboxMessageSumAggregateOutputType = {
    companyId: number | null
    senderUserId: number | null
  }

  export type InboxMessageMinAggregateOutputType = {
    id: string | null
    companyId: number | null
    conversationId: string | null
    senderType: $Enums.InboxMessageSenderType | null
    senderUserId: number | null
    content: string | null
    status: $Enums.InboxMessageStatus | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InboxMessageMaxAggregateOutputType = {
    id: string | null
    companyId: number | null
    conversationId: string | null
    senderType: $Enums.InboxMessageSenderType | null
    senderUserId: number | null
    content: string | null
    status: $Enums.InboxMessageStatus | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InboxMessageCountAggregateOutputType = {
    id: number
    companyId: number
    conversationId: number
    senderType: number
    senderUserId: number
    content: number
    attachments: number
    status: number
    sentAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InboxMessageAvgAggregateInputType = {
    companyId?: true
    senderUserId?: true
  }

  export type InboxMessageSumAggregateInputType = {
    companyId?: true
    senderUserId?: true
  }

  export type InboxMessageMinAggregateInputType = {
    id?: true
    companyId?: true
    conversationId?: true
    senderType?: true
    senderUserId?: true
    content?: true
    status?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InboxMessageMaxAggregateInputType = {
    id?: true
    companyId?: true
    conversationId?: true
    senderType?: true
    senderUserId?: true
    content?: true
    status?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InboxMessageCountAggregateInputType = {
    id?: true
    companyId?: true
    conversationId?: true
    senderType?: true
    senderUserId?: true
    content?: true
    attachments?: true
    status?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InboxMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InboxMessage to aggregate.
     */
    where?: InboxMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxMessages to fetch.
     */
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InboxMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InboxMessages
    **/
    _count?: true | InboxMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InboxMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InboxMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InboxMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InboxMessageMaxAggregateInputType
  }

  export type GetInboxMessageAggregateType<T extends InboxMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateInboxMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInboxMessage[P]>
      : GetScalarType<T[P], AggregateInboxMessage[P]>
  }




  export type InboxMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InboxMessageWhereInput
    orderBy?: InboxMessageOrderByWithAggregationInput | InboxMessageOrderByWithAggregationInput[]
    by: InboxMessageScalarFieldEnum[] | InboxMessageScalarFieldEnum
    having?: InboxMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InboxMessageCountAggregateInputType | true
    _avg?: InboxMessageAvgAggregateInputType
    _sum?: InboxMessageSumAggregateInputType
    _min?: InboxMessageMinAggregateInputType
    _max?: InboxMessageMaxAggregateInputType
  }

  export type InboxMessageGroupByOutputType = {
    id: string
    companyId: number
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    senderUserId: number | null
    content: string
    attachments: JsonValue | null
    status: $Enums.InboxMessageStatus
    sentAt: Date
    createdAt: Date
    updatedAt: Date
    _count: InboxMessageCountAggregateOutputType | null
    _avg: InboxMessageAvgAggregateOutputType | null
    _sum: InboxMessageSumAggregateOutputType | null
    _min: InboxMessageMinAggregateOutputType | null
    _max: InboxMessageMaxAggregateOutputType | null
  }

  type GetInboxMessageGroupByPayload<T extends InboxMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InboxMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InboxMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InboxMessageGroupByOutputType[P]>
            : GetScalarType<T[P], InboxMessageGroupByOutputType[P]>
        }
      >
    >


  export type InboxMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    conversationId?: boolean
    senderType?: boolean
    senderUserId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversation?: boolean | InboxConversationDefaultArgs<ExtArgs>
    senderUser?: boolean | InboxMessage$senderUserArgs<ExtArgs>
  }, ExtArgs["result"]["inboxMessage"]>

  export type InboxMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    conversationId?: boolean
    senderType?: boolean
    senderUserId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversation?: boolean | InboxConversationDefaultArgs<ExtArgs>
    senderUser?: boolean | InboxMessage$senderUserArgs<ExtArgs>
  }, ExtArgs["result"]["inboxMessage"]>

  export type InboxMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    conversationId?: boolean
    senderType?: boolean
    senderUserId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversation?: boolean | InboxConversationDefaultArgs<ExtArgs>
    senderUser?: boolean | InboxMessage$senderUserArgs<ExtArgs>
  }, ExtArgs["result"]["inboxMessage"]>

  export type InboxMessageSelectScalar = {
    id?: boolean
    companyId?: boolean
    conversationId?: boolean
    senderType?: boolean
    senderUserId?: boolean
    content?: boolean
    attachments?: boolean
    status?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InboxMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "conversationId" | "senderType" | "senderUserId" | "content" | "attachments" | "status" | "sentAt" | "createdAt" | "updatedAt", ExtArgs["result"]["inboxMessage"]>
  export type InboxMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversation?: boolean | InboxConversationDefaultArgs<ExtArgs>
    senderUser?: boolean | InboxMessage$senderUserArgs<ExtArgs>
  }
  export type InboxMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversation?: boolean | InboxConversationDefaultArgs<ExtArgs>
    senderUser?: boolean | InboxMessage$senderUserArgs<ExtArgs>
  }
  export type InboxMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    conversation?: boolean | InboxConversationDefaultArgs<ExtArgs>
    senderUser?: boolean | InboxMessage$senderUserArgs<ExtArgs>
  }

  export type $InboxMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InboxMessage"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      conversation: Prisma.$InboxConversationPayload<ExtArgs>
      senderUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: number
      conversationId: string
      senderType: $Enums.InboxMessageSenderType
      senderUserId: number | null
      content: string
      attachments: Prisma.JsonValue | null
      status: $Enums.InboxMessageStatus
      sentAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inboxMessage"]>
    composites: {}
  }

  type InboxMessageGetPayload<S extends boolean | null | undefined | InboxMessageDefaultArgs> = $Result.GetResult<Prisma.$InboxMessagePayload, S>

  type InboxMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InboxMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InboxMessageCountAggregateInputType | true
    }

  export interface InboxMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InboxMessage'], meta: { name: 'InboxMessage' } }
    /**
     * Find zero or one InboxMessage that matches the filter.
     * @param {InboxMessageFindUniqueArgs} args - Arguments to find a InboxMessage
     * @example
     * // Get one InboxMessage
     * const inboxMessage = await prisma.inboxMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InboxMessageFindUniqueArgs>(args: SelectSubset<T, InboxMessageFindUniqueArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InboxMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InboxMessageFindUniqueOrThrowArgs} args - Arguments to find a InboxMessage
     * @example
     * // Get one InboxMessage
     * const inboxMessage = await prisma.inboxMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InboxMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, InboxMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InboxMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageFindFirstArgs} args - Arguments to find a InboxMessage
     * @example
     * // Get one InboxMessage
     * const inboxMessage = await prisma.inboxMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InboxMessageFindFirstArgs>(args?: SelectSubset<T, InboxMessageFindFirstArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InboxMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageFindFirstOrThrowArgs} args - Arguments to find a InboxMessage
     * @example
     * // Get one InboxMessage
     * const inboxMessage = await prisma.inboxMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InboxMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, InboxMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InboxMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InboxMessages
     * const inboxMessages = await prisma.inboxMessage.findMany()
     * 
     * // Get first 10 InboxMessages
     * const inboxMessages = await prisma.inboxMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inboxMessageWithIdOnly = await prisma.inboxMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InboxMessageFindManyArgs>(args?: SelectSubset<T, InboxMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InboxMessage.
     * @param {InboxMessageCreateArgs} args - Arguments to create a InboxMessage.
     * @example
     * // Create one InboxMessage
     * const InboxMessage = await prisma.inboxMessage.create({
     *   data: {
     *     // ... data to create a InboxMessage
     *   }
     * })
     * 
     */
    create<T extends InboxMessageCreateArgs>(args: SelectSubset<T, InboxMessageCreateArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InboxMessages.
     * @param {InboxMessageCreateManyArgs} args - Arguments to create many InboxMessages.
     * @example
     * // Create many InboxMessages
     * const inboxMessage = await prisma.inboxMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InboxMessageCreateManyArgs>(args?: SelectSubset<T, InboxMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InboxMessages and returns the data saved in the database.
     * @param {InboxMessageCreateManyAndReturnArgs} args - Arguments to create many InboxMessages.
     * @example
     * // Create many InboxMessages
     * const inboxMessage = await prisma.inboxMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InboxMessages and only return the `id`
     * const inboxMessageWithIdOnly = await prisma.inboxMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InboxMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, InboxMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InboxMessage.
     * @param {InboxMessageDeleteArgs} args - Arguments to delete one InboxMessage.
     * @example
     * // Delete one InboxMessage
     * const InboxMessage = await prisma.inboxMessage.delete({
     *   where: {
     *     // ... filter to delete one InboxMessage
     *   }
     * })
     * 
     */
    delete<T extends InboxMessageDeleteArgs>(args: SelectSubset<T, InboxMessageDeleteArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InboxMessage.
     * @param {InboxMessageUpdateArgs} args - Arguments to update one InboxMessage.
     * @example
     * // Update one InboxMessage
     * const inboxMessage = await prisma.inboxMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InboxMessageUpdateArgs>(args: SelectSubset<T, InboxMessageUpdateArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InboxMessages.
     * @param {InboxMessageDeleteManyArgs} args - Arguments to filter InboxMessages to delete.
     * @example
     * // Delete a few InboxMessages
     * const { count } = await prisma.inboxMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InboxMessageDeleteManyArgs>(args?: SelectSubset<T, InboxMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InboxMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InboxMessages
     * const inboxMessage = await prisma.inboxMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InboxMessageUpdateManyArgs>(args: SelectSubset<T, InboxMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InboxMessages and returns the data updated in the database.
     * @param {InboxMessageUpdateManyAndReturnArgs} args - Arguments to update many InboxMessages.
     * @example
     * // Update many InboxMessages
     * const inboxMessage = await prisma.inboxMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InboxMessages and only return the `id`
     * const inboxMessageWithIdOnly = await prisma.inboxMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InboxMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, InboxMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InboxMessage.
     * @param {InboxMessageUpsertArgs} args - Arguments to update or create a InboxMessage.
     * @example
     * // Update or create a InboxMessage
     * const inboxMessage = await prisma.inboxMessage.upsert({
     *   create: {
     *     // ... data to create a InboxMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InboxMessage we want to update
     *   }
     * })
     */
    upsert<T extends InboxMessageUpsertArgs>(args: SelectSubset<T, InboxMessageUpsertArgs<ExtArgs>>): Prisma__InboxMessageClient<$Result.GetResult<Prisma.$InboxMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InboxMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageCountArgs} args - Arguments to filter InboxMessages to count.
     * @example
     * // Count the number of InboxMessages
     * const count = await prisma.inboxMessage.count({
     *   where: {
     *     // ... the filter for the InboxMessages we want to count
     *   }
     * })
    **/
    count<T extends InboxMessageCountArgs>(
      args?: Subset<T, InboxMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InboxMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InboxMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InboxMessageAggregateArgs>(args: Subset<T, InboxMessageAggregateArgs>): Prisma.PrismaPromise<GetInboxMessageAggregateType<T>>

    /**
     * Group by InboxMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InboxMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InboxMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InboxMessageGroupByArgs['orderBy'] }
        : { orderBy?: InboxMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InboxMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInboxMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InboxMessage model
   */
  readonly fields: InboxMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InboxMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InboxMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    conversation<T extends InboxConversationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InboxConversationDefaultArgs<ExtArgs>>): Prisma__InboxConversationClient<$Result.GetResult<Prisma.$InboxConversationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    senderUser<T extends InboxMessage$senderUserArgs<ExtArgs> = {}>(args?: Subset<T, InboxMessage$senderUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InboxMessage model
   */
  interface InboxMessageFieldRefs {
    readonly id: FieldRef<"InboxMessage", 'String'>
    readonly companyId: FieldRef<"InboxMessage", 'Int'>
    readonly conversationId: FieldRef<"InboxMessage", 'String'>
    readonly senderType: FieldRef<"InboxMessage", 'InboxMessageSenderType'>
    readonly senderUserId: FieldRef<"InboxMessage", 'Int'>
    readonly content: FieldRef<"InboxMessage", 'String'>
    readonly attachments: FieldRef<"InboxMessage", 'Json'>
    readonly status: FieldRef<"InboxMessage", 'InboxMessageStatus'>
    readonly sentAt: FieldRef<"InboxMessage", 'DateTime'>
    readonly createdAt: FieldRef<"InboxMessage", 'DateTime'>
    readonly updatedAt: FieldRef<"InboxMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InboxMessage findUnique
   */
  export type InboxMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * Filter, which InboxMessage to fetch.
     */
    where: InboxMessageWhereUniqueInput
  }

  /**
   * InboxMessage findUniqueOrThrow
   */
  export type InboxMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * Filter, which InboxMessage to fetch.
     */
    where: InboxMessageWhereUniqueInput
  }

  /**
   * InboxMessage findFirst
   */
  export type InboxMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * Filter, which InboxMessage to fetch.
     */
    where?: InboxMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxMessages to fetch.
     */
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InboxMessages.
     */
    cursor?: InboxMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InboxMessages.
     */
    distinct?: InboxMessageScalarFieldEnum | InboxMessageScalarFieldEnum[]
  }

  /**
   * InboxMessage findFirstOrThrow
   */
  export type InboxMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * Filter, which InboxMessage to fetch.
     */
    where?: InboxMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxMessages to fetch.
     */
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InboxMessages.
     */
    cursor?: InboxMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InboxMessages.
     */
    distinct?: InboxMessageScalarFieldEnum | InboxMessageScalarFieldEnum[]
  }

  /**
   * InboxMessage findMany
   */
  export type InboxMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * Filter, which InboxMessages to fetch.
     */
    where?: InboxMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InboxMessages to fetch.
     */
    orderBy?: InboxMessageOrderByWithRelationInput | InboxMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InboxMessages.
     */
    cursor?: InboxMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InboxMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InboxMessages.
     */
    skip?: number
    distinct?: InboxMessageScalarFieldEnum | InboxMessageScalarFieldEnum[]
  }

  /**
   * InboxMessage create
   */
  export type InboxMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a InboxMessage.
     */
    data: XOR<InboxMessageCreateInput, InboxMessageUncheckedCreateInput>
  }

  /**
   * InboxMessage createMany
   */
  export type InboxMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InboxMessages.
     */
    data: InboxMessageCreateManyInput | InboxMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InboxMessage createManyAndReturn
   */
  export type InboxMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * The data used to create many InboxMessages.
     */
    data: InboxMessageCreateManyInput | InboxMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InboxMessage update
   */
  export type InboxMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a InboxMessage.
     */
    data: XOR<InboxMessageUpdateInput, InboxMessageUncheckedUpdateInput>
    /**
     * Choose, which InboxMessage to update.
     */
    where: InboxMessageWhereUniqueInput
  }

  /**
   * InboxMessage updateMany
   */
  export type InboxMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InboxMessages.
     */
    data: XOR<InboxMessageUpdateManyMutationInput, InboxMessageUncheckedUpdateManyInput>
    /**
     * Filter which InboxMessages to update
     */
    where?: InboxMessageWhereInput
    /**
     * Limit how many InboxMessages to update.
     */
    limit?: number
  }

  /**
   * InboxMessage updateManyAndReturn
   */
  export type InboxMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * The data used to update InboxMessages.
     */
    data: XOR<InboxMessageUpdateManyMutationInput, InboxMessageUncheckedUpdateManyInput>
    /**
     * Filter which InboxMessages to update
     */
    where?: InboxMessageWhereInput
    /**
     * Limit how many InboxMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InboxMessage upsert
   */
  export type InboxMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the InboxMessage to update in case it exists.
     */
    where: InboxMessageWhereUniqueInput
    /**
     * In case the InboxMessage found by the `where` argument doesn't exist, create a new InboxMessage with this data.
     */
    create: XOR<InboxMessageCreateInput, InboxMessageUncheckedCreateInput>
    /**
     * In case the InboxMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InboxMessageUpdateInput, InboxMessageUncheckedUpdateInput>
  }

  /**
   * InboxMessage delete
   */
  export type InboxMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
    /**
     * Filter which InboxMessage to delete.
     */
    where: InboxMessageWhereUniqueInput
  }

  /**
   * InboxMessage deleteMany
   */
  export type InboxMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InboxMessages to delete
     */
    where?: InboxMessageWhereInput
    /**
     * Limit how many InboxMessages to delete.
     */
    limit?: number
  }

  /**
   * InboxMessage.senderUser
   */
  export type InboxMessage$senderUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * InboxMessage without action
   */
  export type InboxMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InboxMessage
     */
    select?: InboxMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InboxMessage
     */
    omit?: InboxMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InboxMessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    provider: 'provider',
    password: 'password',
    resetPasswordToken: 'resetPasswordToken',
    confirmationToken: 'confirmationToken',
    confirmed: 'confirmed',
    blocked: 'blocked',
    phone: 'phone',
    firstName: 'firstName',
    lastName: 'lastName',
    position: 'position',
    companyName: 'companyName',
    country: 'country',
    linkedinUrl: 'linkedinUrl',
    twitterUrl: 'twitterUrl',
    websiteUrl: 'websiteUrl',
    githubUrl: 'githubUrl',
    avatarUrl: 'avatarUrl',
    language: 'language',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    avatarId: 'avatarId',
    idProvider: 'idProvider',
    resetPasswordExpires: 'resetPasswordExpires',
    theme: 'theme',
    defaultCompanyId: 'defaultCompanyId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    publicId: 'publicId',
    format: 'format',
    version: 'version',
    mimeType: 'mimeType',
    size: 'size',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    tokenApi: 'tokenApi',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const KnowledgeItemScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    type: 'type',
    title: 'title',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type KnowledgeItemScalarFieldEnum = (typeof KnowledgeItemScalarFieldEnum)[keyof typeof KnowledgeItemScalarFieldEnum]


  export const QuickAnswerScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    title: 'title',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type QuickAnswerScalarFieldEnum = (typeof QuickAnswerScalarFieldEnum)[keyof typeof QuickAnswerScalarFieldEnum]


  export const AiTemplateScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    content: 'content',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById'
  };

  export type AiTemplateScalarFieldEnum = (typeof AiTemplateScalarFieldEnum)[keyof typeof AiTemplateScalarFieldEnum]


  export const AiTemplateOptionScalarFieldEnum: {
    id: 'id',
    templateId: 'templateId',
    label: 'label',
    value: 'value',
    createdAt: 'createdAt'
  };

  export type AiTemplateOptionScalarFieldEnum = (typeof AiTemplateOptionScalarFieldEnum)[keyof typeof AiTemplateOptionScalarFieldEnum]


  export const CompanyMemberScalarFieldEnum: {
    id: 'id',
    isAdmin: 'isAdmin',
    canPost: 'canPost',
    canApprove: 'canApprove',
    isOwner: 'isOwner',
    companyMemberStatus: 'companyMemberStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    companyId: 'companyId'
  };

  export type CompanyMemberScalarFieldEnum = (typeof CompanyMemberScalarFieldEnum)[keyof typeof CompanyMemberScalarFieldEnum]


  export const SubscriptionPlanScalarFieldEnum: {
    id: 'id',
    planType: 'planType',
    stripeProductId: 'stripeProductId',
    stripePriceIdMonthly: 'stripePriceIdMonthly',
    stripePriceIdYearly: 'stripePriceIdYearly',
    priceMonthly: 'priceMonthly',
    priceYearly: 'priceYearly',
    currency: 'currency',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionPlanScalarFieldEnum = (typeof SubscriptionPlanScalarFieldEnum)[keyof typeof SubscriptionPlanScalarFieldEnum]


  export const CustomerSubscriptionScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    planId: 'planId',
    status: 'status',
    billingInterval: 'billingInterval',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    cancellationDetails: 'cancellationDetails',
    currentPeriodStart: 'currentPeriodStart',
    currentPeriodEnd: 'currentPeriodEnd',
    cancelAtPeriodEnd: 'cancelAtPeriodEnd',
    trialStart: 'trialStart',
    trialEnd: 'trialEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerSubscriptionScalarFieldEnum = (typeof CustomerSubscriptionScalarFieldEnum)[keyof typeof CustomerSubscriptionScalarFieldEnum]


  export const UsageTrackingScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    subscriptionId: 'subscriptionId',
    metricType: 'metricType',
    currentUsage: 'currentUsage',
    limitValue: 'limitValue',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    lastResetDate: 'lastResetDate',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt'
  };

  export type UsageTrackingScalarFieldEnum = (typeof UsageTrackingScalarFieldEnum)[keyof typeof UsageTrackingScalarFieldEnum]


  export const CompanySettingsScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    emailNotifications: 'emailNotifications',
    newMessageAlerts: 'newMessageAlerts',
    dailyReports: 'dailyReports',
    autoReply: 'autoReply',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanySettingsScalarFieldEnum = (typeof CompanySettingsScalarFieldEnum)[keyof typeof CompanySettingsScalarFieldEnum]


  export const CompanyWhatsappNumberScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    displayName: 'displayName',
    phoneNumber: 'phoneNumber',
    isConnected: 'isConnected',
    messagesThisMonth: 'messagesThisMonth',
    lastSyncedAt: 'lastSyncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyWhatsappNumberScalarFieldEnum = (typeof CompanyWhatsappNumberScalarFieldEnum)[keyof typeof CompanyWhatsappNumberScalarFieldEnum]


  export const InboxCustomerScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    phone: 'phone',
    email: 'email',
    address: 'address',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InboxCustomerScalarFieldEnum = (typeof InboxCustomerScalarFieldEnum)[keyof typeof InboxCustomerScalarFieldEnum]


  export const InboxConversationScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    customerId: 'customerId',
    subject: 'subject',
    lastMessagePreview: 'lastMessagePreview',
    lastMessageSentAt: 'lastMessageSentAt',
    unreadCount: 'unreadCount',
    priority: 'priority',
    satisfactionScore: 'satisfactionScore',
    tags: 'tags',
    assignedToId: 'assignedToId',
    isArchived: 'isArchived',
    archivedAt: 'archivedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InboxConversationScalarFieldEnum = (typeof InboxConversationScalarFieldEnum)[keyof typeof InboxConversationScalarFieldEnum]


  export const InboxMessageScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    conversationId: 'conversationId',
    senderType: 'senderType',
    senderUserId: 'senderUserId',
    content: 'content',
    attachments: 'attachments',
    status: 'status',
    sentAt: 'sentAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InboxMessageScalarFieldEnum = (typeof InboxMessageScalarFieldEnum)[keyof typeof InboxMessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Provider'
   */
  export type EnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider'>
    


  /**
   * Reference to a field of type 'Provider[]'
   */
  export type ListEnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Language'
   */
  export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


  /**
   * Reference to a field of type 'Language[]'
   */
  export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Theme'
   */
  export type EnumThemeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Theme'>
    


  /**
   * Reference to a field of type 'Theme[]'
   */
  export type ListEnumThemeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Theme[]'>
    


  /**
   * Reference to a field of type 'KnowledgeItemType'
   */
  export type EnumKnowledgeItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KnowledgeItemType'>
    


  /**
   * Reference to a field of type 'KnowledgeItemType[]'
   */
  export type ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KnowledgeItemType[]'>
    


  /**
   * Reference to a field of type 'AiTemplateCategory'
   */
  export type EnumAiTemplateCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AiTemplateCategory'>
    


  /**
   * Reference to a field of type 'AiTemplateCategory[]'
   */
  export type ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AiTemplateCategory[]'>
    


  /**
   * Reference to a field of type 'CompanyMemberStatus'
   */
  export type EnumCompanyMemberStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyMemberStatus'>
    


  /**
   * Reference to a field of type 'CompanyMemberStatus[]'
   */
  export type ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyMemberStatus[]'>
    


  /**
   * Reference to a field of type 'PlanType'
   */
  export type EnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType'>
    


  /**
   * Reference to a field of type 'PlanType[]'
   */
  export type ListEnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus'
   */
  export type EnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus'>
    


  /**
   * Reference to a field of type 'SubscriptionStatus[]'
   */
  export type ListEnumSubscriptionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SubscriptionStatus[]'>
    


  /**
   * Reference to a field of type 'BillingInterval'
   */
  export type EnumBillingIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingInterval'>
    


  /**
   * Reference to a field of type 'BillingInterval[]'
   */
  export type ListEnumBillingIntervalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BillingInterval[]'>
    


  /**
   * Reference to a field of type 'UsageMetricType'
   */
  export type EnumUsageMetricTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UsageMetricType'>
    


  /**
   * Reference to a field of type 'UsageMetricType[]'
   */
  export type ListEnumUsageMetricTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UsageMetricType[]'>
    


  /**
   * Reference to a field of type 'InboxConversationPriority'
   */
  export type EnumInboxConversationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InboxConversationPriority'>
    


  /**
   * Reference to a field of type 'InboxConversationPriority[]'
   */
  export type ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InboxConversationPriority[]'>
    


  /**
   * Reference to a field of type 'InboxMessageSenderType'
   */
  export type EnumInboxMessageSenderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InboxMessageSenderType'>
    


  /**
   * Reference to a field of type 'InboxMessageSenderType[]'
   */
  export type ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InboxMessageSenderType[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'InboxMessageStatus'
   */
  export type EnumInboxMessageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InboxMessageStatus'>
    


  /**
   * Reference to a field of type 'InboxMessageStatus[]'
   */
  export type ListEnumInboxMessageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InboxMessageStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    provider?: EnumProviderFilter<"User"> | $Enums.Provider
    password?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    confirmationToken?: StringNullableFilter<"User"> | string | null
    confirmed?: BoolNullableFilter<"User"> | boolean | null
    blocked?: BoolNullableFilter<"User"> | boolean | null
    phone?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    companyName?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    linkedinUrl?: StringNullableFilter<"User"> | string | null
    twitterUrl?: StringNullableFilter<"User"> | string | null
    websiteUrl?: StringNullableFilter<"User"> | string | null
    githubUrl?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: EnumLanguageFilter<"User"> | $Enums.Language
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarId?: StringNullableFilter<"User"> | string | null
    idProvider?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    defaultCompanyId?: IntNullableFilter<"User"> | number | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    companyMembers?: CompanyMemberListRelationFilter
    avatar?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    files?: FileListRelationFilter
    knowledgeItems?: KnowledgeItemListRelationFilter
    quickAnswers?: QuickAnswerListRelationFilter
    aiTemplates?: AiTemplateListRelationFilter
    assignedInboxConversations?: InboxConversationListRelationFilter
    inboxMessages?: InboxMessageListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    confirmationToken?: SortOrderInput | SortOrder
    confirmed?: SortOrderInput | SortOrder
    blocked?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    twitterUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    githubUrl?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrderInput | SortOrder
    idProvider?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    theme?: SortOrder
    defaultCompanyId?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    companyMembers?: CompanyMemberOrderByRelationAggregateInput
    avatar?: FileOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
    files?: FileOrderByRelationAggregateInput
    knowledgeItems?: KnowledgeItemOrderByRelationAggregateInput
    quickAnswers?: QuickAnswerOrderByRelationAggregateInput
    aiTemplates?: AiTemplateOrderByRelationAggregateInput
    assignedInboxConversations?: InboxConversationOrderByRelationAggregateInput
    inboxMessages?: InboxMessageOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    provider?: EnumProviderFilter<"User"> | $Enums.Provider
    password?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    confirmationToken?: StringNullableFilter<"User"> | string | null
    confirmed?: BoolNullableFilter<"User"> | boolean | null
    blocked?: BoolNullableFilter<"User"> | boolean | null
    phone?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    companyName?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    linkedinUrl?: StringNullableFilter<"User"> | string | null
    twitterUrl?: StringNullableFilter<"User"> | string | null
    websiteUrl?: StringNullableFilter<"User"> | string | null
    githubUrl?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: EnumLanguageFilter<"User"> | $Enums.Language
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarId?: StringNullableFilter<"User"> | string | null
    idProvider?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    defaultCompanyId?: IntNullableFilter<"User"> | number | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    companyMembers?: CompanyMemberListRelationFilter
    avatar?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    company?: XOR<CompanyNullableScalarRelationFilter, CompanyWhereInput> | null
    files?: FileListRelationFilter
    knowledgeItems?: KnowledgeItemListRelationFilter
    quickAnswers?: QuickAnswerListRelationFilter
    aiTemplates?: AiTemplateListRelationFilter
    assignedInboxConversations?: InboxConversationListRelationFilter
    inboxMessages?: InboxMessageListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    confirmationToken?: SortOrderInput | SortOrder
    confirmed?: SortOrderInput | SortOrder
    blocked?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    linkedinUrl?: SortOrderInput | SortOrder
    twitterUrl?: SortOrderInput | SortOrder
    websiteUrl?: SortOrderInput | SortOrder
    githubUrl?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrderInput | SortOrder
    idProvider?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    theme?: SortOrder
    defaultCompanyId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    provider?: EnumProviderWithAggregatesFilter<"User"> | $Enums.Provider
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    confirmationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    confirmed?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    blocked?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    position?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyName?: StringNullableWithAggregatesFilter<"User"> | string | null
    country?: StringNullableWithAggregatesFilter<"User"> | string | null
    linkedinUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    twitterUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    websiteUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    githubUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    language?: EnumLanguageWithAggregatesFilter<"User"> | $Enums.Language
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    avatarId?: StringNullableWithAggregatesFilter<"User"> | string | null
    idProvider?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    theme?: EnumThemeWithAggregatesFilter<"User"> | $Enums.Theme
    defaultCompanyId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    publicId?: StringNullableFilter<"File"> | string | null
    format?: StringNullableFilter<"File"> | string | null
    version?: StringNullableFilter<"File"> | string | null
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    userId?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    avatarFor?: UserListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    mimeType?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarFor?: UserOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    publicId?: StringNullableFilter<"File"> | string | null
    format?: StringNullableFilter<"File"> | string | null
    version?: StringNullableFilter<"File"> | string | null
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    userId?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    avatarFor?: UserListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    mimeType?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    name?: StringWithAggregatesFilter<"File"> | string
    url?: StringWithAggregatesFilter<"File"> | string
    publicId?: StringNullableWithAggregatesFilter<"File"> | string | null
    format?: StringNullableWithAggregatesFilter<"File"> | string | null
    version?: StringNullableWithAggregatesFilter<"File"> | string | null
    mimeType?: StringNullableWithAggregatesFilter<"File"> | string | null
    size?: IntNullableWithAggregatesFilter<"File"> | number | null
    userId?: IntNullableWithAggregatesFilter<"File"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: IntWithAggregatesFilter<"Account"> | number
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: IntFilter<"Company"> | number
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    tokenApi?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    members?: CompanyMemberListRelationFilter
    user?: UserListRelationFilter
    CustomerSubscription?: CustomerSubscriptionListRelationFilter
    UsageTracking?: UsageTrackingListRelationFilter
    knowledgeItems?: KnowledgeItemListRelationFilter
    quickAnswers?: QuickAnswerListRelationFilter
    aiTemplates?: AiTemplateListRelationFilter
    inboxCustomers?: InboxCustomerListRelationFilter
    inboxConversations?: InboxConversationListRelationFilter
    inboxMessages?: InboxMessageListRelationFilter
    settings?: XOR<CompanySettingsNullableScalarRelationFilter, CompanySettingsWhereInput> | null
    whatsappNumbers?: CompanyWhatsappNumberListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    tokenApi?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: CompanyMemberOrderByRelationAggregateInput
    user?: UserOrderByRelationAggregateInput
    CustomerSubscription?: CustomerSubscriptionOrderByRelationAggregateInput
    UsageTracking?: UsageTrackingOrderByRelationAggregateInput
    knowledgeItems?: KnowledgeItemOrderByRelationAggregateInput
    quickAnswers?: QuickAnswerOrderByRelationAggregateInput
    aiTemplates?: AiTemplateOrderByRelationAggregateInput
    inboxCustomers?: InboxCustomerOrderByRelationAggregateInput
    inboxConversations?: InboxConversationOrderByRelationAggregateInput
    inboxMessages?: InboxMessageOrderByRelationAggregateInput
    settings?: CompanySettingsOrderByWithRelationInput
    whatsappNumbers?: CompanyWhatsappNumberOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    tokenApi?: StringNullableFilter<"Company"> | string | null
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    members?: CompanyMemberListRelationFilter
    user?: UserListRelationFilter
    CustomerSubscription?: CustomerSubscriptionListRelationFilter
    UsageTracking?: UsageTrackingListRelationFilter
    knowledgeItems?: KnowledgeItemListRelationFilter
    quickAnswers?: QuickAnswerListRelationFilter
    aiTemplates?: AiTemplateListRelationFilter
    inboxCustomers?: InboxCustomerListRelationFilter
    inboxConversations?: InboxConversationListRelationFilter
    inboxMessages?: InboxMessageListRelationFilter
    settings?: XOR<CompanySettingsNullableScalarRelationFilter, CompanySettingsWhereInput> | null
    whatsappNumbers?: CompanyWhatsappNumberListRelationFilter
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    tokenApi?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Company"> | number
    name?: StringWithAggregatesFilter<"Company"> | string
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    tokenApi?: StringNullableWithAggregatesFilter<"Company"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type KnowledgeItemWhereInput = {
    AND?: KnowledgeItemWhereInput | KnowledgeItemWhereInput[]
    OR?: KnowledgeItemWhereInput[]
    NOT?: KnowledgeItemWhereInput | KnowledgeItemWhereInput[]
    id?: StringFilter<"KnowledgeItem"> | string
    companyId?: IntFilter<"KnowledgeItem"> | number
    type?: EnumKnowledgeItemTypeFilter<"KnowledgeItem"> | $Enums.KnowledgeItemType
    title?: StringFilter<"KnowledgeItem"> | string
    content?: StringFilter<"KnowledgeItem"> | string
    createdAt?: DateTimeFilter<"KnowledgeItem"> | Date | string
    updatedAt?: DateTimeFilter<"KnowledgeItem"> | Date | string
    createdById?: IntNullableFilter<"KnowledgeItem"> | number | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type KnowledgeItemOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type KnowledgeItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: KnowledgeItemWhereInput | KnowledgeItemWhereInput[]
    OR?: KnowledgeItemWhereInput[]
    NOT?: KnowledgeItemWhereInput | KnowledgeItemWhereInput[]
    companyId?: IntFilter<"KnowledgeItem"> | number
    type?: EnumKnowledgeItemTypeFilter<"KnowledgeItem"> | $Enums.KnowledgeItemType
    title?: StringFilter<"KnowledgeItem"> | string
    content?: StringFilter<"KnowledgeItem"> | string
    createdAt?: DateTimeFilter<"KnowledgeItem"> | Date | string
    updatedAt?: DateTimeFilter<"KnowledgeItem"> | Date | string
    createdById?: IntNullableFilter<"KnowledgeItem"> | number | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type KnowledgeItemOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: KnowledgeItemCountOrderByAggregateInput
    _avg?: KnowledgeItemAvgOrderByAggregateInput
    _max?: KnowledgeItemMaxOrderByAggregateInput
    _min?: KnowledgeItemMinOrderByAggregateInput
    _sum?: KnowledgeItemSumOrderByAggregateInput
  }

  export type KnowledgeItemScalarWhereWithAggregatesInput = {
    AND?: KnowledgeItemScalarWhereWithAggregatesInput | KnowledgeItemScalarWhereWithAggregatesInput[]
    OR?: KnowledgeItemScalarWhereWithAggregatesInput[]
    NOT?: KnowledgeItemScalarWhereWithAggregatesInput | KnowledgeItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KnowledgeItem"> | string
    companyId?: IntWithAggregatesFilter<"KnowledgeItem"> | number
    type?: EnumKnowledgeItemTypeWithAggregatesFilter<"KnowledgeItem"> | $Enums.KnowledgeItemType
    title?: StringWithAggregatesFilter<"KnowledgeItem"> | string
    content?: StringWithAggregatesFilter<"KnowledgeItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"KnowledgeItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KnowledgeItem"> | Date | string
    createdById?: IntNullableWithAggregatesFilter<"KnowledgeItem"> | number | null
  }

  export type QuickAnswerWhereInput = {
    AND?: QuickAnswerWhereInput | QuickAnswerWhereInput[]
    OR?: QuickAnswerWhereInput[]
    NOT?: QuickAnswerWhereInput | QuickAnswerWhereInput[]
    id?: StringFilter<"QuickAnswer"> | string
    companyId?: IntFilter<"QuickAnswer"> | number
    title?: StringFilter<"QuickAnswer"> | string
    content?: StringFilter<"QuickAnswer"> | string
    createdAt?: DateTimeFilter<"QuickAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"QuickAnswer"> | Date | string
    createdById?: IntNullableFilter<"QuickAnswer"> | number | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type QuickAnswerOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type QuickAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuickAnswerWhereInput | QuickAnswerWhereInput[]
    OR?: QuickAnswerWhereInput[]
    NOT?: QuickAnswerWhereInput | QuickAnswerWhereInput[]
    companyId?: IntFilter<"QuickAnswer"> | number
    title?: StringFilter<"QuickAnswer"> | string
    content?: StringFilter<"QuickAnswer"> | string
    createdAt?: DateTimeFilter<"QuickAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"QuickAnswer"> | Date | string
    createdById?: IntNullableFilter<"QuickAnswer"> | number | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type QuickAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: QuickAnswerCountOrderByAggregateInput
    _avg?: QuickAnswerAvgOrderByAggregateInput
    _max?: QuickAnswerMaxOrderByAggregateInput
    _min?: QuickAnswerMinOrderByAggregateInput
    _sum?: QuickAnswerSumOrderByAggregateInput
  }

  export type QuickAnswerScalarWhereWithAggregatesInput = {
    AND?: QuickAnswerScalarWhereWithAggregatesInput | QuickAnswerScalarWhereWithAggregatesInput[]
    OR?: QuickAnswerScalarWhereWithAggregatesInput[]
    NOT?: QuickAnswerScalarWhereWithAggregatesInput | QuickAnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuickAnswer"> | string
    companyId?: IntWithAggregatesFilter<"QuickAnswer"> | number
    title?: StringWithAggregatesFilter<"QuickAnswer"> | string
    content?: StringWithAggregatesFilter<"QuickAnswer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"QuickAnswer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuickAnswer"> | Date | string
    createdById?: IntNullableWithAggregatesFilter<"QuickAnswer"> | number | null
  }

  export type AiTemplateWhereInput = {
    AND?: AiTemplateWhereInput | AiTemplateWhereInput[]
    OR?: AiTemplateWhereInput[]
    NOT?: AiTemplateWhereInput | AiTemplateWhereInput[]
    id?: StringFilter<"AiTemplate"> | string
    companyId?: IntFilter<"AiTemplate"> | number
    name?: StringFilter<"AiTemplate"> | string
    content?: StringFilter<"AiTemplate"> | string
    category?: EnumAiTemplateCategoryFilter<"AiTemplate"> | $Enums.AiTemplateCategory
    createdAt?: DateTimeFilter<"AiTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"AiTemplate"> | Date | string
    createdById?: IntNullableFilter<"AiTemplate"> | number | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    options?: AiTemplateOptionListRelationFilter
  }

  export type AiTemplateOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    options?: AiTemplateOptionOrderByRelationAggregateInput
  }

  export type AiTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AiTemplateWhereInput | AiTemplateWhereInput[]
    OR?: AiTemplateWhereInput[]
    NOT?: AiTemplateWhereInput | AiTemplateWhereInput[]
    companyId?: IntFilter<"AiTemplate"> | number
    name?: StringFilter<"AiTemplate"> | string
    content?: StringFilter<"AiTemplate"> | string
    category?: EnumAiTemplateCategoryFilter<"AiTemplate"> | $Enums.AiTemplateCategory
    createdAt?: DateTimeFilter<"AiTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"AiTemplate"> | Date | string
    createdById?: IntNullableFilter<"AiTemplate"> | number | null
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    options?: AiTemplateOptionListRelationFilter
  }, "id">

  export type AiTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    _count?: AiTemplateCountOrderByAggregateInput
    _avg?: AiTemplateAvgOrderByAggregateInput
    _max?: AiTemplateMaxOrderByAggregateInput
    _min?: AiTemplateMinOrderByAggregateInput
    _sum?: AiTemplateSumOrderByAggregateInput
  }

  export type AiTemplateScalarWhereWithAggregatesInput = {
    AND?: AiTemplateScalarWhereWithAggregatesInput | AiTemplateScalarWhereWithAggregatesInput[]
    OR?: AiTemplateScalarWhereWithAggregatesInput[]
    NOT?: AiTemplateScalarWhereWithAggregatesInput | AiTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AiTemplate"> | string
    companyId?: IntWithAggregatesFilter<"AiTemplate"> | number
    name?: StringWithAggregatesFilter<"AiTemplate"> | string
    content?: StringWithAggregatesFilter<"AiTemplate"> | string
    category?: EnumAiTemplateCategoryWithAggregatesFilter<"AiTemplate"> | $Enums.AiTemplateCategory
    createdAt?: DateTimeWithAggregatesFilter<"AiTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AiTemplate"> | Date | string
    createdById?: IntNullableWithAggregatesFilter<"AiTemplate"> | number | null
  }

  export type AiTemplateOptionWhereInput = {
    AND?: AiTemplateOptionWhereInput | AiTemplateOptionWhereInput[]
    OR?: AiTemplateOptionWhereInput[]
    NOT?: AiTemplateOptionWhereInput | AiTemplateOptionWhereInput[]
    id?: StringFilter<"AiTemplateOption"> | string
    templateId?: StringFilter<"AiTemplateOption"> | string
    label?: StringFilter<"AiTemplateOption"> | string
    value?: StringFilter<"AiTemplateOption"> | string
    createdAt?: DateTimeFilter<"AiTemplateOption"> | Date | string
    template?: XOR<AiTemplateScalarRelationFilter, AiTemplateWhereInput>
  }

  export type AiTemplateOptionOrderByWithRelationInput = {
    id?: SortOrder
    templateId?: SortOrder
    label?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    template?: AiTemplateOrderByWithRelationInput
  }

  export type AiTemplateOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AiTemplateOptionWhereInput | AiTemplateOptionWhereInput[]
    OR?: AiTemplateOptionWhereInput[]
    NOT?: AiTemplateOptionWhereInput | AiTemplateOptionWhereInput[]
    templateId?: StringFilter<"AiTemplateOption"> | string
    label?: StringFilter<"AiTemplateOption"> | string
    value?: StringFilter<"AiTemplateOption"> | string
    createdAt?: DateTimeFilter<"AiTemplateOption"> | Date | string
    template?: XOR<AiTemplateScalarRelationFilter, AiTemplateWhereInput>
  }, "id">

  export type AiTemplateOptionOrderByWithAggregationInput = {
    id?: SortOrder
    templateId?: SortOrder
    label?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    _count?: AiTemplateOptionCountOrderByAggregateInput
    _max?: AiTemplateOptionMaxOrderByAggregateInput
    _min?: AiTemplateOptionMinOrderByAggregateInput
  }

  export type AiTemplateOptionScalarWhereWithAggregatesInput = {
    AND?: AiTemplateOptionScalarWhereWithAggregatesInput | AiTemplateOptionScalarWhereWithAggregatesInput[]
    OR?: AiTemplateOptionScalarWhereWithAggregatesInput[]
    NOT?: AiTemplateOptionScalarWhereWithAggregatesInput | AiTemplateOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AiTemplateOption"> | string
    templateId?: StringWithAggregatesFilter<"AiTemplateOption"> | string
    label?: StringWithAggregatesFilter<"AiTemplateOption"> | string
    value?: StringWithAggregatesFilter<"AiTemplateOption"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AiTemplateOption"> | Date | string
  }

  export type CompanyMemberWhereInput = {
    AND?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    OR?: CompanyMemberWhereInput[]
    NOT?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    id?: IntFilter<"CompanyMember"> | number
    isAdmin?: BoolFilter<"CompanyMember"> | boolean
    canPost?: BoolFilter<"CompanyMember"> | boolean
    canApprove?: BoolFilter<"CompanyMember"> | boolean
    isOwner?: BoolFilter<"CompanyMember"> | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFilter<"CompanyMember"> | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    userId?: IntFilter<"CompanyMember"> | number
    companyId?: IntFilter<"CompanyMember"> | number
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CompanyMemberOrderByWithRelationInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    companyMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    company?: CompanyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CompanyMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_companyId?: CompanyMemberUserIdCompanyIdCompoundUniqueInput
    AND?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    OR?: CompanyMemberWhereInput[]
    NOT?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    isAdmin?: BoolFilter<"CompanyMember"> | boolean
    canPost?: BoolFilter<"CompanyMember"> | boolean
    canApprove?: BoolFilter<"CompanyMember"> | boolean
    isOwner?: BoolFilter<"CompanyMember"> | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFilter<"CompanyMember"> | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    userId?: IntFilter<"CompanyMember"> | number
    companyId?: IntFilter<"CompanyMember"> | number
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_companyId">

  export type CompanyMemberOrderByWithAggregationInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    companyMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
    _count?: CompanyMemberCountOrderByAggregateInput
    _avg?: CompanyMemberAvgOrderByAggregateInput
    _max?: CompanyMemberMaxOrderByAggregateInput
    _min?: CompanyMemberMinOrderByAggregateInput
    _sum?: CompanyMemberSumOrderByAggregateInput
  }

  export type CompanyMemberScalarWhereWithAggregatesInput = {
    AND?: CompanyMemberScalarWhereWithAggregatesInput | CompanyMemberScalarWhereWithAggregatesInput[]
    OR?: CompanyMemberScalarWhereWithAggregatesInput[]
    NOT?: CompanyMemberScalarWhereWithAggregatesInput | CompanyMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompanyMember"> | number
    isAdmin?: BoolWithAggregatesFilter<"CompanyMember"> | boolean
    canPost?: BoolWithAggregatesFilter<"CompanyMember"> | boolean
    canApprove?: BoolWithAggregatesFilter<"CompanyMember"> | boolean
    isOwner?: BoolWithAggregatesFilter<"CompanyMember"> | boolean
    companyMemberStatus?: EnumCompanyMemberStatusWithAggregatesFilter<"CompanyMember"> | $Enums.CompanyMemberStatus
    createdAt?: DateTimeWithAggregatesFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyMember"> | Date | string
    userId?: IntWithAggregatesFilter<"CompanyMember"> | number
    companyId?: IntWithAggregatesFilter<"CompanyMember"> | number
  }

  export type SubscriptionPlanWhereInput = {
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    id?: StringFilter<"SubscriptionPlan"> | string
    planType?: EnumPlanTypeFilter<"SubscriptionPlan"> | $Enums.PlanType
    stripeProductId?: StringNullableFilter<"SubscriptionPlan"> | string | null
    stripePriceIdMonthly?: StringNullableFilter<"SubscriptionPlan"> | string | null
    stripePriceIdYearly?: StringNullableFilter<"SubscriptionPlan"> | string | null
    priceMonthly?: DecimalFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"SubscriptionPlan"> | string
    isActive?: BoolFilter<"SubscriptionPlan"> | boolean
    createdAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    subscriptions?: CustomerSubscriptionListRelationFilter
  }

  export type SubscriptionPlanOrderByWithRelationInput = {
    id?: SortOrder
    planType?: SortOrder
    stripeProductId?: SortOrderInput | SortOrder
    stripePriceIdMonthly?: SortOrderInput | SortOrder
    stripePriceIdYearly?: SortOrderInput | SortOrder
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptions?: CustomerSubscriptionOrderByRelationAggregateInput
  }

  export type SubscriptionPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    OR?: SubscriptionPlanWhereInput[]
    NOT?: SubscriptionPlanWhereInput | SubscriptionPlanWhereInput[]
    planType?: EnumPlanTypeFilter<"SubscriptionPlan"> | $Enums.PlanType
    stripeProductId?: StringNullableFilter<"SubscriptionPlan"> | string | null
    stripePriceIdMonthly?: StringNullableFilter<"SubscriptionPlan"> | string | null
    stripePriceIdYearly?: StringNullableFilter<"SubscriptionPlan"> | string | null
    priceMonthly?: DecimalFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"SubscriptionPlan"> | string
    isActive?: BoolFilter<"SubscriptionPlan"> | boolean
    createdAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPlan"> | Date | string
    subscriptions?: CustomerSubscriptionListRelationFilter
  }, "id">

  export type SubscriptionPlanOrderByWithAggregationInput = {
    id?: SortOrder
    planType?: SortOrder
    stripeProductId?: SortOrderInput | SortOrder
    stripePriceIdMonthly?: SortOrderInput | SortOrder
    stripePriceIdYearly?: SortOrderInput | SortOrder
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionPlanCountOrderByAggregateInput
    _avg?: SubscriptionPlanAvgOrderByAggregateInput
    _max?: SubscriptionPlanMaxOrderByAggregateInput
    _min?: SubscriptionPlanMinOrderByAggregateInput
    _sum?: SubscriptionPlanSumOrderByAggregateInput
  }

  export type SubscriptionPlanScalarWhereWithAggregatesInput = {
    AND?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    OR?: SubscriptionPlanScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionPlanScalarWhereWithAggregatesInput | SubscriptionPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    planType?: EnumPlanTypeWithAggregatesFilter<"SubscriptionPlan"> | $Enums.PlanType
    stripeProductId?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    stripePriceIdMonthly?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    stripePriceIdYearly?: StringNullableWithAggregatesFilter<"SubscriptionPlan"> | string | null
    priceMonthly?: DecimalWithAggregatesFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalWithAggregatesFilter<"SubscriptionPlan"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"SubscriptionPlan"> | string
    isActive?: BoolWithAggregatesFilter<"SubscriptionPlan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SubscriptionPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SubscriptionPlan"> | Date | string
  }

  export type CustomerSubscriptionWhereInput = {
    AND?: CustomerSubscriptionWhereInput | CustomerSubscriptionWhereInput[]
    OR?: CustomerSubscriptionWhereInput[]
    NOT?: CustomerSubscriptionWhereInput | CustomerSubscriptionWhereInput[]
    id?: StringFilter<"CustomerSubscription"> | string
    companyId?: IntFilter<"CustomerSubscription"> | number
    planId?: StringFilter<"CustomerSubscription"> | string
    status?: EnumSubscriptionStatusFilter<"CustomerSubscription"> | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFilter<"CustomerSubscription"> | $Enums.BillingInterval
    stripeCustomerId?: StringNullableFilter<"CustomerSubscription"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"CustomerSubscription"> | string | null
    cancellationDetails?: StringNullableFilter<"CustomerSubscription"> | string | null
    currentPeriodStart?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolFilter<"CustomerSubscription"> | boolean
    trialStart?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    createdAt?: DateTimeFilter<"CustomerSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerSubscription"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
    usageTracking?: UsageTrackingListRelationFilter
  }

  export type CustomerSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    billingInterval?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    cancellationDetails?: SortOrderInput | SortOrder
    currentPeriodStart?: SortOrderInput | SortOrder
    currentPeriodEnd?: SortOrderInput | SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    plan?: SubscriptionPlanOrderByWithRelationInput
    usageTracking?: UsageTrackingOrderByRelationAggregateInput
  }

  export type CustomerSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    stripeSubscriptionId?: string
    AND?: CustomerSubscriptionWhereInput | CustomerSubscriptionWhereInput[]
    OR?: CustomerSubscriptionWhereInput[]
    NOT?: CustomerSubscriptionWhereInput | CustomerSubscriptionWhereInput[]
    companyId?: IntFilter<"CustomerSubscription"> | number
    planId?: StringFilter<"CustomerSubscription"> | string
    status?: EnumSubscriptionStatusFilter<"CustomerSubscription"> | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFilter<"CustomerSubscription"> | $Enums.BillingInterval
    stripeCustomerId?: StringNullableFilter<"CustomerSubscription"> | string | null
    cancellationDetails?: StringNullableFilter<"CustomerSubscription"> | string | null
    currentPeriodStart?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolFilter<"CustomerSubscription"> | boolean
    trialStart?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    createdAt?: DateTimeFilter<"CustomerSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerSubscription"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    plan?: XOR<SubscriptionPlanScalarRelationFilter, SubscriptionPlanWhereInput>
    usageTracking?: UsageTrackingListRelationFilter
  }, "id" | "stripeSubscriptionId">

  export type CustomerSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    billingInterval?: SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    cancellationDetails?: SortOrderInput | SortOrder
    currentPeriodStart?: SortOrderInput | SortOrder
    currentPeriodEnd?: SortOrderInput | SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrderInput | SortOrder
    trialEnd?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerSubscriptionCountOrderByAggregateInput
    _avg?: CustomerSubscriptionAvgOrderByAggregateInput
    _max?: CustomerSubscriptionMaxOrderByAggregateInput
    _min?: CustomerSubscriptionMinOrderByAggregateInput
    _sum?: CustomerSubscriptionSumOrderByAggregateInput
  }

  export type CustomerSubscriptionScalarWhereWithAggregatesInput = {
    AND?: CustomerSubscriptionScalarWhereWithAggregatesInput | CustomerSubscriptionScalarWhereWithAggregatesInput[]
    OR?: CustomerSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: CustomerSubscriptionScalarWhereWithAggregatesInput | CustomerSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerSubscription"> | string
    companyId?: IntWithAggregatesFilter<"CustomerSubscription"> | number
    planId?: StringWithAggregatesFilter<"CustomerSubscription"> | string
    status?: EnumSubscriptionStatusWithAggregatesFilter<"CustomerSubscription"> | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalWithAggregatesFilter<"CustomerSubscription"> | $Enums.BillingInterval
    stripeCustomerId?: StringNullableWithAggregatesFilter<"CustomerSubscription"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"CustomerSubscription"> | string | null
    cancellationDetails?: StringNullableWithAggregatesFilter<"CustomerSubscription"> | string | null
    currentPeriodStart?: DateTimeNullableWithAggregatesFilter<"CustomerSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableWithAggregatesFilter<"CustomerSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolWithAggregatesFilter<"CustomerSubscription"> | boolean
    trialStart?: DateTimeNullableWithAggregatesFilter<"CustomerSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableWithAggregatesFilter<"CustomerSubscription"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CustomerSubscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomerSubscription"> | Date | string
  }

  export type UsageTrackingWhereInput = {
    AND?: UsageTrackingWhereInput | UsageTrackingWhereInput[]
    OR?: UsageTrackingWhereInput[]
    NOT?: UsageTrackingWhereInput | UsageTrackingWhereInput[]
    id?: StringFilter<"UsageTracking"> | string
    companyId?: IntFilter<"UsageTracking"> | number
    subscriptionId?: StringFilter<"UsageTracking"> | string
    metricType?: EnumUsageMetricTypeFilter<"UsageTracking"> | $Enums.UsageMetricType
    currentUsage?: IntFilter<"UsageTracking"> | number
    limitValue?: IntFilter<"UsageTracking"> | number
    periodStart?: DateTimeFilter<"UsageTracking"> | Date | string
    periodEnd?: DateTimeFilter<"UsageTracking"> | Date | string
    lastResetDate?: DateTimeNullableFilter<"UsageTracking"> | Date | string | null
    lastUpdated?: DateTimeFilter<"UsageTracking"> | Date | string
    createdAt?: DateTimeFilter<"UsageTracking"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    subscription?: XOR<CustomerSubscriptionScalarRelationFilter, CustomerSubscriptionWhereInput>
  }

  export type UsageTrackingOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    subscriptionId?: SortOrder
    metricType?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    lastResetDate?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    subscription?: CustomerSubscriptionOrderByWithRelationInput
  }

  export type UsageTrackingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_metricType_periodStart?: UsageTrackingCompanyIdMetricTypePeriodStartCompoundUniqueInput
    AND?: UsageTrackingWhereInput | UsageTrackingWhereInput[]
    OR?: UsageTrackingWhereInput[]
    NOT?: UsageTrackingWhereInput | UsageTrackingWhereInput[]
    companyId?: IntFilter<"UsageTracking"> | number
    subscriptionId?: StringFilter<"UsageTracking"> | string
    metricType?: EnumUsageMetricTypeFilter<"UsageTracking"> | $Enums.UsageMetricType
    currentUsage?: IntFilter<"UsageTracking"> | number
    limitValue?: IntFilter<"UsageTracking"> | number
    periodStart?: DateTimeFilter<"UsageTracking"> | Date | string
    periodEnd?: DateTimeFilter<"UsageTracking"> | Date | string
    lastResetDate?: DateTimeNullableFilter<"UsageTracking"> | Date | string | null
    lastUpdated?: DateTimeFilter<"UsageTracking"> | Date | string
    createdAt?: DateTimeFilter<"UsageTracking"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    subscription?: XOR<CustomerSubscriptionScalarRelationFilter, CustomerSubscriptionWhereInput>
  }, "id" | "companyId_metricType_periodStart">

  export type UsageTrackingOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    subscriptionId?: SortOrder
    metricType?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    lastResetDate?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    _count?: UsageTrackingCountOrderByAggregateInput
    _avg?: UsageTrackingAvgOrderByAggregateInput
    _max?: UsageTrackingMaxOrderByAggregateInput
    _min?: UsageTrackingMinOrderByAggregateInput
    _sum?: UsageTrackingSumOrderByAggregateInput
  }

  export type UsageTrackingScalarWhereWithAggregatesInput = {
    AND?: UsageTrackingScalarWhereWithAggregatesInput | UsageTrackingScalarWhereWithAggregatesInput[]
    OR?: UsageTrackingScalarWhereWithAggregatesInput[]
    NOT?: UsageTrackingScalarWhereWithAggregatesInput | UsageTrackingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UsageTracking"> | string
    companyId?: IntWithAggregatesFilter<"UsageTracking"> | number
    subscriptionId?: StringWithAggregatesFilter<"UsageTracking"> | string
    metricType?: EnumUsageMetricTypeWithAggregatesFilter<"UsageTracking"> | $Enums.UsageMetricType
    currentUsage?: IntWithAggregatesFilter<"UsageTracking"> | number
    limitValue?: IntWithAggregatesFilter<"UsageTracking"> | number
    periodStart?: DateTimeWithAggregatesFilter<"UsageTracking"> | Date | string
    periodEnd?: DateTimeWithAggregatesFilter<"UsageTracking"> | Date | string
    lastResetDate?: DateTimeNullableWithAggregatesFilter<"UsageTracking"> | Date | string | null
    lastUpdated?: DateTimeWithAggregatesFilter<"UsageTracking"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UsageTracking"> | Date | string
  }

  export type CompanySettingsWhereInput = {
    AND?: CompanySettingsWhereInput | CompanySettingsWhereInput[]
    OR?: CompanySettingsWhereInput[]
    NOT?: CompanySettingsWhereInput | CompanySettingsWhereInput[]
    id?: IntFilter<"CompanySettings"> | number
    companyId?: IntFilter<"CompanySettings"> | number
    emailNotifications?: BoolFilter<"CompanySettings"> | boolean
    newMessageAlerts?: BoolFilter<"CompanySettings"> | boolean
    dailyReports?: BoolFilter<"CompanySettings"> | boolean
    autoReply?: BoolFilter<"CompanySettings"> | boolean
    createdAt?: DateTimeFilter<"CompanySettings"> | Date | string
    updatedAt?: DateTimeFilter<"CompanySettings"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type CompanySettingsOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    emailNotifications?: SortOrder
    newMessageAlerts?: SortOrder
    dailyReports?: SortOrder
    autoReply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type CompanySettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    companyId?: number
    AND?: CompanySettingsWhereInput | CompanySettingsWhereInput[]
    OR?: CompanySettingsWhereInput[]
    NOT?: CompanySettingsWhereInput | CompanySettingsWhereInput[]
    emailNotifications?: BoolFilter<"CompanySettings"> | boolean
    newMessageAlerts?: BoolFilter<"CompanySettings"> | boolean
    dailyReports?: BoolFilter<"CompanySettings"> | boolean
    autoReply?: BoolFilter<"CompanySettings"> | boolean
    createdAt?: DateTimeFilter<"CompanySettings"> | Date | string
    updatedAt?: DateTimeFilter<"CompanySettings"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id" | "companyId">

  export type CompanySettingsOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    emailNotifications?: SortOrder
    newMessageAlerts?: SortOrder
    dailyReports?: SortOrder
    autoReply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanySettingsCountOrderByAggregateInput
    _avg?: CompanySettingsAvgOrderByAggregateInput
    _max?: CompanySettingsMaxOrderByAggregateInput
    _min?: CompanySettingsMinOrderByAggregateInput
    _sum?: CompanySettingsSumOrderByAggregateInput
  }

  export type CompanySettingsScalarWhereWithAggregatesInput = {
    AND?: CompanySettingsScalarWhereWithAggregatesInput | CompanySettingsScalarWhereWithAggregatesInput[]
    OR?: CompanySettingsScalarWhereWithAggregatesInput[]
    NOT?: CompanySettingsScalarWhereWithAggregatesInput | CompanySettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CompanySettings"> | number
    companyId?: IntWithAggregatesFilter<"CompanySettings"> | number
    emailNotifications?: BoolWithAggregatesFilter<"CompanySettings"> | boolean
    newMessageAlerts?: BoolWithAggregatesFilter<"CompanySettings"> | boolean
    dailyReports?: BoolWithAggregatesFilter<"CompanySettings"> | boolean
    autoReply?: BoolWithAggregatesFilter<"CompanySettings"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CompanySettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanySettings"> | Date | string
  }

  export type CompanyWhatsappNumberWhereInput = {
    AND?: CompanyWhatsappNumberWhereInput | CompanyWhatsappNumberWhereInput[]
    OR?: CompanyWhatsappNumberWhereInput[]
    NOT?: CompanyWhatsappNumberWhereInput | CompanyWhatsappNumberWhereInput[]
    id?: StringFilter<"CompanyWhatsappNumber"> | string
    companyId?: IntFilter<"CompanyWhatsappNumber"> | number
    displayName?: StringFilter<"CompanyWhatsappNumber"> | string
    phoneNumber?: StringFilter<"CompanyWhatsappNumber"> | string
    isConnected?: BoolFilter<"CompanyWhatsappNumber"> | boolean
    messagesThisMonth?: IntFilter<"CompanyWhatsappNumber"> | number
    lastSyncedAt?: DateTimeNullableFilter<"CompanyWhatsappNumber"> | Date | string | null
    createdAt?: DateTimeFilter<"CompanyWhatsappNumber"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyWhatsappNumber"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type CompanyWhatsappNumberOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    displayName?: SortOrder
    phoneNumber?: SortOrder
    isConnected?: SortOrder
    messagesThisMonth?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type CompanyWhatsappNumberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_phoneNumber?: CompanyWhatsappNumberCompanyIdPhoneNumberCompoundUniqueInput
    AND?: CompanyWhatsappNumberWhereInput | CompanyWhatsappNumberWhereInput[]
    OR?: CompanyWhatsappNumberWhereInput[]
    NOT?: CompanyWhatsappNumberWhereInput | CompanyWhatsappNumberWhereInput[]
    companyId?: IntFilter<"CompanyWhatsappNumber"> | number
    displayName?: StringFilter<"CompanyWhatsappNumber"> | string
    phoneNumber?: StringFilter<"CompanyWhatsappNumber"> | string
    isConnected?: BoolFilter<"CompanyWhatsappNumber"> | boolean
    messagesThisMonth?: IntFilter<"CompanyWhatsappNumber"> | number
    lastSyncedAt?: DateTimeNullableFilter<"CompanyWhatsappNumber"> | Date | string | null
    createdAt?: DateTimeFilter<"CompanyWhatsappNumber"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyWhatsappNumber"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id" | "companyId_phoneNumber">

  export type CompanyWhatsappNumberOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    displayName?: SortOrder
    phoneNumber?: SortOrder
    isConnected?: SortOrder
    messagesThisMonth?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyWhatsappNumberCountOrderByAggregateInput
    _avg?: CompanyWhatsappNumberAvgOrderByAggregateInput
    _max?: CompanyWhatsappNumberMaxOrderByAggregateInput
    _min?: CompanyWhatsappNumberMinOrderByAggregateInput
    _sum?: CompanyWhatsappNumberSumOrderByAggregateInput
  }

  export type CompanyWhatsappNumberScalarWhereWithAggregatesInput = {
    AND?: CompanyWhatsappNumberScalarWhereWithAggregatesInput | CompanyWhatsappNumberScalarWhereWithAggregatesInput[]
    OR?: CompanyWhatsappNumberScalarWhereWithAggregatesInput[]
    NOT?: CompanyWhatsappNumberScalarWhereWithAggregatesInput | CompanyWhatsappNumberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyWhatsappNumber"> | string
    companyId?: IntWithAggregatesFilter<"CompanyWhatsappNumber"> | number
    displayName?: StringWithAggregatesFilter<"CompanyWhatsappNumber"> | string
    phoneNumber?: StringWithAggregatesFilter<"CompanyWhatsappNumber"> | string
    isConnected?: BoolWithAggregatesFilter<"CompanyWhatsappNumber"> | boolean
    messagesThisMonth?: IntWithAggregatesFilter<"CompanyWhatsappNumber"> | number
    lastSyncedAt?: DateTimeNullableWithAggregatesFilter<"CompanyWhatsappNumber"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CompanyWhatsappNumber"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyWhatsappNumber"> | Date | string
  }

  export type InboxCustomerWhereInput = {
    AND?: InboxCustomerWhereInput | InboxCustomerWhereInput[]
    OR?: InboxCustomerWhereInput[]
    NOT?: InboxCustomerWhereInput | InboxCustomerWhereInput[]
    id?: StringFilter<"InboxCustomer"> | string
    companyId?: IntFilter<"InboxCustomer"> | number
    name?: StringFilter<"InboxCustomer"> | string
    phone?: StringNullableFilter<"InboxCustomer"> | string | null
    email?: StringNullableFilter<"InboxCustomer"> | string | null
    address?: StringNullableFilter<"InboxCustomer"> | string | null
    notes?: StringNullableFilter<"InboxCustomer"> | string | null
    createdAt?: DateTimeFilter<"InboxCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"InboxCustomer"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    conversations?: InboxConversationListRelationFilter
  }

  export type InboxCustomerOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    conversations?: InboxConversationOrderByRelationAggregateInput
  }

  export type InboxCustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_phone?: InboxCustomerCompanyIdPhoneCompoundUniqueInput
    companyId_email?: InboxCustomerCompanyIdEmailCompoundUniqueInput
    AND?: InboxCustomerWhereInput | InboxCustomerWhereInput[]
    OR?: InboxCustomerWhereInput[]
    NOT?: InboxCustomerWhereInput | InboxCustomerWhereInput[]
    companyId?: IntFilter<"InboxCustomer"> | number
    name?: StringFilter<"InboxCustomer"> | string
    phone?: StringNullableFilter<"InboxCustomer"> | string | null
    email?: StringNullableFilter<"InboxCustomer"> | string | null
    address?: StringNullableFilter<"InboxCustomer"> | string | null
    notes?: StringNullableFilter<"InboxCustomer"> | string | null
    createdAt?: DateTimeFilter<"InboxCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"InboxCustomer"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    conversations?: InboxConversationListRelationFilter
  }, "id" | "companyId_phone" | "companyId_email">

  export type InboxCustomerOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InboxCustomerCountOrderByAggregateInput
    _avg?: InboxCustomerAvgOrderByAggregateInput
    _max?: InboxCustomerMaxOrderByAggregateInput
    _min?: InboxCustomerMinOrderByAggregateInput
    _sum?: InboxCustomerSumOrderByAggregateInput
  }

  export type InboxCustomerScalarWhereWithAggregatesInput = {
    AND?: InboxCustomerScalarWhereWithAggregatesInput | InboxCustomerScalarWhereWithAggregatesInput[]
    OR?: InboxCustomerScalarWhereWithAggregatesInput[]
    NOT?: InboxCustomerScalarWhereWithAggregatesInput | InboxCustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InboxCustomer"> | string
    companyId?: IntWithAggregatesFilter<"InboxCustomer"> | number
    name?: StringWithAggregatesFilter<"InboxCustomer"> | string
    phone?: StringNullableWithAggregatesFilter<"InboxCustomer"> | string | null
    email?: StringNullableWithAggregatesFilter<"InboxCustomer"> | string | null
    address?: StringNullableWithAggregatesFilter<"InboxCustomer"> | string | null
    notes?: StringNullableWithAggregatesFilter<"InboxCustomer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InboxCustomer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InboxCustomer"> | Date | string
  }

  export type InboxConversationWhereInput = {
    AND?: InboxConversationWhereInput | InboxConversationWhereInput[]
    OR?: InboxConversationWhereInput[]
    NOT?: InboxConversationWhereInput | InboxConversationWhereInput[]
    id?: StringFilter<"InboxConversation"> | string
    companyId?: IntFilter<"InboxConversation"> | number
    customerId?: StringFilter<"InboxConversation"> | string
    subject?: StringNullableFilter<"InboxConversation"> | string | null
    lastMessagePreview?: StringNullableFilter<"InboxConversation"> | string | null
    lastMessageSentAt?: DateTimeNullableFilter<"InboxConversation"> | Date | string | null
    unreadCount?: IntFilter<"InboxConversation"> | number
    priority?: EnumInboxConversationPriorityFilter<"InboxConversation"> | $Enums.InboxConversationPriority
    satisfactionScore?: IntNullableFilter<"InboxConversation"> | number | null
    tags?: StringNullableListFilter<"InboxConversation">
    assignedToId?: IntNullableFilter<"InboxConversation"> | number | null
    isArchived?: BoolFilter<"InboxConversation"> | boolean
    archivedAt?: DateTimeNullableFilter<"InboxConversation"> | Date | string | null
    createdAt?: DateTimeFilter<"InboxConversation"> | Date | string
    updatedAt?: DateTimeFilter<"InboxConversation"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    customer?: XOR<InboxCustomerScalarRelationFilter, InboxCustomerWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    messages?: InboxMessageListRelationFilter
  }

  export type InboxConversationOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    customerId?: SortOrder
    subject?: SortOrderInput | SortOrder
    lastMessagePreview?: SortOrderInput | SortOrder
    lastMessageSentAt?: SortOrderInput | SortOrder
    unreadCount?: SortOrder
    priority?: SortOrder
    satisfactionScore?: SortOrderInput | SortOrder
    tags?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    isArchived?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    customer?: InboxCustomerOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    messages?: InboxMessageOrderByRelationAggregateInput
  }

  export type InboxConversationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InboxConversationWhereInput | InboxConversationWhereInput[]
    OR?: InboxConversationWhereInput[]
    NOT?: InboxConversationWhereInput | InboxConversationWhereInput[]
    companyId?: IntFilter<"InboxConversation"> | number
    customerId?: StringFilter<"InboxConversation"> | string
    subject?: StringNullableFilter<"InboxConversation"> | string | null
    lastMessagePreview?: StringNullableFilter<"InboxConversation"> | string | null
    lastMessageSentAt?: DateTimeNullableFilter<"InboxConversation"> | Date | string | null
    unreadCount?: IntFilter<"InboxConversation"> | number
    priority?: EnumInboxConversationPriorityFilter<"InboxConversation"> | $Enums.InboxConversationPriority
    satisfactionScore?: IntNullableFilter<"InboxConversation"> | number | null
    tags?: StringNullableListFilter<"InboxConversation">
    assignedToId?: IntNullableFilter<"InboxConversation"> | number | null
    isArchived?: BoolFilter<"InboxConversation"> | boolean
    archivedAt?: DateTimeNullableFilter<"InboxConversation"> | Date | string | null
    createdAt?: DateTimeFilter<"InboxConversation"> | Date | string
    updatedAt?: DateTimeFilter<"InboxConversation"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    customer?: XOR<InboxCustomerScalarRelationFilter, InboxCustomerWhereInput>
    assignedTo?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    messages?: InboxMessageListRelationFilter
  }, "id">

  export type InboxConversationOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    customerId?: SortOrder
    subject?: SortOrderInput | SortOrder
    lastMessagePreview?: SortOrderInput | SortOrder
    lastMessageSentAt?: SortOrderInput | SortOrder
    unreadCount?: SortOrder
    priority?: SortOrder
    satisfactionScore?: SortOrderInput | SortOrder
    tags?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    isArchived?: SortOrder
    archivedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InboxConversationCountOrderByAggregateInput
    _avg?: InboxConversationAvgOrderByAggregateInput
    _max?: InboxConversationMaxOrderByAggregateInput
    _min?: InboxConversationMinOrderByAggregateInput
    _sum?: InboxConversationSumOrderByAggregateInput
  }

  export type InboxConversationScalarWhereWithAggregatesInput = {
    AND?: InboxConversationScalarWhereWithAggregatesInput | InboxConversationScalarWhereWithAggregatesInput[]
    OR?: InboxConversationScalarWhereWithAggregatesInput[]
    NOT?: InboxConversationScalarWhereWithAggregatesInput | InboxConversationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InboxConversation"> | string
    companyId?: IntWithAggregatesFilter<"InboxConversation"> | number
    customerId?: StringWithAggregatesFilter<"InboxConversation"> | string
    subject?: StringNullableWithAggregatesFilter<"InboxConversation"> | string | null
    lastMessagePreview?: StringNullableWithAggregatesFilter<"InboxConversation"> | string | null
    lastMessageSentAt?: DateTimeNullableWithAggregatesFilter<"InboxConversation"> | Date | string | null
    unreadCount?: IntWithAggregatesFilter<"InboxConversation"> | number
    priority?: EnumInboxConversationPriorityWithAggregatesFilter<"InboxConversation"> | $Enums.InboxConversationPriority
    satisfactionScore?: IntNullableWithAggregatesFilter<"InboxConversation"> | number | null
    tags?: StringNullableListFilter<"InboxConversation">
    assignedToId?: IntNullableWithAggregatesFilter<"InboxConversation"> | number | null
    isArchived?: BoolWithAggregatesFilter<"InboxConversation"> | boolean
    archivedAt?: DateTimeNullableWithAggregatesFilter<"InboxConversation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InboxConversation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InboxConversation"> | Date | string
  }

  export type InboxMessageWhereInput = {
    AND?: InboxMessageWhereInput | InboxMessageWhereInput[]
    OR?: InboxMessageWhereInput[]
    NOT?: InboxMessageWhereInput | InboxMessageWhereInput[]
    id?: StringFilter<"InboxMessage"> | string
    companyId?: IntFilter<"InboxMessage"> | number
    conversationId?: StringFilter<"InboxMessage"> | string
    senderType?: EnumInboxMessageSenderTypeFilter<"InboxMessage"> | $Enums.InboxMessageSenderType
    senderUserId?: IntNullableFilter<"InboxMessage"> | number | null
    content?: StringFilter<"InboxMessage"> | string
    attachments?: JsonNullableFilter<"InboxMessage">
    status?: EnumInboxMessageStatusFilter<"InboxMessage"> | $Enums.InboxMessageStatus
    sentAt?: DateTimeFilter<"InboxMessage"> | Date | string
    createdAt?: DateTimeFilter<"InboxMessage"> | Date | string
    updatedAt?: DateTimeFilter<"InboxMessage"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    conversation?: XOR<InboxConversationScalarRelationFilter, InboxConversationWhereInput>
    senderUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type InboxMessageOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    conversationId?: SortOrder
    senderType?: SortOrder
    senderUserId?: SortOrderInput | SortOrder
    content?: SortOrder
    attachments?: SortOrderInput | SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    conversation?: InboxConversationOrderByWithRelationInput
    senderUser?: UserOrderByWithRelationInput
  }

  export type InboxMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InboxMessageWhereInput | InboxMessageWhereInput[]
    OR?: InboxMessageWhereInput[]
    NOT?: InboxMessageWhereInput | InboxMessageWhereInput[]
    companyId?: IntFilter<"InboxMessage"> | number
    conversationId?: StringFilter<"InboxMessage"> | string
    senderType?: EnumInboxMessageSenderTypeFilter<"InboxMessage"> | $Enums.InboxMessageSenderType
    senderUserId?: IntNullableFilter<"InboxMessage"> | number | null
    content?: StringFilter<"InboxMessage"> | string
    attachments?: JsonNullableFilter<"InboxMessage">
    status?: EnumInboxMessageStatusFilter<"InboxMessage"> | $Enums.InboxMessageStatus
    sentAt?: DateTimeFilter<"InboxMessage"> | Date | string
    createdAt?: DateTimeFilter<"InboxMessage"> | Date | string
    updatedAt?: DateTimeFilter<"InboxMessage"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    conversation?: XOR<InboxConversationScalarRelationFilter, InboxConversationWhereInput>
    senderUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type InboxMessageOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    conversationId?: SortOrder
    senderType?: SortOrder
    senderUserId?: SortOrderInput | SortOrder
    content?: SortOrder
    attachments?: SortOrderInput | SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InboxMessageCountOrderByAggregateInput
    _avg?: InboxMessageAvgOrderByAggregateInput
    _max?: InboxMessageMaxOrderByAggregateInput
    _min?: InboxMessageMinOrderByAggregateInput
    _sum?: InboxMessageSumOrderByAggregateInput
  }

  export type InboxMessageScalarWhereWithAggregatesInput = {
    AND?: InboxMessageScalarWhereWithAggregatesInput | InboxMessageScalarWhereWithAggregatesInput[]
    OR?: InboxMessageScalarWhereWithAggregatesInput[]
    NOT?: InboxMessageScalarWhereWithAggregatesInput | InboxMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InboxMessage"> | string
    companyId?: IntWithAggregatesFilter<"InboxMessage"> | number
    conversationId?: StringWithAggregatesFilter<"InboxMessage"> | string
    senderType?: EnumInboxMessageSenderTypeWithAggregatesFilter<"InboxMessage"> | $Enums.InboxMessageSenderType
    senderUserId?: IntNullableWithAggregatesFilter<"InboxMessage"> | number | null
    content?: StringWithAggregatesFilter<"InboxMessage"> | string
    attachments?: JsonNullableWithAggregatesFilter<"InboxMessage">
    status?: EnumInboxMessageStatusWithAggregatesFilter<"InboxMessage"> | $Enums.InboxMessageStatus
    sentAt?: DateTimeWithAggregatesFilter<"InboxMessage"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"InboxMessage"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InboxMessage"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FileCreateInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarFor?: UserCreateNestedManyWithoutAvatarInput
    user?: UserCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarFor?: UserUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarFor?: UserUpdateManyWithoutAvatarNestedInput
    user?: UserUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarFor?: UserUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type FileCreateManyInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeItemCreateInput = {
    id?: string
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutKnowledgeItemsInput
    createdBy?: UserCreateNestedOneWithoutKnowledgeItemsInput
  }

  export type KnowledgeItemUncheckedCreateInput = {
    id?: string
    companyId: number
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type KnowledgeItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutKnowledgeItemsNestedInput
    createdBy?: UserUpdateOneWithoutKnowledgeItemsNestedInput
  }

  export type KnowledgeItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KnowledgeItemCreateManyInput = {
    id?: string
    companyId: number
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type KnowledgeItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuickAnswerCreateInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuickAnswersInput
    createdBy?: UserCreateNestedOneWithoutQuickAnswersInput
  }

  export type QuickAnswerUncheckedCreateInput = {
    id?: string
    companyId: number
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type QuickAnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuickAnswersNestedInput
    createdBy?: UserUpdateOneWithoutQuickAnswersNestedInput
  }

  export type QuickAnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuickAnswerCreateManyInput = {
    id?: string
    companyId: number
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type QuickAnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuickAnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AiTemplateCreateInput = {
    id?: string
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAiTemplatesInput
    createdBy?: UserCreateNestedOneWithoutAiTemplatesInput
    options?: AiTemplateOptionCreateNestedManyWithoutTemplateInput
  }

  export type AiTemplateUncheckedCreateInput = {
    id?: string
    companyId: number
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
    options?: AiTemplateOptionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type AiTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAiTemplatesNestedInput
    createdBy?: UserUpdateOneWithoutAiTemplatesNestedInput
    options?: AiTemplateOptionUpdateManyWithoutTemplateNestedInput
  }

  export type AiTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    options?: AiTemplateOptionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type AiTemplateCreateManyInput = {
    id?: string
    companyId: number
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type AiTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AiTemplateOptionCreateInput = {
    id?: string
    label: string
    value: string
    createdAt?: Date | string
    template: AiTemplateCreateNestedOneWithoutOptionsInput
  }

  export type AiTemplateOptionUncheckedCreateInput = {
    id?: string
    templateId: string
    label: string
    value: string
    createdAt?: Date | string
  }

  export type AiTemplateOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    template?: AiTemplateUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type AiTemplateOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateOptionCreateManyInput = {
    id?: string
    templateId: string
    label: string
    value: string
    createdAt?: Date | string
  }

  export type AiTemplateOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    templateId?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberCreateInput = {
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutCompanyMembersInput
  }

  export type CompanyMemberUncheckedCreateInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    companyId: number
  }

  export type CompanyMemberUpdateInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutCompanyMembersNestedInput
  }

  export type CompanyMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyMemberCreateManyInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    companyId: number
  }

  export type CompanyMemberUpdateManyMutationInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
  }

  export type SubscriptionPlanCreateInput = {
    id?: string
    planType: $Enums.PlanType
    stripeProductId?: string | null
    stripePriceIdMonthly?: string | null
    stripePriceIdYearly?: string | null
    priceMonthly?: Decimal | DecimalJsLike | number | string
    priceYearly?: Decimal | DecimalJsLike | number | string
    currency?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: CustomerSubscriptionCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUncheckedCreateInput = {
    id?: string
    planType: $Enums.PlanType
    stripeProductId?: string | null
    stripePriceIdMonthly?: string | null
    stripePriceIdYearly?: string | null
    priceMonthly?: Decimal | DecimalJsLike | number | string
    priceYearly?: Decimal | DecimalJsLike | number | string
    currency?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: CustomerSubscriptionUncheckedCreateNestedManyWithoutPlanInput
  }

  export type SubscriptionPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdMonthly?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdYearly?: NullableStringFieldUpdateOperationsInput | string | null
    priceMonthly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: CustomerSubscriptionUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdMonthly?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdYearly?: NullableStringFieldUpdateOperationsInput | string | null
    priceMonthly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: CustomerSubscriptionUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type SubscriptionPlanCreateManyInput = {
    id?: string
    planType: $Enums.PlanType
    stripeProductId?: string | null
    stripePriceIdMonthly?: string | null
    stripePriceIdYearly?: string | null
    priceMonthly?: Decimal | DecimalJsLike | number | string
    priceYearly?: Decimal | DecimalJsLike | number | string
    currency?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdMonthly?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdYearly?: NullableStringFieldUpdateOperationsInput | string | null
    priceMonthly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdMonthly?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdYearly?: NullableStringFieldUpdateOperationsInput | string | null
    priceMonthly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSubscriptionCreateInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCustomerSubscriptionInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    usageTracking?: UsageTrackingCreateNestedManyWithoutSubscriptionInput
  }

  export type CustomerSubscriptionUncheckedCreateInput = {
    id?: string
    companyId: number
    planId: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type CustomerSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCustomerSubscriptionNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    usageTracking?: UsageTrackingUpdateManyWithoutSubscriptionNestedInput
  }

  export type CustomerSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageTracking?: UsageTrackingUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type CustomerSubscriptionCreateManyInput = {
    id?: string
    companyId: number
    planId: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingCreateInput = {
    id?: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsageTrackingInput
    subscription: CustomerSubscriptionCreateNestedOneWithoutUsageTrackingInput
  }

  export type UsageTrackingUncheckedCreateInput = {
    id?: string
    companyId: number
    subscriptionId: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UsageTrackingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsageTrackingNestedInput
    subscription?: CustomerSubscriptionUpdateOneRequiredWithoutUsageTrackingNestedInput
  }

  export type UsageTrackingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    subscriptionId?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingCreateManyInput = {
    id?: string
    companyId: number
    subscriptionId: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UsageTrackingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    subscriptionId?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingsCreateInput = {
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutSettingsInput
  }

  export type CompanySettingsUncheckedCreateInput = {
    id?: number
    companyId: number
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanySettingsUpdateInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    newMessageAlerts?: BoolFieldUpdateOperationsInput | boolean
    dailyReports?: BoolFieldUpdateOperationsInput | boolean
    autoReply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type CompanySettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    newMessageAlerts?: BoolFieldUpdateOperationsInput | boolean
    dailyReports?: BoolFieldUpdateOperationsInput | boolean
    autoReply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingsCreateManyInput = {
    id?: number
    companyId: number
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanySettingsUpdateManyMutationInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    newMessageAlerts?: BoolFieldUpdateOperationsInput | boolean
    dailyReports?: BoolFieldUpdateOperationsInput | boolean
    autoReply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyId?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    newMessageAlerts?: BoolFieldUpdateOperationsInput | boolean
    dailyReports?: BoolFieldUpdateOperationsInput | boolean
    autoReply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberCreateInput = {
    id?: string
    displayName: string
    phoneNumber: string
    isConnected?: boolean
    messagesThisMonth?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutWhatsappNumbersInput
  }

  export type CompanyWhatsappNumberUncheckedCreateInput = {
    id?: string
    companyId: number
    displayName: string
    phoneNumber: string
    isConnected?: boolean
    messagesThisMonth?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyWhatsappNumberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutWhatsappNumbersNestedInput
  }

  export type CompanyWhatsappNumberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberCreateManyInput = {
    id?: string
    companyId: number
    displayName: string
    phoneNumber: string
    isConnected?: boolean
    messagesThisMonth?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyWhatsappNumberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxCustomerCreateInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxCustomersInput
    conversations?: InboxConversationCreateNestedManyWithoutCustomerInput
  }

  export type InboxCustomerUncheckedCreateInput = {
    id?: string
    companyId: number
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    conversations?: InboxConversationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type InboxCustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxCustomersNestedInput
    conversations?: InboxConversationUpdateManyWithoutCustomerNestedInput
  }

  export type InboxCustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: InboxConversationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type InboxCustomerCreateManyInput = {
    id?: string
    companyId: number
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxCustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxCustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxConversationCreateInput = {
    id?: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxConversationsInput
    customer: InboxCustomerCreateNestedOneWithoutConversationsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedInboxConversationsInput
    messages?: InboxMessageCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationUncheckedCreateInput = {
    id?: string
    companyId: number
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: InboxMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxConversationsNestedInput
    customer?: InboxCustomerUpdateOneRequiredWithoutConversationsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedInboxConversationsNestedInput
    messages?: InboxMessageUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: InboxMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationCreateManyInput = {
    id?: string
    companyId: number
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxConversationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxConversationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageCreateInput = {
    id?: string
    senderType: $Enums.InboxMessageSenderType
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxMessagesInput
    conversation: InboxConversationCreateNestedOneWithoutMessagesInput
    senderUser?: UserCreateNestedOneWithoutInboxMessagesInput
  }

  export type InboxMessageUncheckedCreateInput = {
    id?: string
    companyId: number
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    senderUserId?: number | null
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxMessagesNestedInput
    conversation?: InboxConversationUpdateOneRequiredWithoutMessagesNestedInput
    senderUser?: UserUpdateOneWithoutInboxMessagesNestedInput
  }

  export type InboxMessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    senderUserId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageCreateManyInput = {
    id?: string
    companyId: number
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    senderUserId?: number | null
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    senderUserId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderFilter<$PrismaModel> | $Enums.Provider
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumThemeFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeFilter<$PrismaModel> | $Enums.Theme
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type CompanyMemberListRelationFilter = {
    every?: CompanyMemberWhereInput
    some?: CompanyMemberWhereInput
    none?: CompanyMemberWhereInput
  }

  export type FileNullableScalarRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type CompanyNullableScalarRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type KnowledgeItemListRelationFilter = {
    every?: KnowledgeItemWhereInput
    some?: KnowledgeItemWhereInput
    none?: KnowledgeItemWhereInput
  }

  export type QuickAnswerListRelationFilter = {
    every?: QuickAnswerWhereInput
    some?: QuickAnswerWhereInput
    none?: QuickAnswerWhereInput
  }

  export type AiTemplateListRelationFilter = {
    every?: AiTemplateWhereInput
    some?: AiTemplateWhereInput
    none?: AiTemplateWhereInput
  }

  export type InboxConversationListRelationFilter = {
    every?: InboxConversationWhereInput
    some?: InboxConversationWhereInput
    none?: InboxConversationWhereInput
  }

  export type InboxMessageListRelationFilter = {
    every?: InboxMessageWhereInput
    some?: InboxMessageWhereInput
    none?: InboxMessageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KnowledgeItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuickAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AiTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InboxConversationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InboxMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrder
    resetPasswordToken?: SortOrder
    confirmationToken?: SortOrder
    confirmed?: SortOrder
    blocked?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    companyName?: SortOrder
    country?: SortOrder
    linkedinUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    githubUrl?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrder
    idProvider?: SortOrder
    resetPasswordExpires?: SortOrder
    theme?: SortOrder
    defaultCompanyId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    defaultCompanyId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrder
    resetPasswordToken?: SortOrder
    confirmationToken?: SortOrder
    confirmed?: SortOrder
    blocked?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    companyName?: SortOrder
    country?: SortOrder
    linkedinUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    githubUrl?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrder
    idProvider?: SortOrder
    resetPasswordExpires?: SortOrder
    theme?: SortOrder
    defaultCompanyId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrder
    resetPasswordToken?: SortOrder
    confirmationToken?: SortOrder
    confirmed?: SortOrder
    blocked?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    position?: SortOrder
    companyName?: SortOrder
    country?: SortOrder
    linkedinUrl?: SortOrder
    twitterUrl?: SortOrder
    websiteUrl?: SortOrder
    githubUrl?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrder
    idProvider?: SortOrder
    resetPasswordExpires?: SortOrder
    theme?: SortOrder
    defaultCompanyId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    defaultCompanyId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderWithAggregatesFilter<$PrismaModel> | $Enums.Provider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderFilter<$PrismaModel>
    _max?: NestedEnumProviderFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumThemeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeWithAggregatesFilter<$PrismaModel> | $Enums.Theme
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeFilter<$PrismaModel>
    _max?: NestedEnumThemeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    format?: SortOrder
    version?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
    userId?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    format?: SortOrder
    version?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    format?: SortOrder
    version?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
    userId?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type CustomerSubscriptionListRelationFilter = {
    every?: CustomerSubscriptionWhereInput
    some?: CustomerSubscriptionWhereInput
    none?: CustomerSubscriptionWhereInput
  }

  export type UsageTrackingListRelationFilter = {
    every?: UsageTrackingWhereInput
    some?: UsageTrackingWhereInput
    none?: UsageTrackingWhereInput
  }

  export type InboxCustomerListRelationFilter = {
    every?: InboxCustomerWhereInput
    some?: InboxCustomerWhereInput
    none?: InboxCustomerWhereInput
  }

  export type CompanySettingsNullableScalarRelationFilter = {
    is?: CompanySettingsWhereInput | null
    isNot?: CompanySettingsWhereInput | null
  }

  export type CompanyWhatsappNumberListRelationFilter = {
    every?: CompanyWhatsappNumberWhereInput
    some?: CompanyWhatsappNumberWhereInput
    none?: CompanyWhatsappNumberWhereInput
  }

  export type CustomerSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsageTrackingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InboxCustomerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyWhatsappNumberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tokenApi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tokenApi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    tokenApi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumKnowledgeItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeItemType | EnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeItemTypeFilter<$PrismaModel> | $Enums.KnowledgeItemType
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type KnowledgeItemCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type KnowledgeItemAvgOrderByAggregateInput = {
    companyId?: SortOrder
    createdById?: SortOrder
  }

  export type KnowledgeItemMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type KnowledgeItemMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type KnowledgeItemSumOrderByAggregateInput = {
    companyId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumKnowledgeItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeItemType | EnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.KnowledgeItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKnowledgeItemTypeFilter<$PrismaModel>
    _max?: NestedEnumKnowledgeItemTypeFilter<$PrismaModel>
  }

  export type QuickAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type QuickAnswerAvgOrderByAggregateInput = {
    companyId?: SortOrder
    createdById?: SortOrder
  }

  export type QuickAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type QuickAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type QuickAnswerSumOrderByAggregateInput = {
    companyId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumAiTemplateCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.AiTemplateCategory | EnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAiTemplateCategoryFilter<$PrismaModel> | $Enums.AiTemplateCategory
  }

  export type AiTemplateOptionListRelationFilter = {
    every?: AiTemplateOptionWhereInput
    some?: AiTemplateOptionWhereInput
    none?: AiTemplateOptionWhereInput
  }

  export type AiTemplateOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AiTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type AiTemplateAvgOrderByAggregateInput = {
    companyId?: SortOrder
    createdById?: SortOrder
  }

  export type AiTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type AiTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    content?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type AiTemplateSumOrderByAggregateInput = {
    companyId?: SortOrder
    createdById?: SortOrder
  }

  export type EnumAiTemplateCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AiTemplateCategory | EnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAiTemplateCategoryWithAggregatesFilter<$PrismaModel> | $Enums.AiTemplateCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAiTemplateCategoryFilter<$PrismaModel>
    _max?: NestedEnumAiTemplateCategoryFilter<$PrismaModel>
  }

  export type AiTemplateScalarRelationFilter = {
    is?: AiTemplateWhereInput
    isNot?: AiTemplateWhereInput
  }

  export type AiTemplateOptionCountOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    label?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
  }

  export type AiTemplateOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    label?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
  }

  export type AiTemplateOptionMinOrderByAggregateInput = {
    id?: SortOrder
    templateId?: SortOrder
    label?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumCompanyMemberStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberStatus | EnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberStatusFilter<$PrismaModel> | $Enums.CompanyMemberStatus
  }

  export type CompanyMemberUserIdCompanyIdCompoundUniqueInput = {
    userId: number
    companyId: number
  }

  export type CompanyMemberCountOrderByAggregateInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    companyMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type CompanyMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type CompanyMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    companyMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type CompanyMemberMinOrderByAggregateInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    companyMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type CompanyMemberSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    companyId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumCompanyMemberStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberStatus | EnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompanyMemberStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyMemberStatusFilter<$PrismaModel>
    _max?: NestedEnumCompanyMemberStatusFilter<$PrismaModel>
  }

  export type EnumPlanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeFilter<$PrismaModel> | $Enums.PlanType
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type SubscriptionPlanCountOrderByAggregateInput = {
    id?: SortOrder
    planType?: SortOrder
    stripeProductId?: SortOrder
    stripePriceIdMonthly?: SortOrder
    stripePriceIdYearly?: SortOrder
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPlanAvgOrderByAggregateInput = {
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
  }

  export type SubscriptionPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    planType?: SortOrder
    stripeProductId?: SortOrder
    stripePriceIdMonthly?: SortOrder
    stripePriceIdYearly?: SortOrder
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPlanMinOrderByAggregateInput = {
    id?: SortOrder
    planType?: SortOrder
    stripeProductId?: SortOrder
    stripePriceIdMonthly?: SortOrder
    stripePriceIdYearly?: SortOrder
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPlanSumOrderByAggregateInput = {
    priceMonthly?: SortOrder
    priceYearly?: SortOrder
  }

  export type EnumPlanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanTypeFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type EnumBillingIntervalFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingInterval | EnumBillingIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingIntervalFilter<$PrismaModel> | $Enums.BillingInterval
  }

  export type SubscriptionPlanScalarRelationFilter = {
    is?: SubscriptionPlanWhereInput
    isNot?: SubscriptionPlanWhereInput
  }

  export type CustomerSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    billingInterval?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    cancellationDetails?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSubscriptionAvgOrderByAggregateInput = {
    companyId?: SortOrder
  }

  export type CustomerSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    billingInterval?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    cancellationDetails?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    planId?: SortOrder
    status?: SortOrder
    billingInterval?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    cancellationDetails?: SortOrder
    currentPeriodStart?: SortOrder
    currentPeriodEnd?: SortOrder
    cancelAtPeriodEnd?: SortOrder
    trialStart?: SortOrder
    trialEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSubscriptionSumOrderByAggregateInput = {
    companyId?: SortOrder
  }

  export type EnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type EnumBillingIntervalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingInterval | EnumBillingIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingIntervalWithAggregatesFilter<$PrismaModel> | $Enums.BillingInterval
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingIntervalFilter<$PrismaModel>
    _max?: NestedEnumBillingIntervalFilter<$PrismaModel>
  }

  export type EnumUsageMetricTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UsageMetricType | EnumUsageMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsageMetricTypeFilter<$PrismaModel> | $Enums.UsageMetricType
  }

  export type CustomerSubscriptionScalarRelationFilter = {
    is?: CustomerSubscriptionWhereInput
    isNot?: CustomerSubscriptionWhereInput
  }

  export type UsageTrackingCompanyIdMetricTypePeriodStartCompoundUniqueInput = {
    companyId: number
    metricType: $Enums.UsageMetricType
    periodStart: Date | string
  }

  export type UsageTrackingCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    subscriptionId?: SortOrder
    metricType?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    lastResetDate?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageTrackingAvgOrderByAggregateInput = {
    companyId?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
  }

  export type UsageTrackingMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    subscriptionId?: SortOrder
    metricType?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    lastResetDate?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageTrackingMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    subscriptionId?: SortOrder
    metricType?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    lastResetDate?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type UsageTrackingSumOrderByAggregateInput = {
    companyId?: SortOrder
    currentUsage?: SortOrder
    limitValue?: SortOrder
  }

  export type EnumUsageMetricTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UsageMetricType | EnumUsageMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsageMetricTypeWithAggregatesFilter<$PrismaModel> | $Enums.UsageMetricType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUsageMetricTypeFilter<$PrismaModel>
    _max?: NestedEnumUsageMetricTypeFilter<$PrismaModel>
  }

  export type CompanySettingsCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    emailNotifications?: SortOrder
    newMessageAlerts?: SortOrder
    dailyReports?: SortOrder
    autoReply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type CompanySettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    emailNotifications?: SortOrder
    newMessageAlerts?: SortOrder
    dailyReports?: SortOrder
    autoReply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySettingsMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    emailNotifications?: SortOrder
    newMessageAlerts?: SortOrder
    dailyReports?: SortOrder
    autoReply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySettingsSumOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
  }

  export type CompanyWhatsappNumberCompanyIdPhoneNumberCompoundUniqueInput = {
    companyId: number
    phoneNumber: string
  }

  export type CompanyWhatsappNumberCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    displayName?: SortOrder
    phoneNumber?: SortOrder
    isConnected?: SortOrder
    messagesThisMonth?: SortOrder
    lastSyncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyWhatsappNumberAvgOrderByAggregateInput = {
    companyId?: SortOrder
    messagesThisMonth?: SortOrder
  }

  export type CompanyWhatsappNumberMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    displayName?: SortOrder
    phoneNumber?: SortOrder
    isConnected?: SortOrder
    messagesThisMonth?: SortOrder
    lastSyncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyWhatsappNumberMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    displayName?: SortOrder
    phoneNumber?: SortOrder
    isConnected?: SortOrder
    messagesThisMonth?: SortOrder
    lastSyncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyWhatsappNumberSumOrderByAggregateInput = {
    companyId?: SortOrder
    messagesThisMonth?: SortOrder
  }

  export type InboxCustomerCompanyIdPhoneCompoundUniqueInput = {
    companyId: number
    phone: string
  }

  export type InboxCustomerCompanyIdEmailCompoundUniqueInput = {
    companyId: number
    email: string
  }

  export type InboxCustomerCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxCustomerAvgOrderByAggregateInput = {
    companyId?: SortOrder
  }

  export type InboxCustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxCustomerMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    address?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxCustomerSumOrderByAggregateInput = {
    companyId?: SortOrder
  }

  export type EnumInboxConversationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxConversationPriority | EnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxConversationPriorityFilter<$PrismaModel> | $Enums.InboxConversationPriority
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type InboxCustomerScalarRelationFilter = {
    is?: InboxCustomerWhereInput
    isNot?: InboxCustomerWhereInput
  }

  export type InboxConversationCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    customerId?: SortOrder
    subject?: SortOrder
    lastMessagePreview?: SortOrder
    lastMessageSentAt?: SortOrder
    unreadCount?: SortOrder
    priority?: SortOrder
    satisfactionScore?: SortOrder
    tags?: SortOrder
    assignedToId?: SortOrder
    isArchived?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxConversationAvgOrderByAggregateInput = {
    companyId?: SortOrder
    unreadCount?: SortOrder
    satisfactionScore?: SortOrder
    assignedToId?: SortOrder
  }

  export type InboxConversationMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    customerId?: SortOrder
    subject?: SortOrder
    lastMessagePreview?: SortOrder
    lastMessageSentAt?: SortOrder
    unreadCount?: SortOrder
    priority?: SortOrder
    satisfactionScore?: SortOrder
    assignedToId?: SortOrder
    isArchived?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxConversationMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    customerId?: SortOrder
    subject?: SortOrder
    lastMessagePreview?: SortOrder
    lastMessageSentAt?: SortOrder
    unreadCount?: SortOrder
    priority?: SortOrder
    satisfactionScore?: SortOrder
    assignedToId?: SortOrder
    isArchived?: SortOrder
    archivedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxConversationSumOrderByAggregateInput = {
    companyId?: SortOrder
    unreadCount?: SortOrder
    satisfactionScore?: SortOrder
    assignedToId?: SortOrder
  }

  export type EnumInboxConversationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxConversationPriority | EnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxConversationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.InboxConversationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInboxConversationPriorityFilter<$PrismaModel>
    _max?: NestedEnumInboxConversationPriorityFilter<$PrismaModel>
  }

  export type EnumInboxMessageSenderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageSenderType | EnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageSenderTypeFilter<$PrismaModel> | $Enums.InboxMessageSenderType
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type EnumInboxMessageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageStatus | EnumInboxMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageStatusFilter<$PrismaModel> | $Enums.InboxMessageStatus
  }

  export type InboxConversationScalarRelationFilter = {
    is?: InboxConversationWhereInput
    isNot?: InboxConversationWhereInput
  }

  export type InboxMessageCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    conversationId?: SortOrder
    senderType?: SortOrder
    senderUserId?: SortOrder
    content?: SortOrder
    attachments?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxMessageAvgOrderByAggregateInput = {
    companyId?: SortOrder
    senderUserId?: SortOrder
  }

  export type InboxMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    conversationId?: SortOrder
    senderType?: SortOrder
    senderUserId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxMessageMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    conversationId?: SortOrder
    senderType?: SortOrder
    senderUserId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InboxMessageSumOrderByAggregateInput = {
    companyId?: SortOrder
    senderUserId?: SortOrder
  }

  export type EnumInboxMessageSenderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageSenderType | EnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageSenderTypeWithAggregatesFilter<$PrismaModel> | $Enums.InboxMessageSenderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInboxMessageSenderTypeFilter<$PrismaModel>
    _max?: NestedEnumInboxMessageSenderTypeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumInboxMessageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageStatus | EnumInboxMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageStatusWithAggregatesFilter<$PrismaModel> | $Enums.InboxMessageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInboxMessageStatusFilter<$PrismaModel>
    _max?: NestedEnumInboxMessageStatusFilter<$PrismaModel>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompanyMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type FileCreateNestedOneWithoutAvatarForInput = {
    create?: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
    connectOrCreate?: FileCreateOrConnectWithoutAvatarForInput
    connect?: FileWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutUserInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    connect?: CompanyWhereUniqueInput
  }

  export type FileCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type KnowledgeItemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<KnowledgeItemCreateWithoutCreatedByInput, KnowledgeItemUncheckedCreateWithoutCreatedByInput> | KnowledgeItemCreateWithoutCreatedByInput[] | KnowledgeItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCreatedByInput | KnowledgeItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: KnowledgeItemCreateManyCreatedByInputEnvelope
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
  }

  export type QuickAnswerCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<QuickAnswerCreateWithoutCreatedByInput, QuickAnswerUncheckedCreateWithoutCreatedByInput> | QuickAnswerCreateWithoutCreatedByInput[] | QuickAnswerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCreatedByInput | QuickAnswerCreateOrConnectWithoutCreatedByInput[]
    createMany?: QuickAnswerCreateManyCreatedByInputEnvelope
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
  }

  export type AiTemplateCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AiTemplateCreateWithoutCreatedByInput, AiTemplateUncheckedCreateWithoutCreatedByInput> | AiTemplateCreateWithoutCreatedByInput[] | AiTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCreatedByInput | AiTemplateCreateOrConnectWithoutCreatedByInput[]
    createMany?: AiTemplateCreateManyCreatedByInputEnvelope
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
  }

  export type InboxConversationCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<InboxConversationCreateWithoutAssignedToInput, InboxConversationUncheckedCreateWithoutAssignedToInput> | InboxConversationCreateWithoutAssignedToInput[] | InboxConversationUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutAssignedToInput | InboxConversationCreateOrConnectWithoutAssignedToInput[]
    createMany?: InboxConversationCreateManyAssignedToInputEnvelope
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
  }

  export type InboxMessageCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<InboxMessageCreateWithoutSenderUserInput, InboxMessageUncheckedCreateWithoutSenderUserInput> | InboxMessageCreateWithoutSenderUserInput[] | InboxMessageUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutSenderUserInput | InboxMessageCreateOrConnectWithoutSenderUserInput[]
    createMany?: InboxMessageCreateManySenderUserInputEnvelope
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompanyMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<KnowledgeItemCreateWithoutCreatedByInput, KnowledgeItemUncheckedCreateWithoutCreatedByInput> | KnowledgeItemCreateWithoutCreatedByInput[] | KnowledgeItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCreatedByInput | KnowledgeItemCreateOrConnectWithoutCreatedByInput[]
    createMany?: KnowledgeItemCreateManyCreatedByInputEnvelope
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
  }

  export type QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<QuickAnswerCreateWithoutCreatedByInput, QuickAnswerUncheckedCreateWithoutCreatedByInput> | QuickAnswerCreateWithoutCreatedByInput[] | QuickAnswerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCreatedByInput | QuickAnswerCreateOrConnectWithoutCreatedByInput[]
    createMany?: QuickAnswerCreateManyCreatedByInputEnvelope
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
  }

  export type AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AiTemplateCreateWithoutCreatedByInput, AiTemplateUncheckedCreateWithoutCreatedByInput> | AiTemplateCreateWithoutCreatedByInput[] | AiTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCreatedByInput | AiTemplateCreateOrConnectWithoutCreatedByInput[]
    createMany?: AiTemplateCreateManyCreatedByInputEnvelope
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
  }

  export type InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<InboxConversationCreateWithoutAssignedToInput, InboxConversationUncheckedCreateWithoutAssignedToInput> | InboxConversationCreateWithoutAssignedToInput[] | InboxConversationUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutAssignedToInput | InboxConversationCreateOrConnectWithoutAssignedToInput[]
    createMany?: InboxConversationCreateManyAssignedToInputEnvelope
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
  }

  export type InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<InboxMessageCreateWithoutSenderUserInput, InboxMessageUncheckedCreateWithoutSenderUserInput> | InboxMessageCreateWithoutSenderUserInput[] | InboxMessageUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutSenderUserInput | InboxMessageCreateOrConnectWithoutSenderUserInput[]
    createMany?: InboxMessageCreateManySenderUserInputEnvelope
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumProviderFieldUpdateOperationsInput = {
    set?: $Enums.Provider
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: $Enums.Language
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumThemeFieldUpdateOperationsInput = {
    set?: $Enums.Theme
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CompanyMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutUserInput | CompanyMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutUserInput | CompanyMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutUserInput | CompanyMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type FileUpdateOneWithoutAvatarForNestedInput = {
    create?: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
    connectOrCreate?: FileCreateOrConnectWithoutAvatarForInput
    upsert?: FileUpsertWithoutAvatarForInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutAvatarForInput, FileUpdateWithoutAvatarForInput>, FileUncheckedUpdateWithoutAvatarForInput>
  }

  export type CompanyUpdateOneWithoutUserNestedInput = {
    create?: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUserInput, CompanyUpdateWithoutUserInput>, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type KnowledgeItemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<KnowledgeItemCreateWithoutCreatedByInput, KnowledgeItemUncheckedCreateWithoutCreatedByInput> | KnowledgeItemCreateWithoutCreatedByInput[] | KnowledgeItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCreatedByInput | KnowledgeItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: KnowledgeItemUpsertWithWhereUniqueWithoutCreatedByInput | KnowledgeItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: KnowledgeItemCreateManyCreatedByInputEnvelope
    set?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    disconnect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    delete?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    update?: KnowledgeItemUpdateWithWhereUniqueWithoutCreatedByInput | KnowledgeItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: KnowledgeItemUpdateManyWithWhereWithoutCreatedByInput | KnowledgeItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: KnowledgeItemScalarWhereInput | KnowledgeItemScalarWhereInput[]
  }

  export type QuickAnswerUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<QuickAnswerCreateWithoutCreatedByInput, QuickAnswerUncheckedCreateWithoutCreatedByInput> | QuickAnswerCreateWithoutCreatedByInput[] | QuickAnswerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCreatedByInput | QuickAnswerCreateOrConnectWithoutCreatedByInput[]
    upsert?: QuickAnswerUpsertWithWhereUniqueWithoutCreatedByInput | QuickAnswerUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: QuickAnswerCreateManyCreatedByInputEnvelope
    set?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    disconnect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    delete?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    update?: QuickAnswerUpdateWithWhereUniqueWithoutCreatedByInput | QuickAnswerUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: QuickAnswerUpdateManyWithWhereWithoutCreatedByInput | QuickAnswerUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: QuickAnswerScalarWhereInput | QuickAnswerScalarWhereInput[]
  }

  export type AiTemplateUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AiTemplateCreateWithoutCreatedByInput, AiTemplateUncheckedCreateWithoutCreatedByInput> | AiTemplateCreateWithoutCreatedByInput[] | AiTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCreatedByInput | AiTemplateCreateOrConnectWithoutCreatedByInput[]
    upsert?: AiTemplateUpsertWithWhereUniqueWithoutCreatedByInput | AiTemplateUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AiTemplateCreateManyCreatedByInputEnvelope
    set?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    disconnect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    delete?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    update?: AiTemplateUpdateWithWhereUniqueWithoutCreatedByInput | AiTemplateUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AiTemplateUpdateManyWithWhereWithoutCreatedByInput | AiTemplateUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AiTemplateScalarWhereInput | AiTemplateScalarWhereInput[]
  }

  export type InboxConversationUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<InboxConversationCreateWithoutAssignedToInput, InboxConversationUncheckedCreateWithoutAssignedToInput> | InboxConversationCreateWithoutAssignedToInput[] | InboxConversationUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutAssignedToInput | InboxConversationCreateOrConnectWithoutAssignedToInput[]
    upsert?: InboxConversationUpsertWithWhereUniqueWithoutAssignedToInput | InboxConversationUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: InboxConversationCreateManyAssignedToInputEnvelope
    set?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    disconnect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    delete?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    update?: InboxConversationUpdateWithWhereUniqueWithoutAssignedToInput | InboxConversationUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: InboxConversationUpdateManyWithWhereWithoutAssignedToInput | InboxConversationUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
  }

  export type InboxMessageUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<InboxMessageCreateWithoutSenderUserInput, InboxMessageUncheckedCreateWithoutSenderUserInput> | InboxMessageCreateWithoutSenderUserInput[] | InboxMessageUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutSenderUserInput | InboxMessageCreateOrConnectWithoutSenderUserInput[]
    upsert?: InboxMessageUpsertWithWhereUniqueWithoutSenderUserInput | InboxMessageUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: InboxMessageCreateManySenderUserInputEnvelope
    set?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    disconnect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    delete?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    update?: InboxMessageUpdateWithWhereUniqueWithoutSenderUserInput | InboxMessageUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: InboxMessageUpdateManyWithWhereWithoutSenderUserInput | InboxMessageUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CompanyMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutUserInput | CompanyMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutUserInput | CompanyMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutUserInput | CompanyMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput> | FileCreateWithoutUserInput[] | FileUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FileCreateOrConnectWithoutUserInput | FileCreateOrConnectWithoutUserInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutUserInput | FileUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FileCreateManyUserInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutUserInput | FileUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FileUpdateManyWithWhereWithoutUserInput | FileUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<KnowledgeItemCreateWithoutCreatedByInput, KnowledgeItemUncheckedCreateWithoutCreatedByInput> | KnowledgeItemCreateWithoutCreatedByInput[] | KnowledgeItemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCreatedByInput | KnowledgeItemCreateOrConnectWithoutCreatedByInput[]
    upsert?: KnowledgeItemUpsertWithWhereUniqueWithoutCreatedByInput | KnowledgeItemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: KnowledgeItemCreateManyCreatedByInputEnvelope
    set?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    disconnect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    delete?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    update?: KnowledgeItemUpdateWithWhereUniqueWithoutCreatedByInput | KnowledgeItemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: KnowledgeItemUpdateManyWithWhereWithoutCreatedByInput | KnowledgeItemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: KnowledgeItemScalarWhereInput | KnowledgeItemScalarWhereInput[]
  }

  export type QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<QuickAnswerCreateWithoutCreatedByInput, QuickAnswerUncheckedCreateWithoutCreatedByInput> | QuickAnswerCreateWithoutCreatedByInput[] | QuickAnswerUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCreatedByInput | QuickAnswerCreateOrConnectWithoutCreatedByInput[]
    upsert?: QuickAnswerUpsertWithWhereUniqueWithoutCreatedByInput | QuickAnswerUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: QuickAnswerCreateManyCreatedByInputEnvelope
    set?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    disconnect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    delete?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    update?: QuickAnswerUpdateWithWhereUniqueWithoutCreatedByInput | QuickAnswerUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: QuickAnswerUpdateManyWithWhereWithoutCreatedByInput | QuickAnswerUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: QuickAnswerScalarWhereInput | QuickAnswerScalarWhereInput[]
  }

  export type AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AiTemplateCreateWithoutCreatedByInput, AiTemplateUncheckedCreateWithoutCreatedByInput> | AiTemplateCreateWithoutCreatedByInput[] | AiTemplateUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCreatedByInput | AiTemplateCreateOrConnectWithoutCreatedByInput[]
    upsert?: AiTemplateUpsertWithWhereUniqueWithoutCreatedByInput | AiTemplateUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AiTemplateCreateManyCreatedByInputEnvelope
    set?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    disconnect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    delete?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    update?: AiTemplateUpdateWithWhereUniqueWithoutCreatedByInput | AiTemplateUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AiTemplateUpdateManyWithWhereWithoutCreatedByInput | AiTemplateUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AiTemplateScalarWhereInput | AiTemplateScalarWhereInput[]
  }

  export type InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<InboxConversationCreateWithoutAssignedToInput, InboxConversationUncheckedCreateWithoutAssignedToInput> | InboxConversationCreateWithoutAssignedToInput[] | InboxConversationUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutAssignedToInput | InboxConversationCreateOrConnectWithoutAssignedToInput[]
    upsert?: InboxConversationUpsertWithWhereUniqueWithoutAssignedToInput | InboxConversationUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: InboxConversationCreateManyAssignedToInputEnvelope
    set?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    disconnect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    delete?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    update?: InboxConversationUpdateWithWhereUniqueWithoutAssignedToInput | InboxConversationUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: InboxConversationUpdateManyWithWhereWithoutAssignedToInput | InboxConversationUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
  }

  export type InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<InboxMessageCreateWithoutSenderUserInput, InboxMessageUncheckedCreateWithoutSenderUserInput> | InboxMessageCreateWithoutSenderUserInput[] | InboxMessageUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutSenderUserInput | InboxMessageCreateOrConnectWithoutSenderUserInput[]
    upsert?: InboxMessageUpsertWithWhereUniqueWithoutSenderUserInput | InboxMessageUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: InboxMessageCreateManySenderUserInputEnvelope
    set?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    disconnect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    delete?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    update?: InboxMessageUpdateWithWhereUniqueWithoutSenderUserInput | InboxMessageUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: InboxMessageUpdateManyWithWhereWithoutSenderUserInput | InboxMessageUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutFilesInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUncheckedCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneWithoutFilesNestedInput = {
    create?: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilesInput
    upsert?: UserUpsertWithoutFilesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFilesInput, UserUpdateWithoutFilesInput>, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserUncheckedUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type CompanyMemberCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerSubscriptionCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutCompanyInput, CustomerSubscriptionUncheckedCreateWithoutCompanyInput> | CustomerSubscriptionCreateWithoutCompanyInput[] | CustomerSubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutCompanyInput | CustomerSubscriptionCreateOrConnectWithoutCompanyInput[]
    createMany?: CustomerSubscriptionCreateManyCompanyInputEnvelope
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
  }

  export type UsageTrackingCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UsageTrackingCreateWithoutCompanyInput, UsageTrackingUncheckedCreateWithoutCompanyInput> | UsageTrackingCreateWithoutCompanyInput[] | UsageTrackingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutCompanyInput | UsageTrackingCreateOrConnectWithoutCompanyInput[]
    createMany?: UsageTrackingCreateManyCompanyInputEnvelope
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
  }

  export type KnowledgeItemCreateNestedManyWithoutCompanyInput = {
    create?: XOR<KnowledgeItemCreateWithoutCompanyInput, KnowledgeItemUncheckedCreateWithoutCompanyInput> | KnowledgeItemCreateWithoutCompanyInput[] | KnowledgeItemUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCompanyInput | KnowledgeItemCreateOrConnectWithoutCompanyInput[]
    createMany?: KnowledgeItemCreateManyCompanyInputEnvelope
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
  }

  export type QuickAnswerCreateNestedManyWithoutCompanyInput = {
    create?: XOR<QuickAnswerCreateWithoutCompanyInput, QuickAnswerUncheckedCreateWithoutCompanyInput> | QuickAnswerCreateWithoutCompanyInput[] | QuickAnswerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCompanyInput | QuickAnswerCreateOrConnectWithoutCompanyInput[]
    createMany?: QuickAnswerCreateManyCompanyInputEnvelope
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
  }

  export type AiTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AiTemplateCreateWithoutCompanyInput, AiTemplateUncheckedCreateWithoutCompanyInput> | AiTemplateCreateWithoutCompanyInput[] | AiTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCompanyInput | AiTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: AiTemplateCreateManyCompanyInputEnvelope
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
  }

  export type InboxCustomerCreateNestedManyWithoutCompanyInput = {
    create?: XOR<InboxCustomerCreateWithoutCompanyInput, InboxCustomerUncheckedCreateWithoutCompanyInput> | InboxCustomerCreateWithoutCompanyInput[] | InboxCustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxCustomerCreateOrConnectWithoutCompanyInput | InboxCustomerCreateOrConnectWithoutCompanyInput[]
    createMany?: InboxCustomerCreateManyCompanyInputEnvelope
    connect?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
  }

  export type InboxConversationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<InboxConversationCreateWithoutCompanyInput, InboxConversationUncheckedCreateWithoutCompanyInput> | InboxConversationCreateWithoutCompanyInput[] | InboxConversationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCompanyInput | InboxConversationCreateOrConnectWithoutCompanyInput[]
    createMany?: InboxConversationCreateManyCompanyInputEnvelope
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
  }

  export type InboxMessageCreateNestedManyWithoutCompanyInput = {
    create?: XOR<InboxMessageCreateWithoutCompanyInput, InboxMessageUncheckedCreateWithoutCompanyInput> | InboxMessageCreateWithoutCompanyInput[] | InboxMessageUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutCompanyInput | InboxMessageCreateOrConnectWithoutCompanyInput[]
    createMany?: InboxMessageCreateManyCompanyInputEnvelope
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
  }

  export type CompanySettingsCreateNestedOneWithoutCompanyInput = {
    create?: XOR<CompanySettingsCreateWithoutCompanyInput, CompanySettingsUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CompanySettingsCreateOrConnectWithoutCompanyInput
    connect?: CompanySettingsWhereUniqueInput
  }

  export type CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyWhatsappNumberCreateWithoutCompanyInput, CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput> | CompanyWhatsappNumberCreateWithoutCompanyInput[] | CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput | CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyWhatsappNumberCreateManyCompanyInputEnvelope
    connect?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
  }

  export type CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutCompanyInput, CustomerSubscriptionUncheckedCreateWithoutCompanyInput> | CustomerSubscriptionCreateWithoutCompanyInput[] | CustomerSubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutCompanyInput | CustomerSubscriptionCreateOrConnectWithoutCompanyInput[]
    createMany?: CustomerSubscriptionCreateManyCompanyInputEnvelope
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
  }

  export type UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<UsageTrackingCreateWithoutCompanyInput, UsageTrackingUncheckedCreateWithoutCompanyInput> | UsageTrackingCreateWithoutCompanyInput[] | UsageTrackingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutCompanyInput | UsageTrackingCreateOrConnectWithoutCompanyInput[]
    createMany?: UsageTrackingCreateManyCompanyInputEnvelope
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
  }

  export type KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<KnowledgeItemCreateWithoutCompanyInput, KnowledgeItemUncheckedCreateWithoutCompanyInput> | KnowledgeItemCreateWithoutCompanyInput[] | KnowledgeItemUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCompanyInput | KnowledgeItemCreateOrConnectWithoutCompanyInput[]
    createMany?: KnowledgeItemCreateManyCompanyInputEnvelope
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
  }

  export type QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<QuickAnswerCreateWithoutCompanyInput, QuickAnswerUncheckedCreateWithoutCompanyInput> | QuickAnswerCreateWithoutCompanyInput[] | QuickAnswerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCompanyInput | QuickAnswerCreateOrConnectWithoutCompanyInput[]
    createMany?: QuickAnswerCreateManyCompanyInputEnvelope
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
  }

  export type AiTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AiTemplateCreateWithoutCompanyInput, AiTemplateUncheckedCreateWithoutCompanyInput> | AiTemplateCreateWithoutCompanyInput[] | AiTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCompanyInput | AiTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: AiTemplateCreateManyCompanyInputEnvelope
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
  }

  export type InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<InboxCustomerCreateWithoutCompanyInput, InboxCustomerUncheckedCreateWithoutCompanyInput> | InboxCustomerCreateWithoutCompanyInput[] | InboxCustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxCustomerCreateOrConnectWithoutCompanyInput | InboxCustomerCreateOrConnectWithoutCompanyInput[]
    createMany?: InboxCustomerCreateManyCompanyInputEnvelope
    connect?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
  }

  export type InboxConversationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<InboxConversationCreateWithoutCompanyInput, InboxConversationUncheckedCreateWithoutCompanyInput> | InboxConversationCreateWithoutCompanyInput[] | InboxConversationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCompanyInput | InboxConversationCreateOrConnectWithoutCompanyInput[]
    createMany?: InboxConversationCreateManyCompanyInputEnvelope
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
  }

  export type InboxMessageUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<InboxMessageCreateWithoutCompanyInput, InboxMessageUncheckedCreateWithoutCompanyInput> | InboxMessageCreateWithoutCompanyInput[] | InboxMessageUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutCompanyInput | InboxMessageCreateOrConnectWithoutCompanyInput[]
    createMany?: InboxMessageCreateManyCompanyInputEnvelope
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
  }

  export type CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput = {
    create?: XOR<CompanySettingsCreateWithoutCompanyInput, CompanySettingsUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CompanySettingsCreateOrConnectWithoutCompanyInput
    connect?: CompanySettingsWhereUniqueInput
  }

  export type CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyWhatsappNumberCreateWithoutCompanyInput, CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput> | CompanyWhatsappNumberCreateWithoutCompanyInput[] | CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput | CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyWhatsappNumberCreateManyCompanyInputEnvelope
    connect?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
  }

  export type CompanyMemberUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput | CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput | CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutCompanyInput | CompanyMemberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerSubscriptionUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutCompanyInput, CustomerSubscriptionUncheckedCreateWithoutCompanyInput> | CustomerSubscriptionCreateWithoutCompanyInput[] | CustomerSubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutCompanyInput | CustomerSubscriptionCreateOrConnectWithoutCompanyInput[]
    upsert?: CustomerSubscriptionUpsertWithWhereUniqueWithoutCompanyInput | CustomerSubscriptionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CustomerSubscriptionCreateManyCompanyInputEnvelope
    set?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    disconnect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    delete?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    update?: CustomerSubscriptionUpdateWithWhereUniqueWithoutCompanyInput | CustomerSubscriptionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CustomerSubscriptionUpdateManyWithWhereWithoutCompanyInput | CustomerSubscriptionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CustomerSubscriptionScalarWhereInput | CustomerSubscriptionScalarWhereInput[]
  }

  export type UsageTrackingUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UsageTrackingCreateWithoutCompanyInput, UsageTrackingUncheckedCreateWithoutCompanyInput> | UsageTrackingCreateWithoutCompanyInput[] | UsageTrackingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutCompanyInput | UsageTrackingCreateOrConnectWithoutCompanyInput[]
    upsert?: UsageTrackingUpsertWithWhereUniqueWithoutCompanyInput | UsageTrackingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UsageTrackingCreateManyCompanyInputEnvelope
    set?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    disconnect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    delete?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    update?: UsageTrackingUpdateWithWhereUniqueWithoutCompanyInput | UsageTrackingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UsageTrackingUpdateManyWithWhereWithoutCompanyInput | UsageTrackingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UsageTrackingScalarWhereInput | UsageTrackingScalarWhereInput[]
  }

  export type KnowledgeItemUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<KnowledgeItemCreateWithoutCompanyInput, KnowledgeItemUncheckedCreateWithoutCompanyInput> | KnowledgeItemCreateWithoutCompanyInput[] | KnowledgeItemUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCompanyInput | KnowledgeItemCreateOrConnectWithoutCompanyInput[]
    upsert?: KnowledgeItemUpsertWithWhereUniqueWithoutCompanyInput | KnowledgeItemUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: KnowledgeItemCreateManyCompanyInputEnvelope
    set?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    disconnect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    delete?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    update?: KnowledgeItemUpdateWithWhereUniqueWithoutCompanyInput | KnowledgeItemUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: KnowledgeItemUpdateManyWithWhereWithoutCompanyInput | KnowledgeItemUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: KnowledgeItemScalarWhereInput | KnowledgeItemScalarWhereInput[]
  }

  export type QuickAnswerUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<QuickAnswerCreateWithoutCompanyInput, QuickAnswerUncheckedCreateWithoutCompanyInput> | QuickAnswerCreateWithoutCompanyInput[] | QuickAnswerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCompanyInput | QuickAnswerCreateOrConnectWithoutCompanyInput[]
    upsert?: QuickAnswerUpsertWithWhereUniqueWithoutCompanyInput | QuickAnswerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: QuickAnswerCreateManyCompanyInputEnvelope
    set?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    disconnect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    delete?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    update?: QuickAnswerUpdateWithWhereUniqueWithoutCompanyInput | QuickAnswerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: QuickAnswerUpdateManyWithWhereWithoutCompanyInput | QuickAnswerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: QuickAnswerScalarWhereInput | QuickAnswerScalarWhereInput[]
  }

  export type AiTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AiTemplateCreateWithoutCompanyInput, AiTemplateUncheckedCreateWithoutCompanyInput> | AiTemplateCreateWithoutCompanyInput[] | AiTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCompanyInput | AiTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: AiTemplateUpsertWithWhereUniqueWithoutCompanyInput | AiTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AiTemplateCreateManyCompanyInputEnvelope
    set?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    disconnect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    delete?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    update?: AiTemplateUpdateWithWhereUniqueWithoutCompanyInput | AiTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AiTemplateUpdateManyWithWhereWithoutCompanyInput | AiTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AiTemplateScalarWhereInput | AiTemplateScalarWhereInput[]
  }

  export type InboxCustomerUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<InboxCustomerCreateWithoutCompanyInput, InboxCustomerUncheckedCreateWithoutCompanyInput> | InboxCustomerCreateWithoutCompanyInput[] | InboxCustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxCustomerCreateOrConnectWithoutCompanyInput | InboxCustomerCreateOrConnectWithoutCompanyInput[]
    upsert?: InboxCustomerUpsertWithWhereUniqueWithoutCompanyInput | InboxCustomerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: InboxCustomerCreateManyCompanyInputEnvelope
    set?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    disconnect?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    delete?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    connect?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    update?: InboxCustomerUpdateWithWhereUniqueWithoutCompanyInput | InboxCustomerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: InboxCustomerUpdateManyWithWhereWithoutCompanyInput | InboxCustomerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: InboxCustomerScalarWhereInput | InboxCustomerScalarWhereInput[]
  }

  export type InboxConversationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<InboxConversationCreateWithoutCompanyInput, InboxConversationUncheckedCreateWithoutCompanyInput> | InboxConversationCreateWithoutCompanyInput[] | InboxConversationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCompanyInput | InboxConversationCreateOrConnectWithoutCompanyInput[]
    upsert?: InboxConversationUpsertWithWhereUniqueWithoutCompanyInput | InboxConversationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: InboxConversationCreateManyCompanyInputEnvelope
    set?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    disconnect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    delete?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    update?: InboxConversationUpdateWithWhereUniqueWithoutCompanyInput | InboxConversationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: InboxConversationUpdateManyWithWhereWithoutCompanyInput | InboxConversationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
  }

  export type InboxMessageUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<InboxMessageCreateWithoutCompanyInput, InboxMessageUncheckedCreateWithoutCompanyInput> | InboxMessageCreateWithoutCompanyInput[] | InboxMessageUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutCompanyInput | InboxMessageCreateOrConnectWithoutCompanyInput[]
    upsert?: InboxMessageUpsertWithWhereUniqueWithoutCompanyInput | InboxMessageUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: InboxMessageCreateManyCompanyInputEnvelope
    set?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    disconnect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    delete?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    update?: InboxMessageUpdateWithWhereUniqueWithoutCompanyInput | InboxMessageUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: InboxMessageUpdateManyWithWhereWithoutCompanyInput | InboxMessageUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
  }

  export type CompanySettingsUpdateOneWithoutCompanyNestedInput = {
    create?: XOR<CompanySettingsCreateWithoutCompanyInput, CompanySettingsUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CompanySettingsCreateOrConnectWithoutCompanyInput
    upsert?: CompanySettingsUpsertWithoutCompanyInput
    disconnect?: CompanySettingsWhereInput | boolean
    delete?: CompanySettingsWhereInput | boolean
    connect?: CompanySettingsWhereUniqueInput
    update?: XOR<XOR<CompanySettingsUpdateToOneWithWhereWithoutCompanyInput, CompanySettingsUpdateWithoutCompanyInput>, CompanySettingsUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyWhatsappNumberCreateWithoutCompanyInput, CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput> | CompanyWhatsappNumberCreateWithoutCompanyInput[] | CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput | CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyWhatsappNumberUpsertWithWhereUniqueWithoutCompanyInput | CompanyWhatsappNumberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyWhatsappNumberCreateManyCompanyInputEnvelope
    set?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    disconnect?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    delete?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    connect?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    update?: CompanyWhatsappNumberUpdateWithWhereUniqueWithoutCompanyInput | CompanyWhatsappNumberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyWhatsappNumberUpdateManyWithWhereWithoutCompanyInput | CompanyWhatsappNumberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyWhatsappNumberScalarWhereInput | CompanyWhatsappNumberScalarWhereInput[]
  }

  export type CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput | CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput | CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutCompanyInput | CompanyMemberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput> | UserCreateWithoutCompanyInput[] | UserUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput | UserCreateOrConnectWithoutCompanyInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCompanyInput | UserUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UserCreateManyCompanyInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCompanyInput | UserUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCompanyInput | UserUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutCompanyInput, CustomerSubscriptionUncheckedCreateWithoutCompanyInput> | CustomerSubscriptionCreateWithoutCompanyInput[] | CustomerSubscriptionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutCompanyInput | CustomerSubscriptionCreateOrConnectWithoutCompanyInput[]
    upsert?: CustomerSubscriptionUpsertWithWhereUniqueWithoutCompanyInput | CustomerSubscriptionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CustomerSubscriptionCreateManyCompanyInputEnvelope
    set?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    disconnect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    delete?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    update?: CustomerSubscriptionUpdateWithWhereUniqueWithoutCompanyInput | CustomerSubscriptionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CustomerSubscriptionUpdateManyWithWhereWithoutCompanyInput | CustomerSubscriptionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CustomerSubscriptionScalarWhereInput | CustomerSubscriptionScalarWhereInput[]
  }

  export type UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<UsageTrackingCreateWithoutCompanyInput, UsageTrackingUncheckedCreateWithoutCompanyInput> | UsageTrackingCreateWithoutCompanyInput[] | UsageTrackingUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutCompanyInput | UsageTrackingCreateOrConnectWithoutCompanyInput[]
    upsert?: UsageTrackingUpsertWithWhereUniqueWithoutCompanyInput | UsageTrackingUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: UsageTrackingCreateManyCompanyInputEnvelope
    set?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    disconnect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    delete?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    update?: UsageTrackingUpdateWithWhereUniqueWithoutCompanyInput | UsageTrackingUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: UsageTrackingUpdateManyWithWhereWithoutCompanyInput | UsageTrackingUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: UsageTrackingScalarWhereInput | UsageTrackingScalarWhereInput[]
  }

  export type KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<KnowledgeItemCreateWithoutCompanyInput, KnowledgeItemUncheckedCreateWithoutCompanyInput> | KnowledgeItemCreateWithoutCompanyInput[] | KnowledgeItemUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: KnowledgeItemCreateOrConnectWithoutCompanyInput | KnowledgeItemCreateOrConnectWithoutCompanyInput[]
    upsert?: KnowledgeItemUpsertWithWhereUniqueWithoutCompanyInput | KnowledgeItemUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: KnowledgeItemCreateManyCompanyInputEnvelope
    set?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    disconnect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    delete?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    connect?: KnowledgeItemWhereUniqueInput | KnowledgeItemWhereUniqueInput[]
    update?: KnowledgeItemUpdateWithWhereUniqueWithoutCompanyInput | KnowledgeItemUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: KnowledgeItemUpdateManyWithWhereWithoutCompanyInput | KnowledgeItemUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: KnowledgeItemScalarWhereInput | KnowledgeItemScalarWhereInput[]
  }

  export type QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<QuickAnswerCreateWithoutCompanyInput, QuickAnswerUncheckedCreateWithoutCompanyInput> | QuickAnswerCreateWithoutCompanyInput[] | QuickAnswerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuickAnswerCreateOrConnectWithoutCompanyInput | QuickAnswerCreateOrConnectWithoutCompanyInput[]
    upsert?: QuickAnswerUpsertWithWhereUniqueWithoutCompanyInput | QuickAnswerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: QuickAnswerCreateManyCompanyInputEnvelope
    set?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    disconnect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    delete?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    connect?: QuickAnswerWhereUniqueInput | QuickAnswerWhereUniqueInput[]
    update?: QuickAnswerUpdateWithWhereUniqueWithoutCompanyInput | QuickAnswerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: QuickAnswerUpdateManyWithWhereWithoutCompanyInput | QuickAnswerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: QuickAnswerScalarWhereInput | QuickAnswerScalarWhereInput[]
  }

  export type AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AiTemplateCreateWithoutCompanyInput, AiTemplateUncheckedCreateWithoutCompanyInput> | AiTemplateCreateWithoutCompanyInput[] | AiTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AiTemplateCreateOrConnectWithoutCompanyInput | AiTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: AiTemplateUpsertWithWhereUniqueWithoutCompanyInput | AiTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AiTemplateCreateManyCompanyInputEnvelope
    set?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    disconnect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    delete?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    connect?: AiTemplateWhereUniqueInput | AiTemplateWhereUniqueInput[]
    update?: AiTemplateUpdateWithWhereUniqueWithoutCompanyInput | AiTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AiTemplateUpdateManyWithWhereWithoutCompanyInput | AiTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AiTemplateScalarWhereInput | AiTemplateScalarWhereInput[]
  }

  export type InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<InboxCustomerCreateWithoutCompanyInput, InboxCustomerUncheckedCreateWithoutCompanyInput> | InboxCustomerCreateWithoutCompanyInput[] | InboxCustomerUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxCustomerCreateOrConnectWithoutCompanyInput | InboxCustomerCreateOrConnectWithoutCompanyInput[]
    upsert?: InboxCustomerUpsertWithWhereUniqueWithoutCompanyInput | InboxCustomerUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: InboxCustomerCreateManyCompanyInputEnvelope
    set?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    disconnect?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    delete?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    connect?: InboxCustomerWhereUniqueInput | InboxCustomerWhereUniqueInput[]
    update?: InboxCustomerUpdateWithWhereUniqueWithoutCompanyInput | InboxCustomerUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: InboxCustomerUpdateManyWithWhereWithoutCompanyInput | InboxCustomerUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: InboxCustomerScalarWhereInput | InboxCustomerScalarWhereInput[]
  }

  export type InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<InboxConversationCreateWithoutCompanyInput, InboxConversationUncheckedCreateWithoutCompanyInput> | InboxConversationCreateWithoutCompanyInput[] | InboxConversationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCompanyInput | InboxConversationCreateOrConnectWithoutCompanyInput[]
    upsert?: InboxConversationUpsertWithWhereUniqueWithoutCompanyInput | InboxConversationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: InboxConversationCreateManyCompanyInputEnvelope
    set?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    disconnect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    delete?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    update?: InboxConversationUpdateWithWhereUniqueWithoutCompanyInput | InboxConversationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: InboxConversationUpdateManyWithWhereWithoutCompanyInput | InboxConversationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
  }

  export type InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<InboxMessageCreateWithoutCompanyInput, InboxMessageUncheckedCreateWithoutCompanyInput> | InboxMessageCreateWithoutCompanyInput[] | InboxMessageUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutCompanyInput | InboxMessageCreateOrConnectWithoutCompanyInput[]
    upsert?: InboxMessageUpsertWithWhereUniqueWithoutCompanyInput | InboxMessageUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: InboxMessageCreateManyCompanyInputEnvelope
    set?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    disconnect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    delete?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    update?: InboxMessageUpdateWithWhereUniqueWithoutCompanyInput | InboxMessageUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: InboxMessageUpdateManyWithWhereWithoutCompanyInput | InboxMessageUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
  }

  export type CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput = {
    create?: XOR<CompanySettingsCreateWithoutCompanyInput, CompanySettingsUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CompanySettingsCreateOrConnectWithoutCompanyInput
    upsert?: CompanySettingsUpsertWithoutCompanyInput
    disconnect?: CompanySettingsWhereInput | boolean
    delete?: CompanySettingsWhereInput | boolean
    connect?: CompanySettingsWhereUniqueInput
    update?: XOR<XOR<CompanySettingsUpdateToOneWithWhereWithoutCompanyInput, CompanySettingsUpdateWithoutCompanyInput>, CompanySettingsUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyWhatsappNumberCreateWithoutCompanyInput, CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput> | CompanyWhatsappNumberCreateWithoutCompanyInput[] | CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput | CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyWhatsappNumberUpsertWithWhereUniqueWithoutCompanyInput | CompanyWhatsappNumberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyWhatsappNumberCreateManyCompanyInputEnvelope
    set?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    disconnect?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    delete?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    connect?: CompanyWhatsappNumberWhereUniqueInput | CompanyWhatsappNumberWhereUniqueInput[]
    update?: CompanyWhatsappNumberUpdateWithWhereUniqueWithoutCompanyInput | CompanyWhatsappNumberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyWhatsappNumberUpdateManyWithWhereWithoutCompanyInput | CompanyWhatsappNumberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyWhatsappNumberScalarWhereInput | CompanyWhatsappNumberScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutKnowledgeItemsInput = {
    create?: XOR<CompanyCreateWithoutKnowledgeItemsInput, CompanyUncheckedCreateWithoutKnowledgeItemsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutKnowledgeItemsInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutKnowledgeItemsInput = {
    create?: XOR<UserCreateWithoutKnowledgeItemsInput, UserUncheckedCreateWithoutKnowledgeItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnowledgeItemsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumKnowledgeItemTypeFieldUpdateOperationsInput = {
    set?: $Enums.KnowledgeItemType
  }

  export type CompanyUpdateOneRequiredWithoutKnowledgeItemsNestedInput = {
    create?: XOR<CompanyCreateWithoutKnowledgeItemsInput, CompanyUncheckedCreateWithoutKnowledgeItemsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutKnowledgeItemsInput
    upsert?: CompanyUpsertWithoutKnowledgeItemsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutKnowledgeItemsInput, CompanyUpdateWithoutKnowledgeItemsInput>, CompanyUncheckedUpdateWithoutKnowledgeItemsInput>
  }

  export type UserUpdateOneWithoutKnowledgeItemsNestedInput = {
    create?: XOR<UserCreateWithoutKnowledgeItemsInput, UserUncheckedCreateWithoutKnowledgeItemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutKnowledgeItemsInput
    upsert?: UserUpsertWithoutKnowledgeItemsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKnowledgeItemsInput, UserUpdateWithoutKnowledgeItemsInput>, UserUncheckedUpdateWithoutKnowledgeItemsInput>
  }

  export type CompanyCreateNestedOneWithoutQuickAnswersInput = {
    create?: XOR<CompanyCreateWithoutQuickAnswersInput, CompanyUncheckedCreateWithoutQuickAnswersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuickAnswersInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuickAnswersInput = {
    create?: XOR<UserCreateWithoutQuickAnswersInput, UserUncheckedCreateWithoutQuickAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuickAnswersInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutQuickAnswersNestedInput = {
    create?: XOR<CompanyCreateWithoutQuickAnswersInput, CompanyUncheckedCreateWithoutQuickAnswersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuickAnswersInput
    upsert?: CompanyUpsertWithoutQuickAnswersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutQuickAnswersInput, CompanyUpdateWithoutQuickAnswersInput>, CompanyUncheckedUpdateWithoutQuickAnswersInput>
  }

  export type UserUpdateOneWithoutQuickAnswersNestedInput = {
    create?: XOR<UserCreateWithoutQuickAnswersInput, UserUncheckedCreateWithoutQuickAnswersInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuickAnswersInput
    upsert?: UserUpsertWithoutQuickAnswersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuickAnswersInput, UserUpdateWithoutQuickAnswersInput>, UserUncheckedUpdateWithoutQuickAnswersInput>
  }

  export type CompanyCreateNestedOneWithoutAiTemplatesInput = {
    create?: XOR<CompanyCreateWithoutAiTemplatesInput, CompanyUncheckedCreateWithoutAiTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAiTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAiTemplatesInput = {
    create?: XOR<UserCreateWithoutAiTemplatesInput, UserUncheckedCreateWithoutAiTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiTemplatesInput
    connect?: UserWhereUniqueInput
  }

  export type AiTemplateOptionCreateNestedManyWithoutTemplateInput = {
    create?: XOR<AiTemplateOptionCreateWithoutTemplateInput, AiTemplateOptionUncheckedCreateWithoutTemplateInput> | AiTemplateOptionCreateWithoutTemplateInput[] | AiTemplateOptionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: AiTemplateOptionCreateOrConnectWithoutTemplateInput | AiTemplateOptionCreateOrConnectWithoutTemplateInput[]
    createMany?: AiTemplateOptionCreateManyTemplateInputEnvelope
    connect?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
  }

  export type AiTemplateOptionUncheckedCreateNestedManyWithoutTemplateInput = {
    create?: XOR<AiTemplateOptionCreateWithoutTemplateInput, AiTemplateOptionUncheckedCreateWithoutTemplateInput> | AiTemplateOptionCreateWithoutTemplateInput[] | AiTemplateOptionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: AiTemplateOptionCreateOrConnectWithoutTemplateInput | AiTemplateOptionCreateOrConnectWithoutTemplateInput[]
    createMany?: AiTemplateOptionCreateManyTemplateInputEnvelope
    connect?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
  }

  export type EnumAiTemplateCategoryFieldUpdateOperationsInput = {
    set?: $Enums.AiTemplateCategory
  }

  export type CompanyUpdateOneRequiredWithoutAiTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutAiTemplatesInput, CompanyUncheckedCreateWithoutAiTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAiTemplatesInput
    upsert?: CompanyUpsertWithoutAiTemplatesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAiTemplatesInput, CompanyUpdateWithoutAiTemplatesInput>, CompanyUncheckedUpdateWithoutAiTemplatesInput>
  }

  export type UserUpdateOneWithoutAiTemplatesNestedInput = {
    create?: XOR<UserCreateWithoutAiTemplatesInput, UserUncheckedCreateWithoutAiTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiTemplatesInput
    upsert?: UserUpsertWithoutAiTemplatesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAiTemplatesInput, UserUpdateWithoutAiTemplatesInput>, UserUncheckedUpdateWithoutAiTemplatesInput>
  }

  export type AiTemplateOptionUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<AiTemplateOptionCreateWithoutTemplateInput, AiTemplateOptionUncheckedCreateWithoutTemplateInput> | AiTemplateOptionCreateWithoutTemplateInput[] | AiTemplateOptionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: AiTemplateOptionCreateOrConnectWithoutTemplateInput | AiTemplateOptionCreateOrConnectWithoutTemplateInput[]
    upsert?: AiTemplateOptionUpsertWithWhereUniqueWithoutTemplateInput | AiTemplateOptionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: AiTemplateOptionCreateManyTemplateInputEnvelope
    set?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    disconnect?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    delete?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    connect?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    update?: AiTemplateOptionUpdateWithWhereUniqueWithoutTemplateInput | AiTemplateOptionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: AiTemplateOptionUpdateManyWithWhereWithoutTemplateInput | AiTemplateOptionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: AiTemplateOptionScalarWhereInput | AiTemplateOptionScalarWhereInput[]
  }

  export type AiTemplateOptionUncheckedUpdateManyWithoutTemplateNestedInput = {
    create?: XOR<AiTemplateOptionCreateWithoutTemplateInput, AiTemplateOptionUncheckedCreateWithoutTemplateInput> | AiTemplateOptionCreateWithoutTemplateInput[] | AiTemplateOptionUncheckedCreateWithoutTemplateInput[]
    connectOrCreate?: AiTemplateOptionCreateOrConnectWithoutTemplateInput | AiTemplateOptionCreateOrConnectWithoutTemplateInput[]
    upsert?: AiTemplateOptionUpsertWithWhereUniqueWithoutTemplateInput | AiTemplateOptionUpsertWithWhereUniqueWithoutTemplateInput[]
    createMany?: AiTemplateOptionCreateManyTemplateInputEnvelope
    set?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    disconnect?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    delete?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    connect?: AiTemplateOptionWhereUniqueInput | AiTemplateOptionWhereUniqueInput[]
    update?: AiTemplateOptionUpdateWithWhereUniqueWithoutTemplateInput | AiTemplateOptionUpdateWithWhereUniqueWithoutTemplateInput[]
    updateMany?: AiTemplateOptionUpdateManyWithWhereWithoutTemplateInput | AiTemplateOptionUpdateManyWithWhereWithoutTemplateInput[]
    deleteMany?: AiTemplateOptionScalarWhereInput | AiTemplateOptionScalarWhereInput[]
  }

  export type AiTemplateCreateNestedOneWithoutOptionsInput = {
    create?: XOR<AiTemplateCreateWithoutOptionsInput, AiTemplateUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: AiTemplateCreateOrConnectWithoutOptionsInput
    connect?: AiTemplateWhereUniqueInput
  }

  export type AiTemplateUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<AiTemplateCreateWithoutOptionsInput, AiTemplateUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: AiTemplateCreateOrConnectWithoutOptionsInput
    upsert?: AiTemplateUpsertWithoutOptionsInput
    connect?: AiTemplateWhereUniqueInput
    update?: XOR<XOR<AiTemplateUpdateToOneWithWhereWithoutOptionsInput, AiTemplateUpdateWithoutOptionsInput>, AiTemplateUncheckedUpdateWithoutOptionsInput>
  }

  export type CompanyCreateNestedOneWithoutMembersInput = {
    create?: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMembersInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompanyMembersInput = {
    create?: XOR<UserCreateWithoutCompanyMembersInput, UserUncheckedCreateWithoutCompanyMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyMembersInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumCompanyMemberStatusFieldUpdateOperationsInput = {
    set?: $Enums.CompanyMemberStatus
  }

  export type CompanyUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMembersInput
    upsert?: CompanyUpsertWithoutMembersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutMembersInput, CompanyUpdateWithoutMembersInput>, CompanyUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutCompanyMembersNestedInput = {
    create?: XOR<UserCreateWithoutCompanyMembersInput, UserUncheckedCreateWithoutCompanyMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyMembersInput
    upsert?: UserUpsertWithoutCompanyMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompanyMembersInput, UserUpdateWithoutCompanyMembersInput>, UserUncheckedUpdateWithoutCompanyMembersInput>
  }

  export type CustomerSubscriptionCreateNestedManyWithoutPlanInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutPlanInput, CustomerSubscriptionUncheckedCreateWithoutPlanInput> | CustomerSubscriptionCreateWithoutPlanInput[] | CustomerSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutPlanInput | CustomerSubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: CustomerSubscriptionCreateManyPlanInputEnvelope
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
  }

  export type CustomerSubscriptionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutPlanInput, CustomerSubscriptionUncheckedCreateWithoutPlanInput> | CustomerSubscriptionCreateWithoutPlanInput[] | CustomerSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutPlanInput | CustomerSubscriptionCreateOrConnectWithoutPlanInput[]
    createMany?: CustomerSubscriptionCreateManyPlanInputEnvelope
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
  }

  export type EnumPlanTypeFieldUpdateOperationsInput = {
    set?: $Enums.PlanType
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type CustomerSubscriptionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutPlanInput, CustomerSubscriptionUncheckedCreateWithoutPlanInput> | CustomerSubscriptionCreateWithoutPlanInput[] | CustomerSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutPlanInput | CustomerSubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: CustomerSubscriptionUpsertWithWhereUniqueWithoutPlanInput | CustomerSubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: CustomerSubscriptionCreateManyPlanInputEnvelope
    set?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    disconnect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    delete?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    update?: CustomerSubscriptionUpdateWithWhereUniqueWithoutPlanInput | CustomerSubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: CustomerSubscriptionUpdateManyWithWhereWithoutPlanInput | CustomerSubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: CustomerSubscriptionScalarWhereInput | CustomerSubscriptionScalarWhereInput[]
  }

  export type CustomerSubscriptionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutPlanInput, CustomerSubscriptionUncheckedCreateWithoutPlanInput> | CustomerSubscriptionCreateWithoutPlanInput[] | CustomerSubscriptionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutPlanInput | CustomerSubscriptionCreateOrConnectWithoutPlanInput[]
    upsert?: CustomerSubscriptionUpsertWithWhereUniqueWithoutPlanInput | CustomerSubscriptionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: CustomerSubscriptionCreateManyPlanInputEnvelope
    set?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    disconnect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    delete?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    connect?: CustomerSubscriptionWhereUniqueInput | CustomerSubscriptionWhereUniqueInput[]
    update?: CustomerSubscriptionUpdateWithWhereUniqueWithoutPlanInput | CustomerSubscriptionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: CustomerSubscriptionUpdateManyWithWhereWithoutPlanInput | CustomerSubscriptionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: CustomerSubscriptionScalarWhereInput | CustomerSubscriptionScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutCustomerSubscriptionInput = {
    create?: XOR<CompanyCreateWithoutCustomerSubscriptionInput, CompanyUncheckedCreateWithoutCustomerSubscriptionInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCustomerSubscriptionInput
    connect?: CompanyWhereUniqueInput
  }

  export type SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
  }

  export type UsageTrackingCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<UsageTrackingCreateWithoutSubscriptionInput, UsageTrackingUncheckedCreateWithoutSubscriptionInput> | UsageTrackingCreateWithoutSubscriptionInput[] | UsageTrackingUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutSubscriptionInput | UsageTrackingCreateOrConnectWithoutSubscriptionInput[]
    createMany?: UsageTrackingCreateManySubscriptionInputEnvelope
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
  }

  export type UsageTrackingUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<UsageTrackingCreateWithoutSubscriptionInput, UsageTrackingUncheckedCreateWithoutSubscriptionInput> | UsageTrackingCreateWithoutSubscriptionInput[] | UsageTrackingUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutSubscriptionInput | UsageTrackingCreateOrConnectWithoutSubscriptionInput[]
    createMany?: UsageTrackingCreateManySubscriptionInputEnvelope
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
  }

  export type EnumSubscriptionStatusFieldUpdateOperationsInput = {
    set?: $Enums.SubscriptionStatus
  }

  export type EnumBillingIntervalFieldUpdateOperationsInput = {
    set?: $Enums.BillingInterval
  }

  export type CompanyUpdateOneRequiredWithoutCustomerSubscriptionNestedInput = {
    create?: XOR<CompanyCreateWithoutCustomerSubscriptionInput, CompanyUncheckedCreateWithoutCustomerSubscriptionInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCustomerSubscriptionInput
    upsert?: CompanyUpsertWithoutCustomerSubscriptionInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCustomerSubscriptionInput, CompanyUpdateWithoutCustomerSubscriptionInput>, CompanyUncheckedUpdateWithoutCustomerSubscriptionInput>
  }

  export type SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput
    upsert?: SubscriptionPlanUpsertWithoutSubscriptionsInput
    connect?: SubscriptionPlanWhereUniqueInput
    update?: XOR<XOR<SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput, SubscriptionPlanUpdateWithoutSubscriptionsInput>, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type UsageTrackingUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<UsageTrackingCreateWithoutSubscriptionInput, UsageTrackingUncheckedCreateWithoutSubscriptionInput> | UsageTrackingCreateWithoutSubscriptionInput[] | UsageTrackingUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutSubscriptionInput | UsageTrackingCreateOrConnectWithoutSubscriptionInput[]
    upsert?: UsageTrackingUpsertWithWhereUniqueWithoutSubscriptionInput | UsageTrackingUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: UsageTrackingCreateManySubscriptionInputEnvelope
    set?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    disconnect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    delete?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    update?: UsageTrackingUpdateWithWhereUniqueWithoutSubscriptionInput | UsageTrackingUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: UsageTrackingUpdateManyWithWhereWithoutSubscriptionInput | UsageTrackingUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: UsageTrackingScalarWhereInput | UsageTrackingScalarWhereInput[]
  }

  export type UsageTrackingUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<UsageTrackingCreateWithoutSubscriptionInput, UsageTrackingUncheckedCreateWithoutSubscriptionInput> | UsageTrackingCreateWithoutSubscriptionInput[] | UsageTrackingUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: UsageTrackingCreateOrConnectWithoutSubscriptionInput | UsageTrackingCreateOrConnectWithoutSubscriptionInput[]
    upsert?: UsageTrackingUpsertWithWhereUniqueWithoutSubscriptionInput | UsageTrackingUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: UsageTrackingCreateManySubscriptionInputEnvelope
    set?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    disconnect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    delete?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    connect?: UsageTrackingWhereUniqueInput | UsageTrackingWhereUniqueInput[]
    update?: UsageTrackingUpdateWithWhereUniqueWithoutSubscriptionInput | UsageTrackingUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: UsageTrackingUpdateManyWithWhereWithoutSubscriptionInput | UsageTrackingUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: UsageTrackingScalarWhereInput | UsageTrackingScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutUsageTrackingInput = {
    create?: XOR<CompanyCreateWithoutUsageTrackingInput, CompanyUncheckedCreateWithoutUsageTrackingInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsageTrackingInput
    connect?: CompanyWhereUniqueInput
  }

  export type CustomerSubscriptionCreateNestedOneWithoutUsageTrackingInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutUsageTrackingInput, CustomerSubscriptionUncheckedCreateWithoutUsageTrackingInput>
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutUsageTrackingInput
    connect?: CustomerSubscriptionWhereUniqueInput
  }

  export type EnumUsageMetricTypeFieldUpdateOperationsInput = {
    set?: $Enums.UsageMetricType
  }

  export type CompanyUpdateOneRequiredWithoutUsageTrackingNestedInput = {
    create?: XOR<CompanyCreateWithoutUsageTrackingInput, CompanyUncheckedCreateWithoutUsageTrackingInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutUsageTrackingInput
    upsert?: CompanyUpsertWithoutUsageTrackingInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutUsageTrackingInput, CompanyUpdateWithoutUsageTrackingInput>, CompanyUncheckedUpdateWithoutUsageTrackingInput>
  }

  export type CustomerSubscriptionUpdateOneRequiredWithoutUsageTrackingNestedInput = {
    create?: XOR<CustomerSubscriptionCreateWithoutUsageTrackingInput, CustomerSubscriptionUncheckedCreateWithoutUsageTrackingInput>
    connectOrCreate?: CustomerSubscriptionCreateOrConnectWithoutUsageTrackingInput
    upsert?: CustomerSubscriptionUpsertWithoutUsageTrackingInput
    connect?: CustomerSubscriptionWhereUniqueInput
    update?: XOR<XOR<CustomerSubscriptionUpdateToOneWithWhereWithoutUsageTrackingInput, CustomerSubscriptionUpdateWithoutUsageTrackingInput>, CustomerSubscriptionUncheckedUpdateWithoutUsageTrackingInput>
  }

  export type CompanyCreateNestedOneWithoutSettingsInput = {
    create?: XOR<CompanyCreateWithoutSettingsInput, CompanyUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSettingsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<CompanyCreateWithoutSettingsInput, CompanyUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSettingsInput
    upsert?: CompanyUpsertWithoutSettingsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSettingsInput, CompanyUpdateWithoutSettingsInput>, CompanyUncheckedUpdateWithoutSettingsInput>
  }

  export type CompanyCreateNestedOneWithoutWhatsappNumbersInput = {
    create?: XOR<CompanyCreateWithoutWhatsappNumbersInput, CompanyUncheckedCreateWithoutWhatsappNumbersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutWhatsappNumbersInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutWhatsappNumbersNestedInput = {
    create?: XOR<CompanyCreateWithoutWhatsappNumbersInput, CompanyUncheckedCreateWithoutWhatsappNumbersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutWhatsappNumbersInput
    upsert?: CompanyUpsertWithoutWhatsappNumbersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutWhatsappNumbersInput, CompanyUpdateWithoutWhatsappNumbersInput>, CompanyUncheckedUpdateWithoutWhatsappNumbersInput>
  }

  export type CompanyCreateNestedOneWithoutInboxCustomersInput = {
    create?: XOR<CompanyCreateWithoutInboxCustomersInput, CompanyUncheckedCreateWithoutInboxCustomersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutInboxCustomersInput
    connect?: CompanyWhereUniqueInput
  }

  export type InboxConversationCreateNestedManyWithoutCustomerInput = {
    create?: XOR<InboxConversationCreateWithoutCustomerInput, InboxConversationUncheckedCreateWithoutCustomerInput> | InboxConversationCreateWithoutCustomerInput[] | InboxConversationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCustomerInput | InboxConversationCreateOrConnectWithoutCustomerInput[]
    createMany?: InboxConversationCreateManyCustomerInputEnvelope
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
  }

  export type InboxConversationUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<InboxConversationCreateWithoutCustomerInput, InboxConversationUncheckedCreateWithoutCustomerInput> | InboxConversationCreateWithoutCustomerInput[] | InboxConversationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCustomerInput | InboxConversationCreateOrConnectWithoutCustomerInput[]
    createMany?: InboxConversationCreateManyCustomerInputEnvelope
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutInboxCustomersNestedInput = {
    create?: XOR<CompanyCreateWithoutInboxCustomersInput, CompanyUncheckedCreateWithoutInboxCustomersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutInboxCustomersInput
    upsert?: CompanyUpsertWithoutInboxCustomersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutInboxCustomersInput, CompanyUpdateWithoutInboxCustomersInput>, CompanyUncheckedUpdateWithoutInboxCustomersInput>
  }

  export type InboxConversationUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<InboxConversationCreateWithoutCustomerInput, InboxConversationUncheckedCreateWithoutCustomerInput> | InboxConversationCreateWithoutCustomerInput[] | InboxConversationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCustomerInput | InboxConversationCreateOrConnectWithoutCustomerInput[]
    upsert?: InboxConversationUpsertWithWhereUniqueWithoutCustomerInput | InboxConversationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: InboxConversationCreateManyCustomerInputEnvelope
    set?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    disconnect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    delete?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    update?: InboxConversationUpdateWithWhereUniqueWithoutCustomerInput | InboxConversationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: InboxConversationUpdateManyWithWhereWithoutCustomerInput | InboxConversationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
  }

  export type InboxConversationUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<InboxConversationCreateWithoutCustomerInput, InboxConversationUncheckedCreateWithoutCustomerInput> | InboxConversationCreateWithoutCustomerInput[] | InboxConversationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: InboxConversationCreateOrConnectWithoutCustomerInput | InboxConversationCreateOrConnectWithoutCustomerInput[]
    upsert?: InboxConversationUpsertWithWhereUniqueWithoutCustomerInput | InboxConversationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: InboxConversationCreateManyCustomerInputEnvelope
    set?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    disconnect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    delete?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    connect?: InboxConversationWhereUniqueInput | InboxConversationWhereUniqueInput[]
    update?: InboxConversationUpdateWithWhereUniqueWithoutCustomerInput | InboxConversationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: InboxConversationUpdateManyWithWhereWithoutCustomerInput | InboxConversationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
  }

  export type InboxConversationCreatetagsInput = {
    set: string[]
  }

  export type CompanyCreateNestedOneWithoutInboxConversationsInput = {
    create?: XOR<CompanyCreateWithoutInboxConversationsInput, CompanyUncheckedCreateWithoutInboxConversationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutInboxConversationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type InboxCustomerCreateNestedOneWithoutConversationsInput = {
    create?: XOR<InboxCustomerCreateWithoutConversationsInput, InboxCustomerUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: InboxCustomerCreateOrConnectWithoutConversationsInput
    connect?: InboxCustomerWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedInboxConversationsInput = {
    create?: XOR<UserCreateWithoutAssignedInboxConversationsInput, UserUncheckedCreateWithoutAssignedInboxConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedInboxConversationsInput
    connect?: UserWhereUniqueInput
  }

  export type InboxMessageCreateNestedManyWithoutConversationInput = {
    create?: XOR<InboxMessageCreateWithoutConversationInput, InboxMessageUncheckedCreateWithoutConversationInput> | InboxMessageCreateWithoutConversationInput[] | InboxMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutConversationInput | InboxMessageCreateOrConnectWithoutConversationInput[]
    createMany?: InboxMessageCreateManyConversationInputEnvelope
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
  }

  export type InboxMessageUncheckedCreateNestedManyWithoutConversationInput = {
    create?: XOR<InboxMessageCreateWithoutConversationInput, InboxMessageUncheckedCreateWithoutConversationInput> | InboxMessageCreateWithoutConversationInput[] | InboxMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutConversationInput | InboxMessageCreateOrConnectWithoutConversationInput[]
    createMany?: InboxMessageCreateManyConversationInputEnvelope
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
  }

  export type EnumInboxConversationPriorityFieldUpdateOperationsInput = {
    set?: $Enums.InboxConversationPriority
  }

  export type InboxConversationUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CompanyUpdateOneRequiredWithoutInboxConversationsNestedInput = {
    create?: XOR<CompanyCreateWithoutInboxConversationsInput, CompanyUncheckedCreateWithoutInboxConversationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutInboxConversationsInput
    upsert?: CompanyUpsertWithoutInboxConversationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutInboxConversationsInput, CompanyUpdateWithoutInboxConversationsInput>, CompanyUncheckedUpdateWithoutInboxConversationsInput>
  }

  export type InboxCustomerUpdateOneRequiredWithoutConversationsNestedInput = {
    create?: XOR<InboxCustomerCreateWithoutConversationsInput, InboxCustomerUncheckedCreateWithoutConversationsInput>
    connectOrCreate?: InboxCustomerCreateOrConnectWithoutConversationsInput
    upsert?: InboxCustomerUpsertWithoutConversationsInput
    connect?: InboxCustomerWhereUniqueInput
    update?: XOR<XOR<InboxCustomerUpdateToOneWithWhereWithoutConversationsInput, InboxCustomerUpdateWithoutConversationsInput>, InboxCustomerUncheckedUpdateWithoutConversationsInput>
  }

  export type UserUpdateOneWithoutAssignedInboxConversationsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedInboxConversationsInput, UserUncheckedCreateWithoutAssignedInboxConversationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedInboxConversationsInput
    upsert?: UserUpsertWithoutAssignedInboxConversationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedInboxConversationsInput, UserUpdateWithoutAssignedInboxConversationsInput>, UserUncheckedUpdateWithoutAssignedInboxConversationsInput>
  }

  export type InboxMessageUpdateManyWithoutConversationNestedInput = {
    create?: XOR<InboxMessageCreateWithoutConversationInput, InboxMessageUncheckedCreateWithoutConversationInput> | InboxMessageCreateWithoutConversationInput[] | InboxMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutConversationInput | InboxMessageCreateOrConnectWithoutConversationInput[]
    upsert?: InboxMessageUpsertWithWhereUniqueWithoutConversationInput | InboxMessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: InboxMessageCreateManyConversationInputEnvelope
    set?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    disconnect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    delete?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    update?: InboxMessageUpdateWithWhereUniqueWithoutConversationInput | InboxMessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: InboxMessageUpdateManyWithWhereWithoutConversationInput | InboxMessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
  }

  export type InboxMessageUncheckedUpdateManyWithoutConversationNestedInput = {
    create?: XOR<InboxMessageCreateWithoutConversationInput, InboxMessageUncheckedCreateWithoutConversationInput> | InboxMessageCreateWithoutConversationInput[] | InboxMessageUncheckedCreateWithoutConversationInput[]
    connectOrCreate?: InboxMessageCreateOrConnectWithoutConversationInput | InboxMessageCreateOrConnectWithoutConversationInput[]
    upsert?: InboxMessageUpsertWithWhereUniqueWithoutConversationInput | InboxMessageUpsertWithWhereUniqueWithoutConversationInput[]
    createMany?: InboxMessageCreateManyConversationInputEnvelope
    set?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    disconnect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    delete?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    connect?: InboxMessageWhereUniqueInput | InboxMessageWhereUniqueInput[]
    update?: InboxMessageUpdateWithWhereUniqueWithoutConversationInput | InboxMessageUpdateWithWhereUniqueWithoutConversationInput[]
    updateMany?: InboxMessageUpdateManyWithWhereWithoutConversationInput | InboxMessageUpdateManyWithWhereWithoutConversationInput[]
    deleteMany?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutInboxMessagesInput = {
    create?: XOR<CompanyCreateWithoutInboxMessagesInput, CompanyUncheckedCreateWithoutInboxMessagesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutInboxMessagesInput
    connect?: CompanyWhereUniqueInput
  }

  export type InboxConversationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<InboxConversationCreateWithoutMessagesInput, InboxConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: InboxConversationCreateOrConnectWithoutMessagesInput
    connect?: InboxConversationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutInboxMessagesInput = {
    create?: XOR<UserCreateWithoutInboxMessagesInput, UserUncheckedCreateWithoutInboxMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInboxMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInboxMessageSenderTypeFieldUpdateOperationsInput = {
    set?: $Enums.InboxMessageSenderType
  }

  export type EnumInboxMessageStatusFieldUpdateOperationsInput = {
    set?: $Enums.InboxMessageStatus
  }

  export type CompanyUpdateOneRequiredWithoutInboxMessagesNestedInput = {
    create?: XOR<CompanyCreateWithoutInboxMessagesInput, CompanyUncheckedCreateWithoutInboxMessagesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutInboxMessagesInput
    upsert?: CompanyUpsertWithoutInboxMessagesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutInboxMessagesInput, CompanyUpdateWithoutInboxMessagesInput>, CompanyUncheckedUpdateWithoutInboxMessagesInput>
  }

  export type InboxConversationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<InboxConversationCreateWithoutMessagesInput, InboxConversationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: InboxConversationCreateOrConnectWithoutMessagesInput
    upsert?: InboxConversationUpsertWithoutMessagesInput
    connect?: InboxConversationWhereUniqueInput
    update?: XOR<XOR<InboxConversationUpdateToOneWithWhereWithoutMessagesInput, InboxConversationUpdateWithoutMessagesInput>, InboxConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneWithoutInboxMessagesNestedInput = {
    create?: XOR<UserCreateWithoutInboxMessagesInput, UserUncheckedCreateWithoutInboxMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutInboxMessagesInput
    upsert?: UserUpsertWithoutInboxMessagesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInboxMessagesInput, UserUpdateWithoutInboxMessagesInput>, UserUncheckedUpdateWithoutInboxMessagesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderFilter<$PrismaModel> | $Enums.Provider
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumThemeFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeFilter<$PrismaModel> | $Enums.Theme
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderWithAggregatesFilter<$PrismaModel> | $Enums.Provider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderFilter<$PrismaModel>
    _max?: NestedEnumProviderFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumThemeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeWithAggregatesFilter<$PrismaModel> | $Enums.Theme
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeFilter<$PrismaModel>
    _max?: NestedEnumThemeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumKnowledgeItemTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeItemType | EnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeItemTypeFilter<$PrismaModel> | $Enums.KnowledgeItemType
  }

  export type NestedEnumKnowledgeItemTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KnowledgeItemType | EnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    in?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.KnowledgeItemType[] | ListEnumKnowledgeItemTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumKnowledgeItemTypeWithAggregatesFilter<$PrismaModel> | $Enums.KnowledgeItemType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKnowledgeItemTypeFilter<$PrismaModel>
    _max?: NestedEnumKnowledgeItemTypeFilter<$PrismaModel>
  }

  export type NestedEnumAiTemplateCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.AiTemplateCategory | EnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAiTemplateCategoryFilter<$PrismaModel> | $Enums.AiTemplateCategory
  }

  export type NestedEnumAiTemplateCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AiTemplateCategory | EnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.AiTemplateCategory[] | ListEnumAiTemplateCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumAiTemplateCategoryWithAggregatesFilter<$PrismaModel> | $Enums.AiTemplateCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAiTemplateCategoryFilter<$PrismaModel>
    _max?: NestedEnumAiTemplateCategoryFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumCompanyMemberStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberStatus | EnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberStatusFilter<$PrismaModel> | $Enums.CompanyMemberStatus
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumCompanyMemberStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberStatus | EnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberStatus[] | ListEnumCompanyMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberStatusWithAggregatesFilter<$PrismaModel> | $Enums.CompanyMemberStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyMemberStatusFilter<$PrismaModel>
    _max?: NestedEnumCompanyMemberStatusFilter<$PrismaModel>
  }

  export type NestedEnumPlanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeFilter<$PrismaModel> | $Enums.PlanType
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanTypeFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumSubscriptionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusFilter<$PrismaModel> | $Enums.SubscriptionStatus
  }

  export type NestedEnumBillingIntervalFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingInterval | EnumBillingIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingIntervalFilter<$PrismaModel> | $Enums.BillingInterval
  }

  export type NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SubscriptionStatus | EnumSubscriptionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SubscriptionStatus[] | ListEnumSubscriptionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSubscriptionStatusWithAggregatesFilter<$PrismaModel> | $Enums.SubscriptionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
    _max?: NestedEnumSubscriptionStatusFilter<$PrismaModel>
  }

  export type NestedEnumBillingIntervalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BillingInterval | EnumBillingIntervalFieldRefInput<$PrismaModel>
    in?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    notIn?: $Enums.BillingInterval[] | ListEnumBillingIntervalFieldRefInput<$PrismaModel>
    not?: NestedEnumBillingIntervalWithAggregatesFilter<$PrismaModel> | $Enums.BillingInterval
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBillingIntervalFilter<$PrismaModel>
    _max?: NestedEnumBillingIntervalFilter<$PrismaModel>
  }

  export type NestedEnumUsageMetricTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UsageMetricType | EnumUsageMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsageMetricTypeFilter<$PrismaModel> | $Enums.UsageMetricType
  }

  export type NestedEnumUsageMetricTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UsageMetricType | EnumUsageMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UsageMetricType[] | ListEnumUsageMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUsageMetricTypeWithAggregatesFilter<$PrismaModel> | $Enums.UsageMetricType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUsageMetricTypeFilter<$PrismaModel>
    _max?: NestedEnumUsageMetricTypeFilter<$PrismaModel>
  }

  export type NestedEnumInboxConversationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxConversationPriority | EnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxConversationPriorityFilter<$PrismaModel> | $Enums.InboxConversationPriority
  }

  export type NestedEnumInboxConversationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxConversationPriority | EnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxConversationPriority[] | ListEnumInboxConversationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxConversationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.InboxConversationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInboxConversationPriorityFilter<$PrismaModel>
    _max?: NestedEnumInboxConversationPriorityFilter<$PrismaModel>
  }

  export type NestedEnumInboxMessageSenderTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageSenderType | EnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageSenderTypeFilter<$PrismaModel> | $Enums.InboxMessageSenderType
  }

  export type NestedEnumInboxMessageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageStatus | EnumInboxMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageStatusFilter<$PrismaModel> | $Enums.InboxMessageStatus
  }

  export type NestedEnumInboxMessageSenderTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageSenderType | EnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageSenderType[] | ListEnumInboxMessageSenderTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageSenderTypeWithAggregatesFilter<$PrismaModel> | $Enums.InboxMessageSenderType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInboxMessageSenderTypeFilter<$PrismaModel>
    _max?: NestedEnumInboxMessageSenderTypeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumInboxMessageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InboxMessageStatus | EnumInboxMessageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InboxMessageStatus[] | ListEnumInboxMessageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInboxMessageStatusWithAggregatesFilter<$PrismaModel> | $Enums.InboxMessageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInboxMessageStatusFilter<$PrismaModel>
    _max?: NestedEnumInboxMessageStatusFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyMemberCreateWithoutUserInput = {
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMembersInput
  }

  export type CompanyMemberUncheckedCreateWithoutUserInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: number
  }

  export type CompanyMemberCreateOrConnectWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    create: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput>
  }

  export type CompanyMemberCreateManyUserInputEnvelope = {
    data: CompanyMemberCreateManyUserInput | CompanyMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutAvatarForInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateWithoutAvatarForInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    userId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutAvatarForInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
  }

  export type CompanyCreateWithoutUserInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUserInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
  }

  export type FileCreateWithoutUserInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarFor?: UserCreateNestedManyWithoutAvatarInput
  }

  export type FileUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarFor?: UserUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type FileCreateOrConnectWithoutUserInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileCreateManyUserInputEnvelope = {
    data: FileCreateManyUserInput | FileCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type KnowledgeItemCreateWithoutCreatedByInput = {
    id?: string
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutKnowledgeItemsInput
  }

  export type KnowledgeItemUncheckedCreateWithoutCreatedByInput = {
    id?: string
    companyId: number
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KnowledgeItemCreateOrConnectWithoutCreatedByInput = {
    where: KnowledgeItemWhereUniqueInput
    create: XOR<KnowledgeItemCreateWithoutCreatedByInput, KnowledgeItemUncheckedCreateWithoutCreatedByInput>
  }

  export type KnowledgeItemCreateManyCreatedByInputEnvelope = {
    data: KnowledgeItemCreateManyCreatedByInput | KnowledgeItemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type QuickAnswerCreateWithoutCreatedByInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuickAnswersInput
  }

  export type QuickAnswerUncheckedCreateWithoutCreatedByInput = {
    id?: string
    companyId: number
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuickAnswerCreateOrConnectWithoutCreatedByInput = {
    where: QuickAnswerWhereUniqueInput
    create: XOR<QuickAnswerCreateWithoutCreatedByInput, QuickAnswerUncheckedCreateWithoutCreatedByInput>
  }

  export type QuickAnswerCreateManyCreatedByInputEnvelope = {
    data: QuickAnswerCreateManyCreatedByInput | QuickAnswerCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AiTemplateCreateWithoutCreatedByInput = {
    id?: string
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAiTemplatesInput
    options?: AiTemplateOptionCreateNestedManyWithoutTemplateInput
  }

  export type AiTemplateUncheckedCreateWithoutCreatedByInput = {
    id?: string
    companyId: number
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: AiTemplateOptionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type AiTemplateCreateOrConnectWithoutCreatedByInput = {
    where: AiTemplateWhereUniqueInput
    create: XOR<AiTemplateCreateWithoutCreatedByInput, AiTemplateUncheckedCreateWithoutCreatedByInput>
  }

  export type AiTemplateCreateManyCreatedByInputEnvelope = {
    data: AiTemplateCreateManyCreatedByInput | AiTemplateCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type InboxConversationCreateWithoutAssignedToInput = {
    id?: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxConversationsInput
    customer: InboxCustomerCreateNestedOneWithoutConversationsInput
    messages?: InboxMessageCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationUncheckedCreateWithoutAssignedToInput = {
    id?: string
    companyId: number
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: InboxMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationCreateOrConnectWithoutAssignedToInput = {
    where: InboxConversationWhereUniqueInput
    create: XOR<InboxConversationCreateWithoutAssignedToInput, InboxConversationUncheckedCreateWithoutAssignedToInput>
  }

  export type InboxConversationCreateManyAssignedToInputEnvelope = {
    data: InboxConversationCreateManyAssignedToInput | InboxConversationCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type InboxMessageCreateWithoutSenderUserInput = {
    id?: string
    senderType: $Enums.InboxMessageSenderType
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxMessagesInput
    conversation: InboxConversationCreateNestedOneWithoutMessagesInput
  }

  export type InboxMessageUncheckedCreateWithoutSenderUserInput = {
    id?: string
    companyId: number
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageCreateOrConnectWithoutSenderUserInput = {
    where: InboxMessageWhereUniqueInput
    create: XOR<InboxMessageCreateWithoutSenderUserInput, InboxMessageUncheckedCreateWithoutSenderUserInput>
  }

  export type InboxMessageCreateManySenderUserInputEnvelope = {
    data: InboxMessageCreateManySenderUserInput | InboxMessageCreateManySenderUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type CompanyMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    update: XOR<CompanyMemberUpdateWithoutUserInput, CompanyMemberUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput>
  }

  export type CompanyMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    data: XOR<CompanyMemberUpdateWithoutUserInput, CompanyMemberUncheckedUpdateWithoutUserInput>
  }

  export type CompanyMemberUpdateManyWithWhereWithoutUserInput = {
    where: CompanyMemberScalarWhereInput
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type CompanyMemberScalarWhereInput = {
    AND?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
    OR?: CompanyMemberScalarWhereInput[]
    NOT?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
    id?: IntFilter<"CompanyMember"> | number
    isAdmin?: BoolFilter<"CompanyMember"> | boolean
    canPost?: BoolFilter<"CompanyMember"> | boolean
    canApprove?: BoolFilter<"CompanyMember"> | boolean
    isOwner?: BoolFilter<"CompanyMember"> | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFilter<"CompanyMember"> | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    userId?: IntFilter<"CompanyMember"> | number
    companyId?: IntFilter<"CompanyMember"> | number
  }

  export type FileUpsertWithoutAvatarForInput = {
    update: XOR<FileUpdateWithoutAvatarForInput, FileUncheckedUpdateWithoutAvatarForInput>
    create: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutAvatarForInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutAvatarForInput, FileUncheckedUpdateWithoutAvatarForInput>
  }

  export type FileUpdateWithoutAvatarForInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateWithoutAvatarForInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUpsertWithoutUserInput = {
    update: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyCreateWithoutUserInput, CompanyUncheckedCreateWithoutUserInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUserInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUserInput, CompanyUncheckedUpdateWithoutUserInput>
  }

  export type CompanyUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type FileUpsertWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
    create: XOR<FileCreateWithoutUserInput, FileUncheckedCreateWithoutUserInput>
  }

  export type FileUpdateWithWhereUniqueWithoutUserInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutUserInput, FileUncheckedUpdateWithoutUserInput>
  }

  export type FileUpdateManyWithWhereWithoutUserInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutUserInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    publicId?: StringNullableFilter<"File"> | string | null
    format?: StringNullableFilter<"File"> | string | null
    version?: StringNullableFilter<"File"> | string | null
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    userId?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
  }

  export type KnowledgeItemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: KnowledgeItemWhereUniqueInput
    update: XOR<KnowledgeItemUpdateWithoutCreatedByInput, KnowledgeItemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<KnowledgeItemCreateWithoutCreatedByInput, KnowledgeItemUncheckedCreateWithoutCreatedByInput>
  }

  export type KnowledgeItemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: KnowledgeItemWhereUniqueInput
    data: XOR<KnowledgeItemUpdateWithoutCreatedByInput, KnowledgeItemUncheckedUpdateWithoutCreatedByInput>
  }

  export type KnowledgeItemUpdateManyWithWhereWithoutCreatedByInput = {
    where: KnowledgeItemScalarWhereInput
    data: XOR<KnowledgeItemUpdateManyMutationInput, KnowledgeItemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type KnowledgeItemScalarWhereInput = {
    AND?: KnowledgeItemScalarWhereInput | KnowledgeItemScalarWhereInput[]
    OR?: KnowledgeItemScalarWhereInput[]
    NOT?: KnowledgeItemScalarWhereInput | KnowledgeItemScalarWhereInput[]
    id?: StringFilter<"KnowledgeItem"> | string
    companyId?: IntFilter<"KnowledgeItem"> | number
    type?: EnumKnowledgeItemTypeFilter<"KnowledgeItem"> | $Enums.KnowledgeItemType
    title?: StringFilter<"KnowledgeItem"> | string
    content?: StringFilter<"KnowledgeItem"> | string
    createdAt?: DateTimeFilter<"KnowledgeItem"> | Date | string
    updatedAt?: DateTimeFilter<"KnowledgeItem"> | Date | string
    createdById?: IntNullableFilter<"KnowledgeItem"> | number | null
  }

  export type QuickAnswerUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: QuickAnswerWhereUniqueInput
    update: XOR<QuickAnswerUpdateWithoutCreatedByInput, QuickAnswerUncheckedUpdateWithoutCreatedByInput>
    create: XOR<QuickAnswerCreateWithoutCreatedByInput, QuickAnswerUncheckedCreateWithoutCreatedByInput>
  }

  export type QuickAnswerUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: QuickAnswerWhereUniqueInput
    data: XOR<QuickAnswerUpdateWithoutCreatedByInput, QuickAnswerUncheckedUpdateWithoutCreatedByInput>
  }

  export type QuickAnswerUpdateManyWithWhereWithoutCreatedByInput = {
    where: QuickAnswerScalarWhereInput
    data: XOR<QuickAnswerUpdateManyMutationInput, QuickAnswerUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type QuickAnswerScalarWhereInput = {
    AND?: QuickAnswerScalarWhereInput | QuickAnswerScalarWhereInput[]
    OR?: QuickAnswerScalarWhereInput[]
    NOT?: QuickAnswerScalarWhereInput | QuickAnswerScalarWhereInput[]
    id?: StringFilter<"QuickAnswer"> | string
    companyId?: IntFilter<"QuickAnswer"> | number
    title?: StringFilter<"QuickAnswer"> | string
    content?: StringFilter<"QuickAnswer"> | string
    createdAt?: DateTimeFilter<"QuickAnswer"> | Date | string
    updatedAt?: DateTimeFilter<"QuickAnswer"> | Date | string
    createdById?: IntNullableFilter<"QuickAnswer"> | number | null
  }

  export type AiTemplateUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AiTemplateWhereUniqueInput
    update: XOR<AiTemplateUpdateWithoutCreatedByInput, AiTemplateUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AiTemplateCreateWithoutCreatedByInput, AiTemplateUncheckedCreateWithoutCreatedByInput>
  }

  export type AiTemplateUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AiTemplateWhereUniqueInput
    data: XOR<AiTemplateUpdateWithoutCreatedByInput, AiTemplateUncheckedUpdateWithoutCreatedByInput>
  }

  export type AiTemplateUpdateManyWithWhereWithoutCreatedByInput = {
    where: AiTemplateScalarWhereInput
    data: XOR<AiTemplateUpdateManyMutationInput, AiTemplateUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AiTemplateScalarWhereInput = {
    AND?: AiTemplateScalarWhereInput | AiTemplateScalarWhereInput[]
    OR?: AiTemplateScalarWhereInput[]
    NOT?: AiTemplateScalarWhereInput | AiTemplateScalarWhereInput[]
    id?: StringFilter<"AiTemplate"> | string
    companyId?: IntFilter<"AiTemplate"> | number
    name?: StringFilter<"AiTemplate"> | string
    content?: StringFilter<"AiTemplate"> | string
    category?: EnumAiTemplateCategoryFilter<"AiTemplate"> | $Enums.AiTemplateCategory
    createdAt?: DateTimeFilter<"AiTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"AiTemplate"> | Date | string
    createdById?: IntNullableFilter<"AiTemplate"> | number | null
  }

  export type InboxConversationUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: InboxConversationWhereUniqueInput
    update: XOR<InboxConversationUpdateWithoutAssignedToInput, InboxConversationUncheckedUpdateWithoutAssignedToInput>
    create: XOR<InboxConversationCreateWithoutAssignedToInput, InboxConversationUncheckedCreateWithoutAssignedToInput>
  }

  export type InboxConversationUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: InboxConversationWhereUniqueInput
    data: XOR<InboxConversationUpdateWithoutAssignedToInput, InboxConversationUncheckedUpdateWithoutAssignedToInput>
  }

  export type InboxConversationUpdateManyWithWhereWithoutAssignedToInput = {
    where: InboxConversationScalarWhereInput
    data: XOR<InboxConversationUpdateManyMutationInput, InboxConversationUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type InboxConversationScalarWhereInput = {
    AND?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
    OR?: InboxConversationScalarWhereInput[]
    NOT?: InboxConversationScalarWhereInput | InboxConversationScalarWhereInput[]
    id?: StringFilter<"InboxConversation"> | string
    companyId?: IntFilter<"InboxConversation"> | number
    customerId?: StringFilter<"InboxConversation"> | string
    subject?: StringNullableFilter<"InboxConversation"> | string | null
    lastMessagePreview?: StringNullableFilter<"InboxConversation"> | string | null
    lastMessageSentAt?: DateTimeNullableFilter<"InboxConversation"> | Date | string | null
    unreadCount?: IntFilter<"InboxConversation"> | number
    priority?: EnumInboxConversationPriorityFilter<"InboxConversation"> | $Enums.InboxConversationPriority
    satisfactionScore?: IntNullableFilter<"InboxConversation"> | number | null
    tags?: StringNullableListFilter<"InboxConversation">
    assignedToId?: IntNullableFilter<"InboxConversation"> | number | null
    isArchived?: BoolFilter<"InboxConversation"> | boolean
    archivedAt?: DateTimeNullableFilter<"InboxConversation"> | Date | string | null
    createdAt?: DateTimeFilter<"InboxConversation"> | Date | string
    updatedAt?: DateTimeFilter<"InboxConversation"> | Date | string
  }

  export type InboxMessageUpsertWithWhereUniqueWithoutSenderUserInput = {
    where: InboxMessageWhereUniqueInput
    update: XOR<InboxMessageUpdateWithoutSenderUserInput, InboxMessageUncheckedUpdateWithoutSenderUserInput>
    create: XOR<InboxMessageCreateWithoutSenderUserInput, InboxMessageUncheckedCreateWithoutSenderUserInput>
  }

  export type InboxMessageUpdateWithWhereUniqueWithoutSenderUserInput = {
    where: InboxMessageWhereUniqueInput
    data: XOR<InboxMessageUpdateWithoutSenderUserInput, InboxMessageUncheckedUpdateWithoutSenderUserInput>
  }

  export type InboxMessageUpdateManyWithWhereWithoutSenderUserInput = {
    where: InboxMessageScalarWhereInput
    data: XOR<InboxMessageUpdateManyMutationInput, InboxMessageUncheckedUpdateManyWithoutSenderUserInput>
  }

  export type InboxMessageScalarWhereInput = {
    AND?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
    OR?: InboxMessageScalarWhereInput[]
    NOT?: InboxMessageScalarWhereInput | InboxMessageScalarWhereInput[]
    id?: StringFilter<"InboxMessage"> | string
    companyId?: IntFilter<"InboxMessage"> | number
    conversationId?: StringFilter<"InboxMessage"> | string
    senderType?: EnumInboxMessageSenderTypeFilter<"InboxMessage"> | $Enums.InboxMessageSenderType
    senderUserId?: IntNullableFilter<"InboxMessage"> | number | null
    content?: StringFilter<"InboxMessage"> | string
    attachments?: JsonNullableFilter<"InboxMessage">
    status?: EnumInboxMessageStatusFilter<"InboxMessage"> | $Enums.InboxMessageStatus
    sentAt?: DateTimeFilter<"InboxMessage"> | Date | string
    createdAt?: DateTimeFilter<"InboxMessage"> | Date | string
    updatedAt?: DateTimeFilter<"InboxMessage"> | Date | string
  }

  export type UserCreateWithoutAvatarInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutAvatarInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutAvatarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserCreateManyAvatarInputEnvelope = {
    data: UserCreateManyAvatarInput | UserCreateManyAvatarInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFilesInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutFilesInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
  }

  export type UserUpsertWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
  }

  export type UserUpdateManyWithWhereWithoutAvatarInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAvatarInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    provider?: EnumProviderFilter<"User"> | $Enums.Provider
    password?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    confirmationToken?: StringNullableFilter<"User"> | string | null
    confirmed?: BoolNullableFilter<"User"> | boolean | null
    blocked?: BoolNullableFilter<"User"> | boolean | null
    phone?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    position?: StringNullableFilter<"User"> | string | null
    companyName?: StringNullableFilter<"User"> | string | null
    country?: StringNullableFilter<"User"> | string | null
    linkedinUrl?: StringNullableFilter<"User"> | string | null
    twitterUrl?: StringNullableFilter<"User"> | string | null
    websiteUrl?: StringNullableFilter<"User"> | string | null
    githubUrl?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: EnumLanguageFilter<"User"> | $Enums.Language
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarId?: StringNullableFilter<"User"> | string | null
    idProvider?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    defaultCompanyId?: IntNullableFilter<"User"> | number | null
  }

  export type UserUpsertWithoutFilesInput = {
    update: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
    create: XOR<UserCreateWithoutFilesInput, UserUncheckedCreateWithoutFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFilesInput, UserUncheckedUpdateWithoutFilesInput>
  }

  export type UserUpdateWithoutFilesInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFilesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type CompanyMemberCreateWithoutCompanyInput = {
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCompanyMembersInput
  }

  export type CompanyMemberUncheckedCreateWithoutCompanyInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type CompanyMemberCreateOrConnectWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    create: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMemberCreateManyCompanyInputEnvelope = {
    data: CompanyMemberCreateManyCompanyInput | CompanyMemberCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCompanyInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserCreateManyCompanyInputEnvelope = {
    data: UserCreateManyCompanyInput | UserCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CustomerSubscriptionCreateWithoutCompanyInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
    usageTracking?: UsageTrackingCreateNestedManyWithoutSubscriptionInput
  }

  export type CustomerSubscriptionUncheckedCreateWithoutCompanyInput = {
    id?: string
    planId: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type CustomerSubscriptionCreateOrConnectWithoutCompanyInput = {
    where: CustomerSubscriptionWhereUniqueInput
    create: XOR<CustomerSubscriptionCreateWithoutCompanyInput, CustomerSubscriptionUncheckedCreateWithoutCompanyInput>
  }

  export type CustomerSubscriptionCreateManyCompanyInputEnvelope = {
    data: CustomerSubscriptionCreateManyCompanyInput | CustomerSubscriptionCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UsageTrackingCreateWithoutCompanyInput = {
    id?: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
    subscription: CustomerSubscriptionCreateNestedOneWithoutUsageTrackingInput
  }

  export type UsageTrackingUncheckedCreateWithoutCompanyInput = {
    id?: string
    subscriptionId: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UsageTrackingCreateOrConnectWithoutCompanyInput = {
    where: UsageTrackingWhereUniqueInput
    create: XOR<UsageTrackingCreateWithoutCompanyInput, UsageTrackingUncheckedCreateWithoutCompanyInput>
  }

  export type UsageTrackingCreateManyCompanyInputEnvelope = {
    data: UsageTrackingCreateManyCompanyInput | UsageTrackingCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type KnowledgeItemCreateWithoutCompanyInput = {
    id?: string
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutKnowledgeItemsInput
  }

  export type KnowledgeItemUncheckedCreateWithoutCompanyInput = {
    id?: string
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type KnowledgeItemCreateOrConnectWithoutCompanyInput = {
    where: KnowledgeItemWhereUniqueInput
    create: XOR<KnowledgeItemCreateWithoutCompanyInput, KnowledgeItemUncheckedCreateWithoutCompanyInput>
  }

  export type KnowledgeItemCreateManyCompanyInputEnvelope = {
    data: KnowledgeItemCreateManyCompanyInput | KnowledgeItemCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type QuickAnswerCreateWithoutCompanyInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutQuickAnswersInput
  }

  export type QuickAnswerUncheckedCreateWithoutCompanyInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type QuickAnswerCreateOrConnectWithoutCompanyInput = {
    where: QuickAnswerWhereUniqueInput
    create: XOR<QuickAnswerCreateWithoutCompanyInput, QuickAnswerUncheckedCreateWithoutCompanyInput>
  }

  export type QuickAnswerCreateManyCompanyInputEnvelope = {
    data: QuickAnswerCreateManyCompanyInput | QuickAnswerCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AiTemplateCreateWithoutCompanyInput = {
    id?: string
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutAiTemplatesInput
    options?: AiTemplateOptionCreateNestedManyWithoutTemplateInput
  }

  export type AiTemplateUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
    options?: AiTemplateOptionUncheckedCreateNestedManyWithoutTemplateInput
  }

  export type AiTemplateCreateOrConnectWithoutCompanyInput = {
    where: AiTemplateWhereUniqueInput
    create: XOR<AiTemplateCreateWithoutCompanyInput, AiTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type AiTemplateCreateManyCompanyInputEnvelope = {
    data: AiTemplateCreateManyCompanyInput | AiTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type InboxCustomerCreateWithoutCompanyInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    conversations?: InboxConversationCreateNestedManyWithoutCustomerInput
  }

  export type InboxCustomerUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    conversations?: InboxConversationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type InboxCustomerCreateOrConnectWithoutCompanyInput = {
    where: InboxCustomerWhereUniqueInput
    create: XOR<InboxCustomerCreateWithoutCompanyInput, InboxCustomerUncheckedCreateWithoutCompanyInput>
  }

  export type InboxCustomerCreateManyCompanyInputEnvelope = {
    data: InboxCustomerCreateManyCompanyInput | InboxCustomerCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type InboxConversationCreateWithoutCompanyInput = {
    id?: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: InboxCustomerCreateNestedOneWithoutConversationsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedInboxConversationsInput
    messages?: InboxMessageCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationUncheckedCreateWithoutCompanyInput = {
    id?: string
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: InboxMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationCreateOrConnectWithoutCompanyInput = {
    where: InboxConversationWhereUniqueInput
    create: XOR<InboxConversationCreateWithoutCompanyInput, InboxConversationUncheckedCreateWithoutCompanyInput>
  }

  export type InboxConversationCreateManyCompanyInputEnvelope = {
    data: InboxConversationCreateManyCompanyInput | InboxConversationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type InboxMessageCreateWithoutCompanyInput = {
    id?: string
    senderType: $Enums.InboxMessageSenderType
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    conversation: InboxConversationCreateNestedOneWithoutMessagesInput
    senderUser?: UserCreateNestedOneWithoutInboxMessagesInput
  }

  export type InboxMessageUncheckedCreateWithoutCompanyInput = {
    id?: string
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    senderUserId?: number | null
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageCreateOrConnectWithoutCompanyInput = {
    where: InboxMessageWhereUniqueInput
    create: XOR<InboxMessageCreateWithoutCompanyInput, InboxMessageUncheckedCreateWithoutCompanyInput>
  }

  export type InboxMessageCreateManyCompanyInputEnvelope = {
    data: InboxMessageCreateManyCompanyInput | InboxMessageCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanySettingsCreateWithoutCompanyInput = {
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanySettingsUncheckedCreateWithoutCompanyInput = {
    id?: number
    emailNotifications?: boolean
    newMessageAlerts?: boolean
    dailyReports?: boolean
    autoReply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanySettingsCreateOrConnectWithoutCompanyInput = {
    where: CompanySettingsWhereUniqueInput
    create: XOR<CompanySettingsCreateWithoutCompanyInput, CompanySettingsUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberCreateWithoutCompanyInput = {
    id?: string
    displayName: string
    phoneNumber: string
    isConnected?: boolean
    messagesThisMonth?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput = {
    id?: string
    displayName: string
    phoneNumber: string
    isConnected?: boolean
    messagesThisMonth?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyWhatsappNumberCreateOrConnectWithoutCompanyInput = {
    where: CompanyWhatsappNumberWhereUniqueInput
    create: XOR<CompanyWhatsappNumberCreateWithoutCompanyInput, CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberCreateManyCompanyInputEnvelope = {
    data: CompanyWhatsappNumberCreateManyCompanyInput | CompanyWhatsappNumberCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    update: XOR<CompanyMemberUpdateWithoutCompanyInput, CompanyMemberUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    data: XOR<CompanyMemberUpdateWithoutCompanyInput, CompanyMemberUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyMemberUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyMemberScalarWhereInput
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UserUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateManyWithWhereWithoutCompanyInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CustomerSubscriptionUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CustomerSubscriptionWhereUniqueInput
    update: XOR<CustomerSubscriptionUpdateWithoutCompanyInput, CustomerSubscriptionUncheckedUpdateWithoutCompanyInput>
    create: XOR<CustomerSubscriptionCreateWithoutCompanyInput, CustomerSubscriptionUncheckedCreateWithoutCompanyInput>
  }

  export type CustomerSubscriptionUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CustomerSubscriptionWhereUniqueInput
    data: XOR<CustomerSubscriptionUpdateWithoutCompanyInput, CustomerSubscriptionUncheckedUpdateWithoutCompanyInput>
  }

  export type CustomerSubscriptionUpdateManyWithWhereWithoutCompanyInput = {
    where: CustomerSubscriptionScalarWhereInput
    data: XOR<CustomerSubscriptionUpdateManyMutationInput, CustomerSubscriptionUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CustomerSubscriptionScalarWhereInput = {
    AND?: CustomerSubscriptionScalarWhereInput | CustomerSubscriptionScalarWhereInput[]
    OR?: CustomerSubscriptionScalarWhereInput[]
    NOT?: CustomerSubscriptionScalarWhereInput | CustomerSubscriptionScalarWhereInput[]
    id?: StringFilter<"CustomerSubscription"> | string
    companyId?: IntFilter<"CustomerSubscription"> | number
    planId?: StringFilter<"CustomerSubscription"> | string
    status?: EnumSubscriptionStatusFilter<"CustomerSubscription"> | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFilter<"CustomerSubscription"> | $Enums.BillingInterval
    stripeCustomerId?: StringNullableFilter<"CustomerSubscription"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"CustomerSubscription"> | string | null
    cancellationDetails?: StringNullableFilter<"CustomerSubscription"> | string | null
    currentPeriodStart?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    currentPeriodEnd?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    cancelAtPeriodEnd?: BoolFilter<"CustomerSubscription"> | boolean
    trialStart?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    trialEnd?: DateTimeNullableFilter<"CustomerSubscription"> | Date | string | null
    createdAt?: DateTimeFilter<"CustomerSubscription"> | Date | string
    updatedAt?: DateTimeFilter<"CustomerSubscription"> | Date | string
  }

  export type UsageTrackingUpsertWithWhereUniqueWithoutCompanyInput = {
    where: UsageTrackingWhereUniqueInput
    update: XOR<UsageTrackingUpdateWithoutCompanyInput, UsageTrackingUncheckedUpdateWithoutCompanyInput>
    create: XOR<UsageTrackingCreateWithoutCompanyInput, UsageTrackingUncheckedCreateWithoutCompanyInput>
  }

  export type UsageTrackingUpdateWithWhereUniqueWithoutCompanyInput = {
    where: UsageTrackingWhereUniqueInput
    data: XOR<UsageTrackingUpdateWithoutCompanyInput, UsageTrackingUncheckedUpdateWithoutCompanyInput>
  }

  export type UsageTrackingUpdateManyWithWhereWithoutCompanyInput = {
    where: UsageTrackingScalarWhereInput
    data: XOR<UsageTrackingUpdateManyMutationInput, UsageTrackingUncheckedUpdateManyWithoutCompanyInput>
  }

  export type UsageTrackingScalarWhereInput = {
    AND?: UsageTrackingScalarWhereInput | UsageTrackingScalarWhereInput[]
    OR?: UsageTrackingScalarWhereInput[]
    NOT?: UsageTrackingScalarWhereInput | UsageTrackingScalarWhereInput[]
    id?: StringFilter<"UsageTracking"> | string
    companyId?: IntFilter<"UsageTracking"> | number
    subscriptionId?: StringFilter<"UsageTracking"> | string
    metricType?: EnumUsageMetricTypeFilter<"UsageTracking"> | $Enums.UsageMetricType
    currentUsage?: IntFilter<"UsageTracking"> | number
    limitValue?: IntFilter<"UsageTracking"> | number
    periodStart?: DateTimeFilter<"UsageTracking"> | Date | string
    periodEnd?: DateTimeFilter<"UsageTracking"> | Date | string
    lastResetDate?: DateTimeNullableFilter<"UsageTracking"> | Date | string | null
    lastUpdated?: DateTimeFilter<"UsageTracking"> | Date | string
    createdAt?: DateTimeFilter<"UsageTracking"> | Date | string
  }

  export type KnowledgeItemUpsertWithWhereUniqueWithoutCompanyInput = {
    where: KnowledgeItemWhereUniqueInput
    update: XOR<KnowledgeItemUpdateWithoutCompanyInput, KnowledgeItemUncheckedUpdateWithoutCompanyInput>
    create: XOR<KnowledgeItemCreateWithoutCompanyInput, KnowledgeItemUncheckedCreateWithoutCompanyInput>
  }

  export type KnowledgeItemUpdateWithWhereUniqueWithoutCompanyInput = {
    where: KnowledgeItemWhereUniqueInput
    data: XOR<KnowledgeItemUpdateWithoutCompanyInput, KnowledgeItemUncheckedUpdateWithoutCompanyInput>
  }

  export type KnowledgeItemUpdateManyWithWhereWithoutCompanyInput = {
    where: KnowledgeItemScalarWhereInput
    data: XOR<KnowledgeItemUpdateManyMutationInput, KnowledgeItemUncheckedUpdateManyWithoutCompanyInput>
  }

  export type QuickAnswerUpsertWithWhereUniqueWithoutCompanyInput = {
    where: QuickAnswerWhereUniqueInput
    update: XOR<QuickAnswerUpdateWithoutCompanyInput, QuickAnswerUncheckedUpdateWithoutCompanyInput>
    create: XOR<QuickAnswerCreateWithoutCompanyInput, QuickAnswerUncheckedCreateWithoutCompanyInput>
  }

  export type QuickAnswerUpdateWithWhereUniqueWithoutCompanyInput = {
    where: QuickAnswerWhereUniqueInput
    data: XOR<QuickAnswerUpdateWithoutCompanyInput, QuickAnswerUncheckedUpdateWithoutCompanyInput>
  }

  export type QuickAnswerUpdateManyWithWhereWithoutCompanyInput = {
    where: QuickAnswerScalarWhereInput
    data: XOR<QuickAnswerUpdateManyMutationInput, QuickAnswerUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AiTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AiTemplateWhereUniqueInput
    update: XOR<AiTemplateUpdateWithoutCompanyInput, AiTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<AiTemplateCreateWithoutCompanyInput, AiTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type AiTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AiTemplateWhereUniqueInput
    data: XOR<AiTemplateUpdateWithoutCompanyInput, AiTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type AiTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: AiTemplateScalarWhereInput
    data: XOR<AiTemplateUpdateManyMutationInput, AiTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type InboxCustomerUpsertWithWhereUniqueWithoutCompanyInput = {
    where: InboxCustomerWhereUniqueInput
    update: XOR<InboxCustomerUpdateWithoutCompanyInput, InboxCustomerUncheckedUpdateWithoutCompanyInput>
    create: XOR<InboxCustomerCreateWithoutCompanyInput, InboxCustomerUncheckedCreateWithoutCompanyInput>
  }

  export type InboxCustomerUpdateWithWhereUniqueWithoutCompanyInput = {
    where: InboxCustomerWhereUniqueInput
    data: XOR<InboxCustomerUpdateWithoutCompanyInput, InboxCustomerUncheckedUpdateWithoutCompanyInput>
  }

  export type InboxCustomerUpdateManyWithWhereWithoutCompanyInput = {
    where: InboxCustomerScalarWhereInput
    data: XOR<InboxCustomerUpdateManyMutationInput, InboxCustomerUncheckedUpdateManyWithoutCompanyInput>
  }

  export type InboxCustomerScalarWhereInput = {
    AND?: InboxCustomerScalarWhereInput | InboxCustomerScalarWhereInput[]
    OR?: InboxCustomerScalarWhereInput[]
    NOT?: InboxCustomerScalarWhereInput | InboxCustomerScalarWhereInput[]
    id?: StringFilter<"InboxCustomer"> | string
    companyId?: IntFilter<"InboxCustomer"> | number
    name?: StringFilter<"InboxCustomer"> | string
    phone?: StringNullableFilter<"InboxCustomer"> | string | null
    email?: StringNullableFilter<"InboxCustomer"> | string | null
    address?: StringNullableFilter<"InboxCustomer"> | string | null
    notes?: StringNullableFilter<"InboxCustomer"> | string | null
    createdAt?: DateTimeFilter<"InboxCustomer"> | Date | string
    updatedAt?: DateTimeFilter<"InboxCustomer"> | Date | string
  }

  export type InboxConversationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: InboxConversationWhereUniqueInput
    update: XOR<InboxConversationUpdateWithoutCompanyInput, InboxConversationUncheckedUpdateWithoutCompanyInput>
    create: XOR<InboxConversationCreateWithoutCompanyInput, InboxConversationUncheckedCreateWithoutCompanyInput>
  }

  export type InboxConversationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: InboxConversationWhereUniqueInput
    data: XOR<InboxConversationUpdateWithoutCompanyInput, InboxConversationUncheckedUpdateWithoutCompanyInput>
  }

  export type InboxConversationUpdateManyWithWhereWithoutCompanyInput = {
    where: InboxConversationScalarWhereInput
    data: XOR<InboxConversationUpdateManyMutationInput, InboxConversationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type InboxMessageUpsertWithWhereUniqueWithoutCompanyInput = {
    where: InboxMessageWhereUniqueInput
    update: XOR<InboxMessageUpdateWithoutCompanyInput, InboxMessageUncheckedUpdateWithoutCompanyInput>
    create: XOR<InboxMessageCreateWithoutCompanyInput, InboxMessageUncheckedCreateWithoutCompanyInput>
  }

  export type InboxMessageUpdateWithWhereUniqueWithoutCompanyInput = {
    where: InboxMessageWhereUniqueInput
    data: XOR<InboxMessageUpdateWithoutCompanyInput, InboxMessageUncheckedUpdateWithoutCompanyInput>
  }

  export type InboxMessageUpdateManyWithWhereWithoutCompanyInput = {
    where: InboxMessageScalarWhereInput
    data: XOR<InboxMessageUpdateManyMutationInput, InboxMessageUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanySettingsUpsertWithoutCompanyInput = {
    update: XOR<CompanySettingsUpdateWithoutCompanyInput, CompanySettingsUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanySettingsCreateWithoutCompanyInput, CompanySettingsUncheckedCreateWithoutCompanyInput>
    where?: CompanySettingsWhereInput
  }

  export type CompanySettingsUpdateToOneWithWhereWithoutCompanyInput = {
    where?: CompanySettingsWhereInput
    data: XOR<CompanySettingsUpdateWithoutCompanyInput, CompanySettingsUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanySettingsUpdateWithoutCompanyInput = {
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    newMessageAlerts?: BoolFieldUpdateOperationsInput | boolean
    dailyReports?: BoolFieldUpdateOperationsInput | boolean
    autoReply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanySettingsUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    newMessageAlerts?: BoolFieldUpdateOperationsInput | boolean
    dailyReports?: BoolFieldUpdateOperationsInput | boolean
    autoReply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyWhatsappNumberWhereUniqueInput
    update: XOR<CompanyWhatsappNumberUpdateWithoutCompanyInput, CompanyWhatsappNumberUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyWhatsappNumberCreateWithoutCompanyInput, CompanyWhatsappNumberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyWhatsappNumberWhereUniqueInput
    data: XOR<CompanyWhatsappNumberUpdateWithoutCompanyInput, CompanyWhatsappNumberUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyWhatsappNumberScalarWhereInput
    data: XOR<CompanyWhatsappNumberUpdateManyMutationInput, CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyWhatsappNumberScalarWhereInput = {
    AND?: CompanyWhatsappNumberScalarWhereInput | CompanyWhatsappNumberScalarWhereInput[]
    OR?: CompanyWhatsappNumberScalarWhereInput[]
    NOT?: CompanyWhatsappNumberScalarWhereInput | CompanyWhatsappNumberScalarWhereInput[]
    id?: StringFilter<"CompanyWhatsappNumber"> | string
    companyId?: IntFilter<"CompanyWhatsappNumber"> | number
    displayName?: StringFilter<"CompanyWhatsappNumber"> | string
    phoneNumber?: StringFilter<"CompanyWhatsappNumber"> | string
    isConnected?: BoolFilter<"CompanyWhatsappNumber"> | boolean
    messagesThisMonth?: IntFilter<"CompanyWhatsappNumber"> | number
    lastSyncedAt?: DateTimeNullableFilter<"CompanyWhatsappNumber"> | Date | string | null
    createdAt?: DateTimeFilter<"CompanyWhatsappNumber"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyWhatsappNumber"> | Date | string
  }

  export type CompanyCreateWithoutKnowledgeItemsInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutKnowledgeItemsInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutKnowledgeItemsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutKnowledgeItemsInput, CompanyUncheckedCreateWithoutKnowledgeItemsInput>
  }

  export type UserCreateWithoutKnowledgeItemsInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutKnowledgeItemsInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutKnowledgeItemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKnowledgeItemsInput, UserUncheckedCreateWithoutKnowledgeItemsInput>
  }

  export type CompanyUpsertWithoutKnowledgeItemsInput = {
    update: XOR<CompanyUpdateWithoutKnowledgeItemsInput, CompanyUncheckedUpdateWithoutKnowledgeItemsInput>
    create: XOR<CompanyCreateWithoutKnowledgeItemsInput, CompanyUncheckedCreateWithoutKnowledgeItemsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutKnowledgeItemsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutKnowledgeItemsInput, CompanyUncheckedUpdateWithoutKnowledgeItemsInput>
  }

  export type CompanyUpdateWithoutKnowledgeItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutKnowledgeItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutKnowledgeItemsInput = {
    update: XOR<UserUpdateWithoutKnowledgeItemsInput, UserUncheckedUpdateWithoutKnowledgeItemsInput>
    create: XOR<UserCreateWithoutKnowledgeItemsInput, UserUncheckedCreateWithoutKnowledgeItemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKnowledgeItemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKnowledgeItemsInput, UserUncheckedUpdateWithoutKnowledgeItemsInput>
  }

  export type UserUpdateWithoutKnowledgeItemsInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKnowledgeItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type CompanyCreateWithoutQuickAnswersInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutQuickAnswersInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutQuickAnswersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutQuickAnswersInput, CompanyUncheckedCreateWithoutQuickAnswersInput>
  }

  export type UserCreateWithoutQuickAnswersInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutQuickAnswersInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutQuickAnswersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuickAnswersInput, UserUncheckedCreateWithoutQuickAnswersInput>
  }

  export type CompanyUpsertWithoutQuickAnswersInput = {
    update: XOR<CompanyUpdateWithoutQuickAnswersInput, CompanyUncheckedUpdateWithoutQuickAnswersInput>
    create: XOR<CompanyCreateWithoutQuickAnswersInput, CompanyUncheckedCreateWithoutQuickAnswersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutQuickAnswersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutQuickAnswersInput, CompanyUncheckedUpdateWithoutQuickAnswersInput>
  }

  export type CompanyUpdateWithoutQuickAnswersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutQuickAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutQuickAnswersInput = {
    update: XOR<UserUpdateWithoutQuickAnswersInput, UserUncheckedUpdateWithoutQuickAnswersInput>
    create: XOR<UserCreateWithoutQuickAnswersInput, UserUncheckedCreateWithoutQuickAnswersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuickAnswersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuickAnswersInput, UserUncheckedUpdateWithoutQuickAnswersInput>
  }

  export type UserUpdateWithoutQuickAnswersInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuickAnswersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type CompanyCreateWithoutAiTemplatesInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAiTemplatesInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAiTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAiTemplatesInput, CompanyUncheckedCreateWithoutAiTemplatesInput>
  }

  export type UserCreateWithoutAiTemplatesInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutAiTemplatesInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutAiTemplatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAiTemplatesInput, UserUncheckedCreateWithoutAiTemplatesInput>
  }

  export type AiTemplateOptionCreateWithoutTemplateInput = {
    id?: string
    label: string
    value: string
    createdAt?: Date | string
  }

  export type AiTemplateOptionUncheckedCreateWithoutTemplateInput = {
    id?: string
    label: string
    value: string
    createdAt?: Date | string
  }

  export type AiTemplateOptionCreateOrConnectWithoutTemplateInput = {
    where: AiTemplateOptionWhereUniqueInput
    create: XOR<AiTemplateOptionCreateWithoutTemplateInput, AiTemplateOptionUncheckedCreateWithoutTemplateInput>
  }

  export type AiTemplateOptionCreateManyTemplateInputEnvelope = {
    data: AiTemplateOptionCreateManyTemplateInput | AiTemplateOptionCreateManyTemplateInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutAiTemplatesInput = {
    update: XOR<CompanyUpdateWithoutAiTemplatesInput, CompanyUncheckedUpdateWithoutAiTemplatesInput>
    create: XOR<CompanyCreateWithoutAiTemplatesInput, CompanyUncheckedCreateWithoutAiTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAiTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAiTemplatesInput, CompanyUncheckedUpdateWithoutAiTemplatesInput>
  }

  export type CompanyUpdateWithoutAiTemplatesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAiTemplatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutAiTemplatesInput = {
    update: XOR<UserUpdateWithoutAiTemplatesInput, UserUncheckedUpdateWithoutAiTemplatesInput>
    create: XOR<UserCreateWithoutAiTemplatesInput, UserUncheckedCreateWithoutAiTemplatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAiTemplatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAiTemplatesInput, UserUncheckedUpdateWithoutAiTemplatesInput>
  }

  export type UserUpdateWithoutAiTemplatesInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAiTemplatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type AiTemplateOptionUpsertWithWhereUniqueWithoutTemplateInput = {
    where: AiTemplateOptionWhereUniqueInput
    update: XOR<AiTemplateOptionUpdateWithoutTemplateInput, AiTemplateOptionUncheckedUpdateWithoutTemplateInput>
    create: XOR<AiTemplateOptionCreateWithoutTemplateInput, AiTemplateOptionUncheckedCreateWithoutTemplateInput>
  }

  export type AiTemplateOptionUpdateWithWhereUniqueWithoutTemplateInput = {
    where: AiTemplateOptionWhereUniqueInput
    data: XOR<AiTemplateOptionUpdateWithoutTemplateInput, AiTemplateOptionUncheckedUpdateWithoutTemplateInput>
  }

  export type AiTemplateOptionUpdateManyWithWhereWithoutTemplateInput = {
    where: AiTemplateOptionScalarWhereInput
    data: XOR<AiTemplateOptionUpdateManyMutationInput, AiTemplateOptionUncheckedUpdateManyWithoutTemplateInput>
  }

  export type AiTemplateOptionScalarWhereInput = {
    AND?: AiTemplateOptionScalarWhereInput | AiTemplateOptionScalarWhereInput[]
    OR?: AiTemplateOptionScalarWhereInput[]
    NOT?: AiTemplateOptionScalarWhereInput | AiTemplateOptionScalarWhereInput[]
    id?: StringFilter<"AiTemplateOption"> | string
    templateId?: StringFilter<"AiTemplateOption"> | string
    label?: StringFilter<"AiTemplateOption"> | string
    value?: StringFilter<"AiTemplateOption"> | string
    createdAt?: DateTimeFilter<"AiTemplateOption"> | Date | string
  }

  export type AiTemplateCreateWithoutOptionsInput = {
    id?: string
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutAiTemplatesInput
    createdBy?: UserCreateNestedOneWithoutAiTemplatesInput
  }

  export type AiTemplateUncheckedCreateWithoutOptionsInput = {
    id?: string
    companyId: number
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type AiTemplateCreateOrConnectWithoutOptionsInput = {
    where: AiTemplateWhereUniqueInput
    create: XOR<AiTemplateCreateWithoutOptionsInput, AiTemplateUncheckedCreateWithoutOptionsInput>
  }

  export type AiTemplateUpsertWithoutOptionsInput = {
    update: XOR<AiTemplateUpdateWithoutOptionsInput, AiTemplateUncheckedUpdateWithoutOptionsInput>
    create: XOR<AiTemplateCreateWithoutOptionsInput, AiTemplateUncheckedCreateWithoutOptionsInput>
    where?: AiTemplateWhereInput
  }

  export type AiTemplateUpdateToOneWithWhereWithoutOptionsInput = {
    where?: AiTemplateWhereInput
    data: XOR<AiTemplateUpdateWithoutOptionsInput, AiTemplateUncheckedUpdateWithoutOptionsInput>
  }

  export type AiTemplateUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAiTemplatesNestedInput
    createdBy?: UserUpdateOneWithoutAiTemplatesNestedInput
  }

  export type AiTemplateUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompanyCreateWithoutMembersInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutMembersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutCompanyMembersInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutCompanyMembersInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutCompanyMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyMembersInput, UserUncheckedCreateWithoutCompanyMembersInput>
  }

  export type CompanyUpsertWithoutMembersInput = {
    update: XOR<CompanyUpdateWithoutMembersInput, CompanyUncheckedUpdateWithoutMembersInput>
    create: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutMembersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutMembersInput, CompanyUncheckedUpdateWithoutMembersInput>
  }

  export type CompanyUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutCompanyMembersInput = {
    update: XOR<UserUpdateWithoutCompanyMembersInput, UserUncheckedUpdateWithoutCompanyMembersInput>
    create: XOR<UserCreateWithoutCompanyMembersInput, UserUncheckedCreateWithoutCompanyMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompanyMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompanyMembersInput, UserUncheckedUpdateWithoutCompanyMembersInput>
  }

  export type UserUpdateWithoutCompanyMembersInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type CustomerSubscriptionCreateWithoutPlanInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCustomerSubscriptionInput
    usageTracking?: UsageTrackingCreateNestedManyWithoutSubscriptionInput
  }

  export type CustomerSubscriptionUncheckedCreateWithoutPlanInput = {
    id?: string
    companyId: number
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    usageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type CustomerSubscriptionCreateOrConnectWithoutPlanInput = {
    where: CustomerSubscriptionWhereUniqueInput
    create: XOR<CustomerSubscriptionCreateWithoutPlanInput, CustomerSubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type CustomerSubscriptionCreateManyPlanInputEnvelope = {
    data: CustomerSubscriptionCreateManyPlanInput | CustomerSubscriptionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type CustomerSubscriptionUpsertWithWhereUniqueWithoutPlanInput = {
    where: CustomerSubscriptionWhereUniqueInput
    update: XOR<CustomerSubscriptionUpdateWithoutPlanInput, CustomerSubscriptionUncheckedUpdateWithoutPlanInput>
    create: XOR<CustomerSubscriptionCreateWithoutPlanInput, CustomerSubscriptionUncheckedCreateWithoutPlanInput>
  }

  export type CustomerSubscriptionUpdateWithWhereUniqueWithoutPlanInput = {
    where: CustomerSubscriptionWhereUniqueInput
    data: XOR<CustomerSubscriptionUpdateWithoutPlanInput, CustomerSubscriptionUncheckedUpdateWithoutPlanInput>
  }

  export type CustomerSubscriptionUpdateManyWithWhereWithoutPlanInput = {
    where: CustomerSubscriptionScalarWhereInput
    data: XOR<CustomerSubscriptionUpdateManyMutationInput, CustomerSubscriptionUncheckedUpdateManyWithoutPlanInput>
  }

  export type CompanyCreateWithoutCustomerSubscriptionInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCustomerSubscriptionInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCustomerSubscriptionInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCustomerSubscriptionInput, CompanyUncheckedCreateWithoutCustomerSubscriptionInput>
  }

  export type SubscriptionPlanCreateWithoutSubscriptionsInput = {
    id?: string
    planType: $Enums.PlanType
    stripeProductId?: string | null
    stripePriceIdMonthly?: string | null
    stripePriceIdYearly?: string | null
    priceMonthly?: Decimal | DecimalJsLike | number | string
    priceYearly?: Decimal | DecimalJsLike | number | string
    currency?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    planType: $Enums.PlanType
    stripeProductId?: string | null
    stripePriceIdMonthly?: string | null
    stripePriceIdYearly?: string | null
    priceMonthly?: Decimal | DecimalJsLike | number | string
    priceYearly?: Decimal | DecimalJsLike | number | string
    currency?: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPlanCreateOrConnectWithoutSubscriptionsInput = {
    where: SubscriptionPlanWhereUniqueInput
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
  }

  export type UsageTrackingCreateWithoutSubscriptionInput = {
    id?: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutUsageTrackingInput
  }

  export type UsageTrackingUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    companyId: number
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UsageTrackingCreateOrConnectWithoutSubscriptionInput = {
    where: UsageTrackingWhereUniqueInput
    create: XOR<UsageTrackingCreateWithoutSubscriptionInput, UsageTrackingUncheckedCreateWithoutSubscriptionInput>
  }

  export type UsageTrackingCreateManySubscriptionInputEnvelope = {
    data: UsageTrackingCreateManySubscriptionInput | UsageTrackingCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutCustomerSubscriptionInput = {
    update: XOR<CompanyUpdateWithoutCustomerSubscriptionInput, CompanyUncheckedUpdateWithoutCustomerSubscriptionInput>
    create: XOR<CompanyCreateWithoutCustomerSubscriptionInput, CompanyUncheckedCreateWithoutCustomerSubscriptionInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCustomerSubscriptionInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCustomerSubscriptionInput, CompanyUncheckedUpdateWithoutCustomerSubscriptionInput>
  }

  export type CompanyUpdateWithoutCustomerSubscriptionInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCustomerSubscriptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type SubscriptionPlanUpsertWithoutSubscriptionsInput = {
    update: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<SubscriptionPlanCreateWithoutSubscriptionsInput, SubscriptionPlanUncheckedCreateWithoutSubscriptionsInput>
    where?: SubscriptionPlanWhereInput
  }

  export type SubscriptionPlanUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: SubscriptionPlanWhereInput
    data: XOR<SubscriptionPlanUpdateWithoutSubscriptionsInput, SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPlanUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdMonthly?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdYearly?: NullableStringFieldUpdateOperationsInput | string | null
    priceMonthly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPlanUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    stripeProductId?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdMonthly?: NullableStringFieldUpdateOperationsInput | string | null
    stripePriceIdYearly?: NullableStringFieldUpdateOperationsInput | string | null
    priceMonthly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    priceYearly?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: UsageTrackingWhereUniqueInput
    update: XOR<UsageTrackingUpdateWithoutSubscriptionInput, UsageTrackingUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UsageTrackingCreateWithoutSubscriptionInput, UsageTrackingUncheckedCreateWithoutSubscriptionInput>
  }

  export type UsageTrackingUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: UsageTrackingWhereUniqueInput
    data: XOR<UsageTrackingUpdateWithoutSubscriptionInput, UsageTrackingUncheckedUpdateWithoutSubscriptionInput>
  }

  export type UsageTrackingUpdateManyWithWhereWithoutSubscriptionInput = {
    where: UsageTrackingScalarWhereInput
    data: XOR<UsageTrackingUpdateManyMutationInput, UsageTrackingUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type CompanyCreateWithoutUsageTrackingInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutUsageTrackingInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutUsageTrackingInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutUsageTrackingInput, CompanyUncheckedCreateWithoutUsageTrackingInput>
  }

  export type CustomerSubscriptionCreateWithoutUsageTrackingInput = {
    id?: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCustomerSubscriptionInput
    plan: SubscriptionPlanCreateNestedOneWithoutSubscriptionsInput
  }

  export type CustomerSubscriptionUncheckedCreateWithoutUsageTrackingInput = {
    id?: string
    companyId: number
    planId: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSubscriptionCreateOrConnectWithoutUsageTrackingInput = {
    where: CustomerSubscriptionWhereUniqueInput
    create: XOR<CustomerSubscriptionCreateWithoutUsageTrackingInput, CustomerSubscriptionUncheckedCreateWithoutUsageTrackingInput>
  }

  export type CompanyUpsertWithoutUsageTrackingInput = {
    update: XOR<CompanyUpdateWithoutUsageTrackingInput, CompanyUncheckedUpdateWithoutUsageTrackingInput>
    create: XOR<CompanyCreateWithoutUsageTrackingInput, CompanyUncheckedCreateWithoutUsageTrackingInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutUsageTrackingInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutUsageTrackingInput, CompanyUncheckedUpdateWithoutUsageTrackingInput>
  }

  export type CompanyUpdateWithoutUsageTrackingInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutUsageTrackingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CustomerSubscriptionUpsertWithoutUsageTrackingInput = {
    update: XOR<CustomerSubscriptionUpdateWithoutUsageTrackingInput, CustomerSubscriptionUncheckedUpdateWithoutUsageTrackingInput>
    create: XOR<CustomerSubscriptionCreateWithoutUsageTrackingInput, CustomerSubscriptionUncheckedCreateWithoutUsageTrackingInput>
    where?: CustomerSubscriptionWhereInput
  }

  export type CustomerSubscriptionUpdateToOneWithWhereWithoutUsageTrackingInput = {
    where?: CustomerSubscriptionWhereInput
    data: XOR<CustomerSubscriptionUpdateWithoutUsageTrackingInput, CustomerSubscriptionUncheckedUpdateWithoutUsageTrackingInput>
  }

  export type CustomerSubscriptionUpdateWithoutUsageTrackingInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCustomerSubscriptionNestedInput
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type CustomerSubscriptionUncheckedUpdateWithoutUsageTrackingInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateWithoutSettingsInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSettingsInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSettingsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSettingsInput, CompanyUncheckedCreateWithoutSettingsInput>
  }

  export type CompanyUpsertWithoutSettingsInput = {
    update: XOR<CompanyUpdateWithoutSettingsInput, CompanyUncheckedUpdateWithoutSettingsInput>
    create: XOR<CompanyCreateWithoutSettingsInput, CompanyUncheckedCreateWithoutSettingsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSettingsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSettingsInput, CompanyUncheckedUpdateWithoutSettingsInput>
  }

  export type CompanyUpdateWithoutSettingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutWhatsappNumbersInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutWhatsappNumbersInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutWhatsappNumbersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutWhatsappNumbersInput, CompanyUncheckedCreateWithoutWhatsappNumbersInput>
  }

  export type CompanyUpsertWithoutWhatsappNumbersInput = {
    update: XOR<CompanyUpdateWithoutWhatsappNumbersInput, CompanyUncheckedUpdateWithoutWhatsappNumbersInput>
    create: XOR<CompanyCreateWithoutWhatsappNumbersInput, CompanyUncheckedCreateWithoutWhatsappNumbersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutWhatsappNumbersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutWhatsappNumbersInput, CompanyUncheckedUpdateWithoutWhatsappNumbersInput>
  }

  export type CompanyUpdateWithoutWhatsappNumbersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutWhatsappNumbersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutInboxCustomersInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutInboxCustomersInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutInboxCustomersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutInboxCustomersInput, CompanyUncheckedCreateWithoutInboxCustomersInput>
  }

  export type InboxConversationCreateWithoutCustomerInput = {
    id?: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxConversationsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedInboxConversationsInput
    messages?: InboxMessageCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationUncheckedCreateWithoutCustomerInput = {
    id?: string
    companyId: number
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: InboxMessageUncheckedCreateNestedManyWithoutConversationInput
  }

  export type InboxConversationCreateOrConnectWithoutCustomerInput = {
    where: InboxConversationWhereUniqueInput
    create: XOR<InboxConversationCreateWithoutCustomerInput, InboxConversationUncheckedCreateWithoutCustomerInput>
  }

  export type InboxConversationCreateManyCustomerInputEnvelope = {
    data: InboxConversationCreateManyCustomerInput | InboxConversationCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutInboxCustomersInput = {
    update: XOR<CompanyUpdateWithoutInboxCustomersInput, CompanyUncheckedUpdateWithoutInboxCustomersInput>
    create: XOR<CompanyCreateWithoutInboxCustomersInput, CompanyUncheckedCreateWithoutInboxCustomersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutInboxCustomersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutInboxCustomersInput, CompanyUncheckedUpdateWithoutInboxCustomersInput>
  }

  export type CompanyUpdateWithoutInboxCustomersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutInboxCustomersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type InboxConversationUpsertWithWhereUniqueWithoutCustomerInput = {
    where: InboxConversationWhereUniqueInput
    update: XOR<InboxConversationUpdateWithoutCustomerInput, InboxConversationUncheckedUpdateWithoutCustomerInput>
    create: XOR<InboxConversationCreateWithoutCustomerInput, InboxConversationUncheckedCreateWithoutCustomerInput>
  }

  export type InboxConversationUpdateWithWhereUniqueWithoutCustomerInput = {
    where: InboxConversationWhereUniqueInput
    data: XOR<InboxConversationUpdateWithoutCustomerInput, InboxConversationUncheckedUpdateWithoutCustomerInput>
  }

  export type InboxConversationUpdateManyWithWhereWithoutCustomerInput = {
    where: InboxConversationScalarWhereInput
    data: XOR<InboxConversationUpdateManyMutationInput, InboxConversationUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CompanyCreateWithoutInboxConversationsInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutInboxConversationsInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutInboxConversationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutInboxConversationsInput, CompanyUncheckedCreateWithoutInboxConversationsInput>
  }

  export type InboxCustomerCreateWithoutConversationsInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxCustomersInput
  }

  export type InboxCustomerUncheckedCreateWithoutConversationsInput = {
    id?: string
    companyId: number
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxCustomerCreateOrConnectWithoutConversationsInput = {
    where: InboxCustomerWhereUniqueInput
    create: XOR<InboxCustomerCreateWithoutConversationsInput, InboxCustomerUncheckedCreateWithoutConversationsInput>
  }

  export type UserCreateWithoutAssignedInboxConversationsInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    inboxMessages?: InboxMessageCreateNestedManyWithoutSenderUserInput
  }

  export type UserUncheckedCreateWithoutAssignedInboxConversationsInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    inboxMessages?: InboxMessageUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UserCreateOrConnectWithoutAssignedInboxConversationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedInboxConversationsInput, UserUncheckedCreateWithoutAssignedInboxConversationsInput>
  }

  export type InboxMessageCreateWithoutConversationInput = {
    id?: string
    senderType: $Enums.InboxMessageSenderType
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxMessagesInput
    senderUser?: UserCreateNestedOneWithoutInboxMessagesInput
  }

  export type InboxMessageUncheckedCreateWithoutConversationInput = {
    id?: string
    companyId: number
    senderType: $Enums.InboxMessageSenderType
    senderUserId?: number | null
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageCreateOrConnectWithoutConversationInput = {
    where: InboxMessageWhereUniqueInput
    create: XOR<InboxMessageCreateWithoutConversationInput, InboxMessageUncheckedCreateWithoutConversationInput>
  }

  export type InboxMessageCreateManyConversationInputEnvelope = {
    data: InboxMessageCreateManyConversationInput | InboxMessageCreateManyConversationInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutInboxConversationsInput = {
    update: XOR<CompanyUpdateWithoutInboxConversationsInput, CompanyUncheckedUpdateWithoutInboxConversationsInput>
    create: XOR<CompanyCreateWithoutInboxConversationsInput, CompanyUncheckedCreateWithoutInboxConversationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutInboxConversationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutInboxConversationsInput, CompanyUncheckedUpdateWithoutInboxConversationsInput>
  }

  export type CompanyUpdateWithoutInboxConversationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutInboxConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type InboxCustomerUpsertWithoutConversationsInput = {
    update: XOR<InboxCustomerUpdateWithoutConversationsInput, InboxCustomerUncheckedUpdateWithoutConversationsInput>
    create: XOR<InboxCustomerCreateWithoutConversationsInput, InboxCustomerUncheckedCreateWithoutConversationsInput>
    where?: InboxCustomerWhereInput
  }

  export type InboxCustomerUpdateToOneWithWhereWithoutConversationsInput = {
    where?: InboxCustomerWhereInput
    data: XOR<InboxCustomerUpdateWithoutConversationsInput, InboxCustomerUncheckedUpdateWithoutConversationsInput>
  }

  export type InboxCustomerUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxCustomersNestedInput
  }

  export type InboxCustomerUncheckedUpdateWithoutConversationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutAssignedInboxConversationsInput = {
    update: XOR<UserUpdateWithoutAssignedInboxConversationsInput, UserUncheckedUpdateWithoutAssignedInboxConversationsInput>
    create: XOR<UserCreateWithoutAssignedInboxConversationsInput, UserUncheckedCreateWithoutAssignedInboxConversationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedInboxConversationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedInboxConversationsInput, UserUncheckedUpdateWithoutAssignedInboxConversationsInput>
  }

  export type UserUpdateWithoutAssignedInboxConversationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedInboxConversationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type InboxMessageUpsertWithWhereUniqueWithoutConversationInput = {
    where: InboxMessageWhereUniqueInput
    update: XOR<InboxMessageUpdateWithoutConversationInput, InboxMessageUncheckedUpdateWithoutConversationInput>
    create: XOR<InboxMessageCreateWithoutConversationInput, InboxMessageUncheckedCreateWithoutConversationInput>
  }

  export type InboxMessageUpdateWithWhereUniqueWithoutConversationInput = {
    where: InboxMessageWhereUniqueInput
    data: XOR<InboxMessageUpdateWithoutConversationInput, InboxMessageUncheckedUpdateWithoutConversationInput>
  }

  export type InboxMessageUpdateManyWithWhereWithoutConversationInput = {
    where: InboxMessageScalarWhereInput
    data: XOR<InboxMessageUpdateManyMutationInput, InboxMessageUncheckedUpdateManyWithoutConversationInput>
  }

  export type CompanyCreateWithoutInboxMessagesInput = {
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    user?: UserCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutInboxMessagesInput = {
    id?: number
    name: string
    description?: string | null
    tokenApi?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    user?: UserUncheckedCreateNestedManyWithoutCompanyInput
    CustomerSubscription?: CustomerSubscriptionUncheckedCreateNestedManyWithoutCompanyInput
    UsageTracking?: UsageTrackingUncheckedCreateNestedManyWithoutCompanyInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCompanyInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCompanyInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCompanyInput
    inboxCustomers?: InboxCustomerUncheckedCreateNestedManyWithoutCompanyInput
    inboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutCompanyInput
    settings?: CompanySettingsUncheckedCreateNestedOneWithoutCompanyInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutInboxMessagesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutInboxMessagesInput, CompanyUncheckedCreateWithoutInboxMessagesInput>
  }

  export type InboxConversationCreateWithoutMessagesInput = {
    id?: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutInboxConversationsInput
    customer: InboxCustomerCreateNestedOneWithoutConversationsInput
    assignedTo?: UserCreateNestedOneWithoutAssignedInboxConversationsInput
  }

  export type InboxConversationUncheckedCreateWithoutMessagesInput = {
    id?: string
    companyId: number
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxConversationCreateOrConnectWithoutMessagesInput = {
    where: InboxConversationWhereUniqueInput
    create: XOR<InboxConversationCreateWithoutMessagesInput, InboxConversationUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutInboxMessagesInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    company?: CompanyCreateNestedOneWithoutUserInput
    files?: FileCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationCreateNestedManyWithoutAssignedToInput
  }

  export type UserUncheckedCreateWithoutInboxMessagesInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    companyMembers?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    files?: FileUncheckedCreateNestedManyWithoutUserInput
    knowledgeItems?: KnowledgeItemUncheckedCreateNestedManyWithoutCreatedByInput
    quickAnswers?: QuickAnswerUncheckedCreateNestedManyWithoutCreatedByInput
    aiTemplates?: AiTemplateUncheckedCreateNestedManyWithoutCreatedByInput
    assignedInboxConversations?: InboxConversationUncheckedCreateNestedManyWithoutAssignedToInput
  }

  export type UserCreateOrConnectWithoutInboxMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInboxMessagesInput, UserUncheckedCreateWithoutInboxMessagesInput>
  }

  export type CompanyUpsertWithoutInboxMessagesInput = {
    update: XOR<CompanyUpdateWithoutInboxMessagesInput, CompanyUncheckedUpdateWithoutInboxMessagesInput>
    create: XOR<CompanyCreateWithoutInboxMessagesInput, CompanyUncheckedCreateWithoutInboxMessagesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutInboxMessagesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutInboxMessagesInput, CompanyUncheckedUpdateWithoutInboxMessagesInput>
  }

  export type CompanyUpdateWithoutInboxMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    user?: UserUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutInboxMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    tokenApi?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    user?: UserUncheckedUpdateManyWithoutCompanyNestedInput
    CustomerSubscription?: CustomerSubscriptionUncheckedUpdateManyWithoutCompanyNestedInput
    UsageTracking?: UsageTrackingUncheckedUpdateManyWithoutCompanyNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCompanyNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCompanyNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    inboxCustomers?: InboxCustomerUncheckedUpdateManyWithoutCompanyNestedInput
    inboxConversations?: InboxConversationUncheckedUpdateManyWithoutCompanyNestedInput
    settings?: CompanySettingsUncheckedUpdateOneWithoutCompanyNestedInput
    whatsappNumbers?: CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type InboxConversationUpsertWithoutMessagesInput = {
    update: XOR<InboxConversationUpdateWithoutMessagesInput, InboxConversationUncheckedUpdateWithoutMessagesInput>
    create: XOR<InboxConversationCreateWithoutMessagesInput, InboxConversationUncheckedCreateWithoutMessagesInput>
    where?: InboxConversationWhereInput
  }

  export type InboxConversationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: InboxConversationWhereInput
    data: XOR<InboxConversationUpdateWithoutMessagesInput, InboxConversationUncheckedUpdateWithoutMessagesInput>
  }

  export type InboxConversationUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxConversationsNestedInput
    customer?: InboxCustomerUpdateOneRequiredWithoutConversationsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedInboxConversationsNestedInput
  }

  export type InboxConversationUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutInboxMessagesInput = {
    update: XOR<UserUpdateWithoutInboxMessagesInput, UserUncheckedUpdateWithoutInboxMessagesInput>
    create: XOR<UserCreateWithoutInboxMessagesInput, UserUncheckedCreateWithoutInboxMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInboxMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInboxMessagesInput, UserUncheckedUpdateWithoutInboxMessagesInput>
  }

  export type UserUpdateWithoutInboxMessagesInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
  }

  export type UserUncheckedUpdateWithoutInboxMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type CompanyMemberCreateManyUserInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    companyId: number
  }

  export type FileCreateManyUserInput = {
    id?: string
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KnowledgeItemCreateManyCreatedByInput = {
    id?: string
    companyId: number
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuickAnswerCreateManyCreatedByInput = {
    id?: string
    companyId: number
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AiTemplateCreateManyCreatedByInput = {
    id?: string
    companyId: number
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxConversationCreateManyAssignedToInput = {
    id?: string
    companyId: number
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageCreateManySenderUserInput = {
    id?: string
    companyId: number
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUpdateWithoutUserInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMembersNestedInput
  }

  export type CompanyMemberUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyMemberUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companyId?: IntFieldUpdateOperationsInput | number
  }

  export type FileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarFor?: UserUpdateManyWithoutAvatarNestedInput
  }

  export type FileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarFor?: UserUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type FileUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeItemUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutKnowledgeItemsNestedInput
  }

  export type KnowledgeItemUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeItemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuickAnswerUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuickAnswersNestedInput
  }

  export type QuickAnswerUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuickAnswerUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAiTemplatesNestedInput
    options?: AiTemplateOptionUpdateManyWithoutTemplateNestedInput
  }

  export type AiTemplateUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: AiTemplateOptionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type AiTemplateUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxConversationUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxConversationsNestedInput
    customer?: InboxCustomerUpdateOneRequiredWithoutConversationsNestedInput
    messages?: InboxMessageUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: InboxMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageUpdateWithoutSenderUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxMessagesNestedInput
    conversation?: InboxConversationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type InboxMessageUncheckedUpdateWithoutSenderUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageUncheckedUpdateManyWithoutSenderUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    conversationId?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyAvatarInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultCompanyId?: number | null
  }

  export type UserUpdateWithoutAvatarInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    company?: CompanyUpdateOneWithoutUserNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultCompanyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompanyMemberCreateManyCompanyInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    companyMemberStatus: $Enums.CompanyMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type UserCreateManyCompanyInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    position?: string | null
    companyName?: string | null
    country?: string | null
    linkedinUrl?: string | null
    twitterUrl?: string | null
    websiteUrl?: string | null
    githubUrl?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: string | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
  }

  export type CustomerSubscriptionCreateManyCompanyInput = {
    id?: string
    planId: string
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsageTrackingCreateManyCompanyInput = {
    id?: string
    subscriptionId: string
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type KnowledgeItemCreateManyCompanyInput = {
    id?: string
    type: $Enums.KnowledgeItemType
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type QuickAnswerCreateManyCompanyInput = {
    id?: string
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type AiTemplateCreateManyCompanyInput = {
    id?: string
    name: string
    content: string
    category: $Enums.AiTemplateCategory
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: number | null
  }

  export type InboxCustomerCreateManyCompanyInput = {
    id?: string
    name: string
    phone?: string | null
    email?: string | null
    address?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxConversationCreateManyCompanyInput = {
    id?: string
    customerId: string
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageCreateManyCompanyInput = {
    id?: string
    conversationId: string
    senderType: $Enums.InboxMessageSenderType
    senderUserId?: number | null
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyWhatsappNumberCreateManyCompanyInput = {
    id?: string
    displayName: string
    phoneNumber: string
    isConnected?: boolean
    messagesThisMonth?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateWithoutCompanyInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCompanyMembersNestedInput
  }

  export type CompanyMemberUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type CompanyMemberUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    companyMemberStatus?: EnumCompanyMemberStatusFieldUpdateOperationsInput | $Enums.CompanyMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutCompanyInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    files?: FileUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    companyMembers?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    files?: FileUncheckedUpdateManyWithoutUserNestedInput
    knowledgeItems?: KnowledgeItemUncheckedUpdateManyWithoutCreatedByNestedInput
    quickAnswers?: QuickAnswerUncheckedUpdateManyWithoutCreatedByNestedInput
    aiTemplates?: AiTemplateUncheckedUpdateManyWithoutCreatedByNestedInput
    assignedInboxConversations?: InboxConversationUncheckedUpdateManyWithoutAssignedToNestedInput
    inboxMessages?: InboxMessageUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCompanyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    linkedinUrl?: NullableStringFieldUpdateOperationsInput | string | null
    twitterUrl?: NullableStringFieldUpdateOperationsInput | string | null
    websiteUrl?: NullableStringFieldUpdateOperationsInput | string | null
    githubUrl?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableStringFieldUpdateOperationsInput | string | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
  }

  export type CustomerSubscriptionUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: SubscriptionPlanUpdateOneRequiredWithoutSubscriptionsNestedInput
    usageTracking?: UsageTrackingUpdateManyWithoutSubscriptionNestedInput
  }

  export type CustomerSubscriptionUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageTracking?: UsageTrackingUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type CustomerSubscriptionUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: CustomerSubscriptionUpdateOneRequiredWithoutUsageTrackingNestedInput
  }

  export type UsageTrackingUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KnowledgeItemUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutKnowledgeItemsNestedInput
  }

  export type KnowledgeItemUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type KnowledgeItemUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumKnowledgeItemTypeFieldUpdateOperationsInput | $Enums.KnowledgeItemType
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuickAnswerUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutQuickAnswersNestedInput
  }

  export type QuickAnswerUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuickAnswerUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AiTemplateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutAiTemplatesNestedInput
    options?: AiTemplateOptionUpdateManyWithoutTemplateNestedInput
  }

  export type AiTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
    options?: AiTemplateOptionUncheckedUpdateManyWithoutTemplateNestedInput
  }

  export type AiTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    category?: EnumAiTemplateCategoryFieldUpdateOperationsInput | $Enums.AiTemplateCategory
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InboxCustomerUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: InboxConversationUpdateManyWithoutCustomerNestedInput
  }

  export type InboxCustomerUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversations?: InboxConversationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type InboxCustomerUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxConversationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: InboxCustomerUpdateOneRequiredWithoutConversationsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedInboxConversationsNestedInput
    messages?: InboxMessageUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: InboxMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    conversation?: InboxConversationUpdateOneRequiredWithoutMessagesNestedInput
    senderUser?: UserUpdateOneWithoutInboxMessagesNestedInput
  }

  export type InboxMessageUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    senderUserId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    conversationId?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    senderUserId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyWhatsappNumberUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    displayName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    isConnected?: BoolFieldUpdateOperationsInput | boolean
    messagesThisMonth?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateOptionCreateManyTemplateInput = {
    id?: string
    label: string
    value: string
    createdAt?: Date | string
  }

  export type AiTemplateOptionUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateOptionUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AiTemplateOptionUncheckedUpdateManyWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSubscriptionCreateManyPlanInput = {
    id?: string
    companyId: number
    status?: $Enums.SubscriptionStatus
    billingInterval?: $Enums.BillingInterval
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    cancellationDetails?: string | null
    currentPeriodStart?: Date | string | null
    currentPeriodEnd?: Date | string | null
    cancelAtPeriodEnd?: boolean
    trialStart?: Date | string | null
    trialEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSubscriptionUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCustomerSubscriptionNestedInput
    usageTracking?: UsageTrackingUpdateManyWithoutSubscriptionNestedInput
  }

  export type CustomerSubscriptionUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usageTracking?: UsageTrackingUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type CustomerSubscriptionUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    status?: EnumSubscriptionStatusFieldUpdateOperationsInput | $Enums.SubscriptionStatus
    billingInterval?: EnumBillingIntervalFieldUpdateOperationsInput | $Enums.BillingInterval
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    cancellationDetails?: NullableStringFieldUpdateOperationsInput | string | null
    currentPeriodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cancelAtPeriodEnd?: BoolFieldUpdateOperationsInput | boolean
    trialStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    trialEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingCreateManySubscriptionInput = {
    id?: string
    companyId: number
    metricType: $Enums.UsageMetricType
    currentUsage?: number
    limitValue: number
    periodStart?: Date | string
    periodEnd: Date | string
    lastResetDate?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type UsageTrackingUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutUsageTrackingNestedInput
  }

  export type UsageTrackingUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsageTrackingUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    metricType?: EnumUsageMetricTypeFieldUpdateOperationsInput | $Enums.UsageMetricType
    currentUsage?: IntFieldUpdateOperationsInput | number
    limitValue?: IntFieldUpdateOperationsInput | number
    periodStart?: DateTimeFieldUpdateOperationsInput | Date | string
    periodEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    lastResetDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxConversationCreateManyCustomerInput = {
    id?: string
    companyId: number
    subject?: string | null
    lastMessagePreview?: string | null
    lastMessageSentAt?: Date | string | null
    unreadCount?: number
    priority?: $Enums.InboxConversationPriority
    satisfactionScore?: number | null
    tags?: InboxConversationCreatetagsInput | string[]
    assignedToId?: number | null
    isArchived?: boolean
    archivedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxConversationUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxConversationsNestedInput
    assignedTo?: UserUpdateOneWithoutAssignedInboxConversationsNestedInput
    messages?: InboxMessageUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: InboxMessageUncheckedUpdateManyWithoutConversationNestedInput
  }

  export type InboxConversationUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessagePreview?: NullableStringFieldUpdateOperationsInput | string | null
    lastMessageSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    unreadCount?: IntFieldUpdateOperationsInput | number
    priority?: EnumInboxConversationPriorityFieldUpdateOperationsInput | $Enums.InboxConversationPriority
    satisfactionScore?: NullableIntFieldUpdateOperationsInput | number | null
    tags?: InboxConversationUpdatetagsInput | string[]
    assignedToId?: NullableIntFieldUpdateOperationsInput | number | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageCreateManyConversationInput = {
    id?: string
    companyId: number
    senderType: $Enums.InboxMessageSenderType
    senderUserId?: number | null
    content: string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: $Enums.InboxMessageStatus
    sentAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InboxMessageUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutInboxMessagesNestedInput
    senderUser?: UserUpdateOneWithoutInboxMessagesNestedInput
  }

  export type InboxMessageUncheckedUpdateWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    senderUserId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InboxMessageUncheckedUpdateManyWithoutConversationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: IntFieldUpdateOperationsInput | number
    senderType?: EnumInboxMessageSenderTypeFieldUpdateOperationsInput | $Enums.InboxMessageSenderType
    senderUserId?: NullableIntFieldUpdateOperationsInput | number | null
    content?: StringFieldUpdateOperationsInput | string
    attachments?: NullableJsonNullValueInput | InputJsonValue
    status?: EnumInboxMessageStatusFieldUpdateOperationsInput | $Enums.InboxMessageStatus
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}