
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamMember
 * 
 */
export type TeamMember = $Result.DefaultSelection<Prisma.$TeamMemberPayload>
/**
 * Model SurveyType
 * 
 */
export type SurveyType = $Result.DefaultSelection<Prisma.$SurveyTypePayload>
/**
 * Model Survey
 * 
 */
export type Survey = $Result.DefaultSelection<Prisma.$SurveyPayload>
/**
 * Model SurveyStyle
 * 
 */
export type SurveyStyle = $Result.DefaultSelection<Prisma.$SurveyStylePayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model QuestionOption
 * 
 */
export type QuestionOption = $Result.DefaultSelection<Prisma.$QuestionOptionPayload>
/**
 * Model SurveyResponse
 * 
 */
export type SurveyResponse = $Result.DefaultSelection<Prisma.$SurveyResponsePayload>
/**
 * Model SurveyResponseSummary
 * 
 */
export type SurveyResponseSummary = $Result.DefaultSelection<Prisma.$SurveyResponseSummaryPayload>
/**
 * Model QuestionResponse
 * 
 */
export type QuestionResponse = $Result.DefaultSelection<Prisma.$QuestionResponsePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Language: {
  en: 'en',
  pt_BR: 'pt_BR'
};

export type Language = (typeof Language)[keyof typeof Language]


export const Provider: {
  google: 'google',
  local: 'local'
};

export type Provider = (typeof Provider)[keyof typeof Provider]


export const TeamMemberStatus: {
  invited: 'invited',
  accepted: 'accepted',
  rejected: 'rejected'
};

export type TeamMemberStatus = (typeof TeamMemberStatus)[keyof typeof TeamMemberStatus]


export const Theme: {
  light: 'light',
  dark: 'dark',
  system: 'system'
};

export type Theme = (typeof Theme)[keyof typeof Theme]


export const SurveyStatus: {
  draft: 'draft',
  published: 'published',
  archived: 'archived'
};

export type SurveyStatus = (typeof SurveyStatus)[keyof typeof SurveyStatus]


export const QuestionFormat: {
  YES_NO: 'YES_NO',
  STAR_RATING: 'STAR_RATING',
  LONG_TEXT: 'LONG_TEXT',
  STATEMENT: 'STATEMENT',
  SINGLE_CHOICE: 'SINGLE_CHOICE',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE'
};

export type QuestionFormat = (typeof QuestionFormat)[keyof typeof QuestionFormat]


export const ResponseStatus: {
  pending: 'pending',
  completed: 'completed',
  abandoned: 'abandoned'
};

export type ResponseStatus = (typeof ResponseStatus)[keyof typeof ResponseStatus]


export const StyleMode: {
  basic: 'basic',
  advanced: 'advanced'
};

export type StyleMode = (typeof StyleMode)[keyof typeof StyleMode]

}

export type Language = $Enums.Language

export const Language: typeof $Enums.Language

export type Provider = $Enums.Provider

export const Provider: typeof $Enums.Provider

export type TeamMemberStatus = $Enums.TeamMemberStatus

export const TeamMemberStatus: typeof $Enums.TeamMemberStatus

export type Theme = $Enums.Theme

export const Theme: typeof $Enums.Theme

export type SurveyStatus = $Enums.SurveyStatus

export const SurveyStatus: typeof $Enums.SurveyStatus

export type QuestionFormat = $Enums.QuestionFormat

export const QuestionFormat: typeof $Enums.QuestionFormat

export type ResponseStatus = $Enums.ResponseStatus

export const ResponseStatus: typeof $Enums.ResponseStatus

export type StyleMode = $Enums.StyleMode

export const StyleMode: typeof $Enums.StyleMode

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.surveyType`: Exposes CRUD operations for the **SurveyType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SurveyTypes
    * const surveyTypes = await prisma.surveyType.findMany()
    * ```
    */
  get surveyType(): Prisma.SurveyTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.survey`: Exposes CRUD operations for the **Survey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Surveys
    * const surveys = await prisma.survey.findMany()
    * ```
    */
  get survey(): Prisma.SurveyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.surveyStyle`: Exposes CRUD operations for the **SurveyStyle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SurveyStyles
    * const surveyStyles = await prisma.surveyStyle.findMany()
    * ```
    */
  get surveyStyle(): Prisma.SurveyStyleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionOption`: Exposes CRUD operations for the **QuestionOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionOptions
    * const questionOptions = await prisma.questionOption.findMany()
    * ```
    */
  get questionOption(): Prisma.QuestionOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.surveyResponse`: Exposes CRUD operations for the **SurveyResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SurveyResponses
    * const surveyResponses = await prisma.surveyResponse.findMany()
    * ```
    */
  get surveyResponse(): Prisma.SurveyResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.surveyResponseSummary`: Exposes CRUD operations for the **SurveyResponseSummary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SurveyResponseSummaries
    * const surveyResponseSummaries = await prisma.surveyResponseSummary.findMany()
    * ```
    */
  get surveyResponseSummary(): Prisma.SurveyResponseSummaryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionResponse`: Exposes CRUD operations for the **QuestionResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionResponses
    * const questionResponses = await prisma.questionResponse.findMany()
    * ```
    */
  get questionResponse(): Prisma.QuestionResponseDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    File: 'File',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Team: 'Team',
    TeamMember: 'TeamMember',
    SurveyType: 'SurveyType',
    Survey: 'Survey',
    SurveyStyle: 'SurveyStyle',
    Question: 'Question',
    QuestionOption: 'QuestionOption',
    SurveyResponse: 'SurveyResponse',
    SurveyResponseSummary: 'SurveyResponseSummary',
    QuestionResponse: 'QuestionResponse'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "file" | "account" | "session" | "verificationToken" | "team" | "teamMember" | "surveyType" | "survey" | "surveyStyle" | "question" | "questionOption" | "surveyResponse" | "surveyResponseSummary" | "questionResponse"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamMember: {
        payload: Prisma.$TeamMemberPayload<ExtArgs>
        fields: Prisma.TeamMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findFirst: {
            args: Prisma.TeamMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findMany: {
            args: Prisma.TeamMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          create: {
            args: Prisma.TeamMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          createMany: {
            args: Prisma.TeamMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          delete: {
            args: Prisma.TeamMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          update: {
            args: Prisma.TeamMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          deleteMany: {
            args: Prisma.TeamMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          upsert: {
            args: Prisma.TeamMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          aggregate: {
            args: Prisma.TeamMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMember>
          }
          groupBy: {
            args: Prisma.TeamMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMemberCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberCountAggregateOutputType> | number
          }
        }
      }
      SurveyType: {
        payload: Prisma.$SurveyTypePayload<ExtArgs>
        fields: Prisma.SurveyTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurveyTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurveyTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>
          }
          findFirst: {
            args: Prisma.SurveyTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurveyTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>
          }
          findMany: {
            args: Prisma.SurveyTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>[]
          }
          create: {
            args: Prisma.SurveyTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>
          }
          createMany: {
            args: Prisma.SurveyTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SurveyTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>[]
          }
          delete: {
            args: Prisma.SurveyTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>
          }
          update: {
            args: Prisma.SurveyTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>
          }
          deleteMany: {
            args: Prisma.SurveyTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurveyTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SurveyTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>[]
          }
          upsert: {
            args: Prisma.SurveyTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyTypePayload>
          }
          aggregate: {
            args: Prisma.SurveyTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurveyType>
          }
          groupBy: {
            args: Prisma.SurveyTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurveyTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurveyTypeCountArgs<ExtArgs>
            result: $Utils.Optional<SurveyTypeCountAggregateOutputType> | number
          }
        }
      }
      Survey: {
        payload: Prisma.$SurveyPayload<ExtArgs>
        fields: Prisma.SurveyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurveyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurveyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          findFirst: {
            args: Prisma.SurveyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurveyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          findMany: {
            args: Prisma.SurveyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>[]
          }
          create: {
            args: Prisma.SurveyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          createMany: {
            args: Prisma.SurveyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SurveyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>[]
          }
          delete: {
            args: Prisma.SurveyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          update: {
            args: Prisma.SurveyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          deleteMany: {
            args: Prisma.SurveyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurveyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SurveyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>[]
          }
          upsert: {
            args: Prisma.SurveyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyPayload>
          }
          aggregate: {
            args: Prisma.SurveyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurvey>
          }
          groupBy: {
            args: Prisma.SurveyGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurveyGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurveyCountArgs<ExtArgs>
            result: $Utils.Optional<SurveyCountAggregateOutputType> | number
          }
        }
      }
      SurveyStyle: {
        payload: Prisma.$SurveyStylePayload<ExtArgs>
        fields: Prisma.SurveyStyleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurveyStyleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurveyStyleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>
          }
          findFirst: {
            args: Prisma.SurveyStyleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurveyStyleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>
          }
          findMany: {
            args: Prisma.SurveyStyleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>[]
          }
          create: {
            args: Prisma.SurveyStyleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>
          }
          createMany: {
            args: Prisma.SurveyStyleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SurveyStyleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>[]
          }
          delete: {
            args: Prisma.SurveyStyleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>
          }
          update: {
            args: Prisma.SurveyStyleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>
          }
          deleteMany: {
            args: Prisma.SurveyStyleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurveyStyleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SurveyStyleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>[]
          }
          upsert: {
            args: Prisma.SurveyStyleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyStylePayload>
          }
          aggregate: {
            args: Prisma.SurveyStyleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurveyStyle>
          }
          groupBy: {
            args: Prisma.SurveyStyleGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurveyStyleGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurveyStyleCountArgs<ExtArgs>
            result: $Utils.Optional<SurveyStyleCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      QuestionOption: {
        payload: Prisma.$QuestionOptionPayload<ExtArgs>
        fields: Prisma.QuestionOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          findFirst: {
            args: Prisma.QuestionOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          findMany: {
            args: Prisma.QuestionOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          create: {
            args: Prisma.QuestionOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          createMany: {
            args: Prisma.QuestionOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          delete: {
            args: Prisma.QuestionOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          update: {
            args: Prisma.QuestionOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          aggregate: {
            args: Prisma.QuestionOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionOption>
          }
          groupBy: {
            args: Prisma.QuestionOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionOptionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionCountAggregateOutputType> | number
          }
        }
      }
      SurveyResponse: {
        payload: Prisma.$SurveyResponsePayload<ExtArgs>
        fields: Prisma.SurveyResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurveyResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurveyResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>
          }
          findFirst: {
            args: Prisma.SurveyResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurveyResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>
          }
          findMany: {
            args: Prisma.SurveyResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>[]
          }
          create: {
            args: Prisma.SurveyResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>
          }
          createMany: {
            args: Prisma.SurveyResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SurveyResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>[]
          }
          delete: {
            args: Prisma.SurveyResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>
          }
          update: {
            args: Prisma.SurveyResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>
          }
          deleteMany: {
            args: Prisma.SurveyResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurveyResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SurveyResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>[]
          }
          upsert: {
            args: Prisma.SurveyResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponsePayload>
          }
          aggregate: {
            args: Prisma.SurveyResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurveyResponse>
          }
          groupBy: {
            args: Prisma.SurveyResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurveyResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurveyResponseCountArgs<ExtArgs>
            result: $Utils.Optional<SurveyResponseCountAggregateOutputType> | number
          }
        }
      }
      SurveyResponseSummary: {
        payload: Prisma.$SurveyResponseSummaryPayload<ExtArgs>
        fields: Prisma.SurveyResponseSummaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SurveyResponseSummaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SurveyResponseSummaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>
          }
          findFirst: {
            args: Prisma.SurveyResponseSummaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SurveyResponseSummaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>
          }
          findMany: {
            args: Prisma.SurveyResponseSummaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>[]
          }
          create: {
            args: Prisma.SurveyResponseSummaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>
          }
          createMany: {
            args: Prisma.SurveyResponseSummaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SurveyResponseSummaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>[]
          }
          delete: {
            args: Prisma.SurveyResponseSummaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>
          }
          update: {
            args: Prisma.SurveyResponseSummaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>
          }
          deleteMany: {
            args: Prisma.SurveyResponseSummaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SurveyResponseSummaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SurveyResponseSummaryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>[]
          }
          upsert: {
            args: Prisma.SurveyResponseSummaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SurveyResponseSummaryPayload>
          }
          aggregate: {
            args: Prisma.SurveyResponseSummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSurveyResponseSummary>
          }
          groupBy: {
            args: Prisma.SurveyResponseSummaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SurveyResponseSummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.SurveyResponseSummaryCountArgs<ExtArgs>
            result: $Utils.Optional<SurveyResponseSummaryCountAggregateOutputType> | number
          }
        }
      }
      QuestionResponse: {
        payload: Prisma.$QuestionResponsePayload<ExtArgs>
        fields: Prisma.QuestionResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>
          }
          findFirst: {
            args: Prisma.QuestionResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>
          }
          findMany: {
            args: Prisma.QuestionResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>[]
          }
          create: {
            args: Prisma.QuestionResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>
          }
          createMany: {
            args: Prisma.QuestionResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>[]
          }
          delete: {
            args: Prisma.QuestionResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>
          }
          update: {
            args: Prisma.QuestionResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>
          }
          deleteMany: {
            args: Prisma.QuestionResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>[]
          }
          upsert: {
            args: Prisma.QuestionResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionResponsePayload>
          }
          aggregate: {
            args: Prisma.QuestionResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionResponse>
          }
          groupBy: {
            args: Prisma.QuestionResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionResponseCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionResponseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    file?: FileOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
    team?: TeamOmit
    teamMember?: TeamMemberOmit
    surveyType?: SurveyTypeOmit
    survey?: SurveyOmit
    surveyStyle?: SurveyStyleOmit
    question?: QuestionOmit
    questionOption?: QuestionOptionOmit
    surveyResponse?: SurveyResponseOmit
    surveyResponseSummary?: SurveyResponseSummaryOmit
    questionResponse?: QuestionResponseOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    teamMembers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    teamMembers?: boolean | UserCountOutputTypeCountTeamMembersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }


  /**
   * Count Type FileCountOutputType
   */

  export type FileCountOutputType = {
    avatarFor: number
  }

  export type FileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatarFor?: boolean | FileCountOutputTypeCountAvatarForArgs
  }

  // Custom InputTypes
  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileCountOutputType
     */
    select?: FileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileCountOutputType without action
   */
  export type FileCountOutputTypeCountAvatarForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    questionOptions: number
    questionResponses: number
    questions: number
    surveyResponses: number
    surveysStyle: number
    surveyTypes: number
    surveys: number
    members: number
    user: number
    responseSummaries: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionOptions?: boolean | TeamCountOutputTypeCountQuestionOptionsArgs
    questionResponses?: boolean | TeamCountOutputTypeCountQuestionResponsesArgs
    questions?: boolean | TeamCountOutputTypeCountQuestionsArgs
    surveyResponses?: boolean | TeamCountOutputTypeCountSurveyResponsesArgs
    surveysStyle?: boolean | TeamCountOutputTypeCountSurveysStyleArgs
    surveyTypes?: boolean | TeamCountOutputTypeCountSurveyTypesArgs
    surveys?: boolean | TeamCountOutputTypeCountSurveysArgs
    members?: boolean | TeamCountOutputTypeCountMembersArgs
    user?: boolean | TeamCountOutputTypeCountUserArgs
    responseSummaries?: boolean | TeamCountOutputTypeCountResponseSummariesArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountQuestionOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountQuestionResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionResponseWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSurveyResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSurveysStyleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyStyleWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSurveyTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyTypeWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountResponseSummariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseSummaryWhereInput
  }


  /**
   * Count Type SurveyTypeCountOutputType
   */

  export type SurveyTypeCountOutputType = {
    surveys: number
  }

  export type SurveyTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    surveys?: boolean | SurveyTypeCountOutputTypeCountSurveysArgs
  }

  // Custom InputTypes
  /**
   * SurveyTypeCountOutputType without action
   */
  export type SurveyTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyTypeCountOutputType
     */
    select?: SurveyTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SurveyTypeCountOutputType without action
   */
  export type SurveyTypeCountOutputTypeCountSurveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyWhereInput
  }


  /**
   * Count Type SurveyCountOutputType
   */

  export type SurveyCountOutputType = {
    questions: number
    responses: number
    SurveyResponseSummary: number
  }

  export type SurveyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | SurveyCountOutputTypeCountQuestionsArgs
    responses?: boolean | SurveyCountOutputTypeCountResponsesArgs
    SurveyResponseSummary?: boolean | SurveyCountOutputTypeCountSurveyResponseSummaryArgs
  }

  // Custom InputTypes
  /**
   * SurveyCountOutputType without action
   */
  export type SurveyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyCountOutputType
     */
    select?: SurveyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SurveyCountOutputType without action
   */
  export type SurveyCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * SurveyCountOutputType without action
   */
  export type SurveyCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseWhereInput
  }

  /**
   * SurveyCountOutputType without action
   */
  export type SurveyCountOutputTypeCountSurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseSummaryWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    options: number
    responses: number
    SurveyResponseSummary: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | QuestionCountOutputTypeCountOptionsArgs
    responses?: boolean | QuestionCountOutputTypeCountResponsesArgs
    SurveyResponseSummary?: boolean | QuestionCountOutputTypeCountSurveyResponseSummaryArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionResponseWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountSurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseSummaryWhereInput
  }


  /**
   * Count Type QuestionOptionCountOutputType
   */

  export type QuestionOptionCountOutputType = {
    responses: number
    SurveyResponseSummary: number
  }

  export type QuestionOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responses?: boolean | QuestionOptionCountOutputTypeCountResponsesArgs
    SurveyResponseSummary?: boolean | QuestionOptionCountOutputTypeCountSurveyResponseSummaryArgs
  }

  // Custom InputTypes
  /**
   * QuestionOptionCountOutputType without action
   */
  export type QuestionOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOptionCountOutputType
     */
    select?: QuestionOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionOptionCountOutputType without action
   */
  export type QuestionOptionCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionResponseWhereInput
  }

  /**
   * QuestionOptionCountOutputType without action
   */
  export type QuestionOptionCountOutputTypeCountSurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseSummaryWhereInput
  }


  /**
   * Count Type SurveyResponseCountOutputType
   */

  export type SurveyResponseCountOutputType = {
    questionResponses: number
    SurveyResponseSummary: number
  }

  export type SurveyResponseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionResponses?: boolean | SurveyResponseCountOutputTypeCountQuestionResponsesArgs
    SurveyResponseSummary?: boolean | SurveyResponseCountOutputTypeCountSurveyResponseSummaryArgs
  }

  // Custom InputTypes
  /**
   * SurveyResponseCountOutputType without action
   */
  export type SurveyResponseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseCountOutputType
     */
    select?: SurveyResponseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SurveyResponseCountOutputType without action
   */
  export type SurveyResponseCountOutputTypeCountQuestionResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionResponseWhereInput
  }

  /**
   * SurveyResponseCountOutputType without action
   */
  export type SurveyResponseCountOutputTypeCountSurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseSummaryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    avatarId: number | null
    defaultTeamId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    avatarId: number | null
    defaultTeamId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    provider: $Enums.Provider | null
    password: string | null
    resetPasswordToken: string | null
    confirmationToken: string | null
    confirmed: boolean | null
    blocked: boolean | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    language: $Enums.Language | null
    createdAt: Date | null
    updatedAt: Date | null
    avatarId: number | null
    idProvider: string | null
    resetPasswordExpires: Date | null
    theme: $Enums.Theme | null
    defaultTeamId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    provider: $Enums.Provider | null
    password: string | null
    resetPasswordToken: string | null
    confirmationToken: string | null
    confirmed: boolean | null
    blocked: boolean | null
    phone: string | null
    firstName: string | null
    lastName: string | null
    avatarUrl: string | null
    language: $Enums.Language | null
    createdAt: Date | null
    updatedAt: Date | null
    avatarId: number | null
    idProvider: string | null
    resetPasswordExpires: Date | null
    theme: $Enums.Theme | null
    defaultTeamId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    provider: number
    password: number
    resetPasswordToken: number
    confirmationToken: number
    confirmed: number
    blocked: number
    phone: number
    firstName: number
    lastName: number
    avatarUrl: number
    language: number
    createdAt: number
    updatedAt: number
    avatarId: number
    idProvider: number
    resetPasswordExpires: number
    theme: number
    defaultTeamId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    avatarId?: true
    defaultTeamId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    avatarId?: true
    defaultTeamId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    provider?: true
    password?: true
    resetPasswordToken?: true
    confirmationToken?: true
    confirmed?: true
    blocked?: true
    phone?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    avatarId?: true
    idProvider?: true
    resetPasswordExpires?: true
    theme?: true
    defaultTeamId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    provider?: true
    password?: true
    resetPasswordToken?: true
    confirmationToken?: true
    confirmed?: true
    blocked?: true
    phone?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    avatarId?: true
    idProvider?: true
    resetPasswordExpires?: true
    theme?: true
    defaultTeamId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    provider?: true
    password?: true
    resetPasswordToken?: true
    confirmationToken?: true
    confirmed?: true
    blocked?: true
    phone?: true
    firstName?: true
    lastName?: true
    avatarUrl?: true
    language?: true
    createdAt?: true
    updatedAt?: true
    avatarId?: true
    idProvider?: true
    resetPasswordExpires?: true
    theme?: true
    defaultTeamId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    provider: $Enums.Provider
    password: string | null
    resetPasswordToken: string | null
    confirmationToken: string | null
    confirmed: boolean | null
    blocked: boolean | null
    phone: string | null
    firstName: string
    lastName: string | null
    avatarUrl: string | null
    language: $Enums.Language
    createdAt: Date
    updatedAt: Date
    avatarId: number | null
    idProvider: string | null
    resetPasswordExpires: Date | null
    theme: $Enums.Theme
    defaultTeamId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultTeamId?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    avatar?: boolean | User$avatarArgs<ExtArgs>
    team?: boolean | User$teamArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultTeamId?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
    team?: boolean | User$teamArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultTeamId?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
    team?: boolean | User$teamArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    provider?: boolean
    password?: boolean
    resetPasswordToken?: boolean
    confirmationToken?: boolean
    confirmed?: boolean
    blocked?: boolean
    phone?: boolean
    firstName?: boolean
    lastName?: boolean
    avatarUrl?: boolean
    language?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarId?: boolean
    idProvider?: boolean
    resetPasswordExpires?: boolean
    theme?: boolean
    defaultTeamId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "provider" | "password" | "resetPasswordToken" | "confirmationToken" | "confirmed" | "blocked" | "phone" | "firstName" | "lastName" | "avatarUrl" | "language" | "createdAt" | "updatedAt" | "avatarId" | "idProvider" | "resetPasswordExpires" | "theme" | "defaultTeamId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    teamMembers?: boolean | User$teamMembersArgs<ExtArgs>
    avatar?: boolean | User$avatarArgs<ExtArgs>
    team?: boolean | User$teamArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
    team?: boolean | User$teamArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
    team?: boolean | User$teamArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      teamMembers: Prisma.$TeamMemberPayload<ExtArgs>[]
      avatar: Prisma.$FilePayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      provider: $Enums.Provider
      password: string | null
      resetPasswordToken: string | null
      confirmationToken: string | null
      confirmed: boolean | null
      blocked: boolean | null
      phone: string | null
      firstName: string
      lastName: string | null
      avatarUrl: string | null
      language: $Enums.Language
      createdAt: Date
      updatedAt: Date
      avatarId: number | null
      idProvider: string | null
      resetPasswordExpires: Date | null
      theme: $Enums.Theme
      defaultTeamId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teamMembers<T extends User$teamMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$teamMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    avatar<T extends User$avatarArgs<ExtArgs> = {}>(args?: Subset<T, User$avatarArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    team<T extends User$teamArgs<ExtArgs> = {}>(args?: Subset<T, User$teamArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly provider: FieldRef<"User", 'Provider'>
    readonly password: FieldRef<"User", 'String'>
    readonly resetPasswordToken: FieldRef<"User", 'String'>
    readonly confirmationToken: FieldRef<"User", 'String'>
    readonly confirmed: FieldRef<"User", 'Boolean'>
    readonly blocked: FieldRef<"User", 'Boolean'>
    readonly phone: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly language: FieldRef<"User", 'Language'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly avatarId: FieldRef<"User", 'Int'>
    readonly idProvider: FieldRef<"User", 'String'>
    readonly resetPasswordExpires: FieldRef<"User", 'DateTime'>
    readonly theme: FieldRef<"User", 'Theme'>
    readonly defaultTeamId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.teamMembers
   */
  export type User$teamMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * User.avatar
   */
  export type User$avatarArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
  }

  /**
   * User.team
   */
  export type User$teamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    where?: TeamWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    id: number | null
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: number | null
    name: string | null
    url: string | null
    publicId: string | null
    format: string | null
    version: string | null
    mimeType: string | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileMaxAggregateOutputType = {
    id: number | null
    name: string | null
    url: string | null
    publicId: string | null
    format: string | null
    version: string | null
    mimeType: string | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    name: number
    url: number
    publicId: number
    format: number
    version: number
    mimeType: number
    size: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    id?: true
    size?: true
  }

  export type FileSumAggregateInputType = {
    id?: true
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    publicId?: true
    format?: true
    version?: true
    mimeType?: true
    size?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    publicId?: true
    format?: true
    version?: true
    mimeType?: true
    size?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    publicId?: true
    format?: true
    version?: true
    mimeType?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: number
    name: string
    url: string
    publicId: string | null
    format: string | null
    version: string | null
    mimeType: string | null
    size: number | null
    createdAt: Date
    updatedAt: Date
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatarFor?: boolean | File$avatarForArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    publicId?: boolean
    format?: boolean
    version?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "url" | "publicId" | "format" | "version" | "mimeType" | "size" | "createdAt" | "updatedAt", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avatarFor?: boolean | File$avatarForArgs<ExtArgs>
    _count?: boolean | FileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      avatarFor: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      url: string
      publicId: string | null
      format: string | null
      version: string | null
      mimeType: string | null
      size: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    avatarFor<T extends File$avatarForArgs<ExtArgs> = {}>(args?: Subset<T, File$avatarForArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'Int'>
    readonly name: FieldRef<"File", 'String'>
    readonly url: FieldRef<"File", 'String'>
    readonly publicId: FieldRef<"File", 'String'>
    readonly format: FieldRef<"File", 'String'>
    readonly version: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.avatarFor
   */
  export type File$avatarForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    userId: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    userId?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'Int'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: number
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: number
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
    ResponseRate: number | null
    totalActiveSurveys: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
    totalSurveys: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
    ResponseRate: number | null
    totalActiveSurveys: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
    totalSurveys: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ResponseRate: number | null
    totalActiveSurveys: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
    totalSurveys: number | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ResponseRate: number | null
    totalActiveSurveys: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
    totalSurveys: number | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    description: number
    token: number
    createdAt: number
    updatedAt: number
    ResponseRate: number
    totalActiveSurveys: number
    totalOpenSurveys: number
    totalResponses: number
    totalSurveys: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
    ResponseRate?: true
    totalActiveSurveys?: true
    totalOpenSurveys?: true
    totalResponses?: true
    totalSurveys?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
    ResponseRate?: true
    totalActiveSurveys?: true
    totalOpenSurveys?: true
    totalResponses?: true
    totalSurveys?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ResponseRate?: true
    totalActiveSurveys?: true
    totalOpenSurveys?: true
    totalResponses?: true
    totalSurveys?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ResponseRate?: true
    totalActiveSurveys?: true
    totalOpenSurveys?: true
    totalResponses?: true
    totalSurveys?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ResponseRate?: true
    totalActiveSurveys?: true
    totalOpenSurveys?: true
    totalResponses?: true
    totalSurveys?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    name: string
    description: string | null
    token: string | null
    createdAt: Date
    updatedAt: Date
    ResponseRate: number
    totalActiveSurveys: number
    totalOpenSurveys: number
    totalResponses: number
    totalSurveys: number
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ResponseRate?: boolean
    totalActiveSurveys?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    totalSurveys?: boolean
    questionOptions?: boolean | Team$questionOptionsArgs<ExtArgs>
    questionResponses?: boolean | Team$questionResponsesArgs<ExtArgs>
    questions?: boolean | Team$questionsArgs<ExtArgs>
    surveyResponses?: boolean | Team$surveyResponsesArgs<ExtArgs>
    surveysStyle?: boolean | Team$surveysStyleArgs<ExtArgs>
    surveyTypes?: boolean | Team$surveyTypesArgs<ExtArgs>
    surveys?: boolean | Team$surveysArgs<ExtArgs>
    members?: boolean | Team$membersArgs<ExtArgs>
    user?: boolean | Team$userArgs<ExtArgs>
    responseSummaries?: boolean | Team$responseSummariesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ResponseRate?: boolean
    totalActiveSurveys?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    totalSurveys?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ResponseRate?: boolean
    totalActiveSurveys?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    totalSurveys?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ResponseRate?: boolean
    totalActiveSurveys?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    totalSurveys?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "token" | "createdAt" | "updatedAt" | "ResponseRate" | "totalActiveSurveys" | "totalOpenSurveys" | "totalResponses" | "totalSurveys", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionOptions?: boolean | Team$questionOptionsArgs<ExtArgs>
    questionResponses?: boolean | Team$questionResponsesArgs<ExtArgs>
    questions?: boolean | Team$questionsArgs<ExtArgs>
    surveyResponses?: boolean | Team$surveyResponsesArgs<ExtArgs>
    surveysStyle?: boolean | Team$surveysStyleArgs<ExtArgs>
    surveyTypes?: boolean | Team$surveyTypesArgs<ExtArgs>
    surveys?: boolean | Team$surveysArgs<ExtArgs>
    members?: boolean | Team$membersArgs<ExtArgs>
    user?: boolean | Team$userArgs<ExtArgs>
    responseSummaries?: boolean | Team$responseSummariesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      questionOptions: Prisma.$QuestionOptionPayload<ExtArgs>[]
      questionResponses: Prisma.$QuestionResponsePayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      surveyResponses: Prisma.$SurveyResponsePayload<ExtArgs>[]
      surveysStyle: Prisma.$SurveyStylePayload<ExtArgs>[]
      surveyTypes: Prisma.$SurveyTypePayload<ExtArgs>[]
      surveys: Prisma.$SurveyPayload<ExtArgs>[]
      members: Prisma.$TeamMemberPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>[]
      responseSummaries: Prisma.$SurveyResponseSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      token: string | null
      createdAt: Date
      updatedAt: Date
      ResponseRate: number
      totalActiveSurveys: number
      totalOpenSurveys: number
      totalResponses: number
      totalSurveys: number
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionOptions<T extends Team$questionOptionsArgs<ExtArgs> = {}>(args?: Subset<T, Team$questionOptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionResponses<T extends Team$questionResponsesArgs<ExtArgs> = {}>(args?: Subset<T, Team$questionResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends Team$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Team$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    surveyResponses<T extends Team$surveyResponsesArgs<ExtArgs> = {}>(args?: Subset<T, Team$surveyResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    surveysStyle<T extends Team$surveysStyleArgs<ExtArgs> = {}>(args?: Subset<T, Team$surveysStyleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    surveyTypes<T extends Team$surveyTypesArgs<ExtArgs> = {}>(args?: Subset<T, Team$surveyTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    surveys<T extends Team$surveysArgs<ExtArgs> = {}>(args?: Subset<T, Team$surveysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    members<T extends Team$membersArgs<ExtArgs> = {}>(args?: Subset<T, Team$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends Team$userArgs<ExtArgs> = {}>(args?: Subset<T, Team$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    responseSummaries<T extends Team$responseSummariesArgs<ExtArgs> = {}>(args?: Subset<T, Team$responseSummariesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly name: FieldRef<"Team", 'String'>
    readonly description: FieldRef<"Team", 'String'>
    readonly token: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
    readonly ResponseRate: FieldRef<"Team", 'Int'>
    readonly totalActiveSurveys: FieldRef<"Team", 'Int'>
    readonly totalOpenSurveys: FieldRef<"Team", 'Int'>
    readonly totalResponses: FieldRef<"Team", 'Int'>
    readonly totalSurveys: FieldRef<"Team", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.questionOptions
   */
  export type Team$questionOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    cursor?: QuestionOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * Team.questionResponses
   */
  export type Team$questionResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    where?: QuestionResponseWhereInput
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    cursor?: QuestionResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * Team.questions
   */
  export type Team$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Team.surveyResponses
   */
  export type Team$surveyResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    where?: SurveyResponseWhereInput
    orderBy?: SurveyResponseOrderByWithRelationInput | SurveyResponseOrderByWithRelationInput[]
    cursor?: SurveyResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseScalarFieldEnum | SurveyResponseScalarFieldEnum[]
  }

  /**
   * Team.surveysStyle
   */
  export type Team$surveysStyleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    where?: SurveyStyleWhereInput
    orderBy?: SurveyStyleOrderByWithRelationInput | SurveyStyleOrderByWithRelationInput[]
    cursor?: SurveyStyleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyStyleScalarFieldEnum | SurveyStyleScalarFieldEnum[]
  }

  /**
   * Team.surveyTypes
   */
  export type Team$surveyTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    where?: SurveyTypeWhereInput
    orderBy?: SurveyTypeOrderByWithRelationInput | SurveyTypeOrderByWithRelationInput[]
    cursor?: SurveyTypeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyTypeScalarFieldEnum | SurveyTypeScalarFieldEnum[]
  }

  /**
   * Team.surveys
   */
  export type Team$surveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    where?: SurveyWhereInput
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    cursor?: SurveyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Team.members
   */
  export type Team$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * Team.user
   */
  export type Team$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Team.responseSummaries
   */
  export type Team$responseSummariesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    where?: SurveyResponseSummaryWhereInput
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    cursor?: SurveyResponseSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamMember
   */

  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _avg: TeamMemberAvgAggregateOutputType | null
    _sum: TeamMemberSumAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    teamId: number | null
  }

  export type TeamMemberSumAggregateOutputType = {
    id: number | null
    userId: number | null
    teamId: number | null
  }

  export type TeamMemberMinAggregateOutputType = {
    id: number | null
    isAdmin: boolean | null
    canPost: boolean | null
    canApprove: boolean | null
    isOwner: boolean | null
    teamMemberStatus: $Enums.TeamMemberStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    teamId: number | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    id: number | null
    isAdmin: boolean | null
    canPost: boolean | null
    canApprove: boolean | null
    isOwner: boolean | null
    teamMemberStatus: $Enums.TeamMemberStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    teamId: number | null
  }

  export type TeamMemberCountAggregateOutputType = {
    id: number
    isAdmin: number
    canPost: number
    canApprove: number
    isOwner: number
    teamMemberStatus: number
    createdAt: number
    updatedAt: number
    userId: number
    teamId: number
    _all: number
  }


  export type TeamMemberAvgAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
  }

  export type TeamMemberSumAggregateInputType = {
    id?: true
    userId?: true
    teamId?: true
  }

  export type TeamMemberMinAggregateInputType = {
    id?: true
    isAdmin?: true
    canPost?: true
    canApprove?: true
    isOwner?: true
    teamMemberStatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    teamId?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    id?: true
    isAdmin?: true
    canPost?: true
    canApprove?: true
    isOwner?: true
    teamMemberStatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    teamId?: true
  }

  export type TeamMemberCountAggregateInputType = {
    id?: true
    isAdmin?: true
    canPost?: true
    canApprove?: true
    isOwner?: true
    teamMemberStatus?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    teamId?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMember to aggregate.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithAggregationInput | TeamMemberOrderByWithAggregationInput[]
    by: TeamMemberScalarFieldEnum[] | TeamMemberScalarFieldEnum
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _avg?: TeamMemberAvgAggregateInputType
    _sum?: TeamMemberSumAggregateInputType
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }

  export type TeamMemberGroupByOutputType = {
    id: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt: Date
    updatedAt: Date
    userId: number
    teamId: number
    _count: TeamMemberCountAggregateOutputType | null
    _avg: TeamMemberAvgAggregateOutputType | null
    _sum: TeamMemberSumAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    teamMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    teamMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    teamMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectScalar = {
    id?: boolean
    isAdmin?: boolean
    canPost?: boolean
    canApprove?: boolean
    isOwner?: boolean
    teamMemberStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    teamId?: boolean
  }

  export type TeamMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isAdmin" | "canPost" | "canApprove" | "isOwner" | "teamMemberStatus" | "createdAt" | "updatedAt" | "userId" | "teamId", ExtArgs["result"]["teamMember"]>
  export type TeamMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TeamMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TeamMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TeamMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMember"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      isAdmin: boolean
      canPost: boolean
      canApprove: boolean
      isOwner: boolean
      teamMemberStatus: $Enums.TeamMemberStatus
      createdAt: Date
      updatedAt: Date
      userId: number
      teamId: number
    }, ExtArgs["result"]["teamMember"]>
    composites: {}
  }

  type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = $Result.GetResult<Prisma.$TeamMemberPayload, S>

  type TeamMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMemberCountAggregateInputType | true
    }

  export interface TeamMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMemberFindUniqueArgs>(args: SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMemberFindFirstArgs>(args?: SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamMemberFindManyArgs>(args?: SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
     */
    create<T extends TeamMemberCreateArgs>(args: SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMemberCreateManyArgs>(args?: SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMembers and returns the data saved in the database.
     * @param {TeamMemberCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMembers and only return the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
     */
    delete<T extends TeamMemberDeleteArgs>(args: SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMemberUpdateArgs>(args: SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMemberDeleteManyArgs>(args?: SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMemberUpdateManyArgs>(args: SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers and returns the data updated in the database.
     * @param {TeamMemberUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMembers and only return the `id`
     * const teamMemberWithIdOnly = await prisma.teamMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
     */
    upsert<T extends TeamMemberUpsertArgs>(args: SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMember model
   */
  readonly fields: TeamMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMember model
   */
  interface TeamMemberFieldRefs {
    readonly id: FieldRef<"TeamMember", 'Int'>
    readonly isAdmin: FieldRef<"TeamMember", 'Boolean'>
    readonly canPost: FieldRef<"TeamMember", 'Boolean'>
    readonly canApprove: FieldRef<"TeamMember", 'Boolean'>
    readonly isOwner: FieldRef<"TeamMember", 'Boolean'>
    readonly teamMemberStatus: FieldRef<"TeamMember", 'TeamMemberStatus'>
    readonly createdAt: FieldRef<"TeamMember", 'DateTime'>
    readonly updatedAt: FieldRef<"TeamMember", 'DateTime'>
    readonly userId: FieldRef<"TeamMember", 'Int'>
    readonly teamId: FieldRef<"TeamMember", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findUniqueOrThrow
   */
  export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findFirstOrThrow
   */
  export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMember.
     */
    data: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }

  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMember createManyAndReturn
   */
  export type TeamMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMember.
     */
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember updateManyAndReturn
   */
  export type TeamMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     */
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     */
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }

  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter which TeamMember to delete.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMember without action
   */
  export type TeamMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
  }


  /**
   * Model SurveyType
   */

  export type AggregateSurveyType = {
    _count: SurveyTypeCountAggregateOutputType | null
    _avg: SurveyTypeAvgAggregateOutputType | null
    _sum: SurveyTypeSumAggregateOutputType | null
    _min: SurveyTypeMinAggregateOutputType | null
    _max: SurveyTypeMaxAggregateOutputType | null
  }

  export type SurveyTypeAvgAggregateOutputType = {
    teamId: number | null
  }

  export type SurveyTypeSumAggregateOutputType = {
    teamId: number | null
  }

  export type SurveyTypeMinAggregateOutputType = {
    id: string | null
    name: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: number | null
  }

  export type SurveyTypeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: number | null
  }

  export type SurveyTypeCountAggregateOutputType = {
    id: number
    name: number
    isDefault: number
    createdAt: number
    updatedAt: number
    teamId: number
    _all: number
  }


  export type SurveyTypeAvgAggregateInputType = {
    teamId?: true
  }

  export type SurveyTypeSumAggregateInputType = {
    teamId?: true
  }

  export type SurveyTypeMinAggregateInputType = {
    id?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
  }

  export type SurveyTypeMaxAggregateInputType = {
    id?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
  }

  export type SurveyTypeCountAggregateInputType = {
    id?: true
    name?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    _all?: true
  }

  export type SurveyTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyType to aggregate.
     */
    where?: SurveyTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyTypes to fetch.
     */
    orderBy?: SurveyTypeOrderByWithRelationInput | SurveyTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveyTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SurveyTypes
    **/
    _count?: true | SurveyTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveyTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveyTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveyTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveyTypeMaxAggregateInputType
  }

  export type GetSurveyTypeAggregateType<T extends SurveyTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateSurveyType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurveyType[P]>
      : GetScalarType<T[P], AggregateSurveyType[P]>
  }




  export type SurveyTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyTypeWhereInput
    orderBy?: SurveyTypeOrderByWithAggregationInput | SurveyTypeOrderByWithAggregationInput[]
    by: SurveyTypeScalarFieldEnum[] | SurveyTypeScalarFieldEnum
    having?: SurveyTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveyTypeCountAggregateInputType | true
    _avg?: SurveyTypeAvgAggregateInputType
    _sum?: SurveyTypeSumAggregateInputType
    _min?: SurveyTypeMinAggregateInputType
    _max?: SurveyTypeMaxAggregateInputType
  }

  export type SurveyTypeGroupByOutputType = {
    id: string
    name: string
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    teamId: number
    _count: SurveyTypeCountAggregateOutputType | null
    _avg: SurveyTypeAvgAggregateOutputType | null
    _sum: SurveyTypeSumAggregateOutputType | null
    _min: SurveyTypeMinAggregateOutputType | null
    _max: SurveyTypeMaxAggregateOutputType | null
  }

  type GetSurveyTypeGroupByPayload<T extends SurveyTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurveyTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveyTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveyTypeGroupByOutputType[P]>
            : GetScalarType<T[P], SurveyTypeGroupByOutputType[P]>
        }
      >
    >


  export type SurveyTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    surveys?: boolean | SurveyType$surveysArgs<ExtArgs>
    _count?: boolean | SurveyTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyType"]>

  export type SurveyTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyType"]>

  export type SurveyTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyType"]>

  export type SurveyTypeSelectScalar = {
    id?: boolean
    name?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
  }

  export type SurveyTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "isDefault" | "createdAt" | "updatedAt" | "teamId", ExtArgs["result"]["surveyType"]>
  export type SurveyTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    surveys?: boolean | SurveyType$surveysArgs<ExtArgs>
    _count?: boolean | SurveyTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SurveyTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type SurveyTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $SurveyTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SurveyType"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      surveys: Prisma.$SurveyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
      teamId: number
    }, ExtArgs["result"]["surveyType"]>
    composites: {}
  }

  type SurveyTypeGetPayload<S extends boolean | null | undefined | SurveyTypeDefaultArgs> = $Result.GetResult<Prisma.$SurveyTypePayload, S>

  type SurveyTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SurveyTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SurveyTypeCountAggregateInputType | true
    }

  export interface SurveyTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SurveyType'], meta: { name: 'SurveyType' } }
    /**
     * Find zero or one SurveyType that matches the filter.
     * @param {SurveyTypeFindUniqueArgs} args - Arguments to find a SurveyType
     * @example
     * // Get one SurveyType
     * const surveyType = await prisma.surveyType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurveyTypeFindUniqueArgs>(args: SelectSubset<T, SurveyTypeFindUniqueArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SurveyType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SurveyTypeFindUniqueOrThrowArgs} args - Arguments to find a SurveyType
     * @example
     * // Get one SurveyType
     * const surveyType = await prisma.surveyType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurveyTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, SurveyTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeFindFirstArgs} args - Arguments to find a SurveyType
     * @example
     * // Get one SurveyType
     * const surveyType = await prisma.surveyType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurveyTypeFindFirstArgs>(args?: SelectSubset<T, SurveyTypeFindFirstArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeFindFirstOrThrowArgs} args - Arguments to find a SurveyType
     * @example
     * // Get one SurveyType
     * const surveyType = await prisma.surveyType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurveyTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, SurveyTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SurveyTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SurveyTypes
     * const surveyTypes = await prisma.surveyType.findMany()
     * 
     * // Get first 10 SurveyTypes
     * const surveyTypes = await prisma.surveyType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveyTypeWithIdOnly = await prisma.surveyType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurveyTypeFindManyArgs>(args?: SelectSubset<T, SurveyTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SurveyType.
     * @param {SurveyTypeCreateArgs} args - Arguments to create a SurveyType.
     * @example
     * // Create one SurveyType
     * const SurveyType = await prisma.surveyType.create({
     *   data: {
     *     // ... data to create a SurveyType
     *   }
     * })
     * 
     */
    create<T extends SurveyTypeCreateArgs>(args: SelectSubset<T, SurveyTypeCreateArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SurveyTypes.
     * @param {SurveyTypeCreateManyArgs} args - Arguments to create many SurveyTypes.
     * @example
     * // Create many SurveyTypes
     * const surveyType = await prisma.surveyType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurveyTypeCreateManyArgs>(args?: SelectSubset<T, SurveyTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SurveyTypes and returns the data saved in the database.
     * @param {SurveyTypeCreateManyAndReturnArgs} args - Arguments to create many SurveyTypes.
     * @example
     * // Create many SurveyTypes
     * const surveyType = await prisma.surveyType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SurveyTypes and only return the `id`
     * const surveyTypeWithIdOnly = await prisma.surveyType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SurveyTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, SurveyTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SurveyType.
     * @param {SurveyTypeDeleteArgs} args - Arguments to delete one SurveyType.
     * @example
     * // Delete one SurveyType
     * const SurveyType = await prisma.surveyType.delete({
     *   where: {
     *     // ... filter to delete one SurveyType
     *   }
     * })
     * 
     */
    delete<T extends SurveyTypeDeleteArgs>(args: SelectSubset<T, SurveyTypeDeleteArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SurveyType.
     * @param {SurveyTypeUpdateArgs} args - Arguments to update one SurveyType.
     * @example
     * // Update one SurveyType
     * const surveyType = await prisma.surveyType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurveyTypeUpdateArgs>(args: SelectSubset<T, SurveyTypeUpdateArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SurveyTypes.
     * @param {SurveyTypeDeleteManyArgs} args - Arguments to filter SurveyTypes to delete.
     * @example
     * // Delete a few SurveyTypes
     * const { count } = await prisma.surveyType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurveyTypeDeleteManyArgs>(args?: SelectSubset<T, SurveyTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SurveyTypes
     * const surveyType = await prisma.surveyType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurveyTypeUpdateManyArgs>(args: SelectSubset<T, SurveyTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyTypes and returns the data updated in the database.
     * @param {SurveyTypeUpdateManyAndReturnArgs} args - Arguments to update many SurveyTypes.
     * @example
     * // Update many SurveyTypes
     * const surveyType = await prisma.surveyType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SurveyTypes and only return the `id`
     * const surveyTypeWithIdOnly = await prisma.surveyType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SurveyTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, SurveyTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SurveyType.
     * @param {SurveyTypeUpsertArgs} args - Arguments to update or create a SurveyType.
     * @example
     * // Update or create a SurveyType
     * const surveyType = await prisma.surveyType.upsert({
     *   create: {
     *     // ... data to create a SurveyType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SurveyType we want to update
     *   }
     * })
     */
    upsert<T extends SurveyTypeUpsertArgs>(args: SelectSubset<T, SurveyTypeUpsertArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SurveyTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeCountArgs} args - Arguments to filter SurveyTypes to count.
     * @example
     * // Count the number of SurveyTypes
     * const count = await prisma.surveyType.count({
     *   where: {
     *     // ... the filter for the SurveyTypes we want to count
     *   }
     * })
    **/
    count<T extends SurveyTypeCountArgs>(
      args?: Subset<T, SurveyTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveyTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SurveyType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveyTypeAggregateArgs>(args: Subset<T, SurveyTypeAggregateArgs>): Prisma.PrismaPromise<GetSurveyTypeAggregateType<T>>

    /**
     * Group by SurveyType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveyTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveyTypeGroupByArgs['orderBy'] }
        : { orderBy?: SurveyTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveyTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveyTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SurveyType model
   */
  readonly fields: SurveyTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SurveyType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurveyTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    surveys<T extends SurveyType$surveysArgs<ExtArgs> = {}>(args?: Subset<T, SurveyType$surveysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SurveyType model
   */
  interface SurveyTypeFieldRefs {
    readonly id: FieldRef<"SurveyType", 'String'>
    readonly name: FieldRef<"SurveyType", 'String'>
    readonly isDefault: FieldRef<"SurveyType", 'Boolean'>
    readonly createdAt: FieldRef<"SurveyType", 'DateTime'>
    readonly updatedAt: FieldRef<"SurveyType", 'DateTime'>
    readonly teamId: FieldRef<"SurveyType", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SurveyType findUnique
   */
  export type SurveyTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * Filter, which SurveyType to fetch.
     */
    where: SurveyTypeWhereUniqueInput
  }

  /**
   * SurveyType findUniqueOrThrow
   */
  export type SurveyTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * Filter, which SurveyType to fetch.
     */
    where: SurveyTypeWhereUniqueInput
  }

  /**
   * SurveyType findFirst
   */
  export type SurveyTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * Filter, which SurveyType to fetch.
     */
    where?: SurveyTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyTypes to fetch.
     */
    orderBy?: SurveyTypeOrderByWithRelationInput | SurveyTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyTypes.
     */
    cursor?: SurveyTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyTypes.
     */
    distinct?: SurveyTypeScalarFieldEnum | SurveyTypeScalarFieldEnum[]
  }

  /**
   * SurveyType findFirstOrThrow
   */
  export type SurveyTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * Filter, which SurveyType to fetch.
     */
    where?: SurveyTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyTypes to fetch.
     */
    orderBy?: SurveyTypeOrderByWithRelationInput | SurveyTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyTypes.
     */
    cursor?: SurveyTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyTypes.
     */
    distinct?: SurveyTypeScalarFieldEnum | SurveyTypeScalarFieldEnum[]
  }

  /**
   * SurveyType findMany
   */
  export type SurveyTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * Filter, which SurveyTypes to fetch.
     */
    where?: SurveyTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyTypes to fetch.
     */
    orderBy?: SurveyTypeOrderByWithRelationInput | SurveyTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SurveyTypes.
     */
    cursor?: SurveyTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyTypes.
     */
    skip?: number
    distinct?: SurveyTypeScalarFieldEnum | SurveyTypeScalarFieldEnum[]
  }

  /**
   * SurveyType create
   */
  export type SurveyTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a SurveyType.
     */
    data: XOR<SurveyTypeCreateInput, SurveyTypeUncheckedCreateInput>
  }

  /**
   * SurveyType createMany
   */
  export type SurveyTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SurveyTypes.
     */
    data: SurveyTypeCreateManyInput | SurveyTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SurveyType createManyAndReturn
   */
  export type SurveyTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * The data used to create many SurveyTypes.
     */
    data: SurveyTypeCreateManyInput | SurveyTypeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyType update
   */
  export type SurveyTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a SurveyType.
     */
    data: XOR<SurveyTypeUpdateInput, SurveyTypeUncheckedUpdateInput>
    /**
     * Choose, which SurveyType to update.
     */
    where: SurveyTypeWhereUniqueInput
  }

  /**
   * SurveyType updateMany
   */
  export type SurveyTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SurveyTypes.
     */
    data: XOR<SurveyTypeUpdateManyMutationInput, SurveyTypeUncheckedUpdateManyInput>
    /**
     * Filter which SurveyTypes to update
     */
    where?: SurveyTypeWhereInput
    /**
     * Limit how many SurveyTypes to update.
     */
    limit?: number
  }

  /**
   * SurveyType updateManyAndReturn
   */
  export type SurveyTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * The data used to update SurveyTypes.
     */
    data: XOR<SurveyTypeUpdateManyMutationInput, SurveyTypeUncheckedUpdateManyInput>
    /**
     * Filter which SurveyTypes to update
     */
    where?: SurveyTypeWhereInput
    /**
     * Limit how many SurveyTypes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyType upsert
   */
  export type SurveyTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the SurveyType to update in case it exists.
     */
    where: SurveyTypeWhereUniqueInput
    /**
     * In case the SurveyType found by the `where` argument doesn't exist, create a new SurveyType with this data.
     */
    create: XOR<SurveyTypeCreateInput, SurveyTypeUncheckedCreateInput>
    /**
     * In case the SurveyType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveyTypeUpdateInput, SurveyTypeUncheckedUpdateInput>
  }

  /**
   * SurveyType delete
   */
  export type SurveyTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    /**
     * Filter which SurveyType to delete.
     */
    where: SurveyTypeWhereUniqueInput
  }

  /**
   * SurveyType deleteMany
   */
  export type SurveyTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyTypes to delete
     */
    where?: SurveyTypeWhereInput
    /**
     * Limit how many SurveyTypes to delete.
     */
    limit?: number
  }

  /**
   * SurveyType.surveys
   */
  export type SurveyType$surveysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    where?: SurveyWhereInput
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    cursor?: SurveyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * SurveyType without action
   */
  export type SurveyTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
  }


  /**
   * Model Survey
   */

  export type AggregateSurvey = {
    _count: SurveyCountAggregateOutputType | null
    _avg: SurveyAvgAggregateOutputType | null
    _sum: SurveySumAggregateOutputType | null
    _min: SurveyMinAggregateOutputType | null
    _max: SurveyMaxAggregateOutputType | null
  }

  export type SurveyAvgAggregateOutputType = {
    teamId: number | null
    ResponseRate: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
  }

  export type SurveySumAggregateOutputType = {
    teamId: number | null
    ResponseRate: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
  }

  export type SurveyMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.SurveyStatus | null
    allowMultipleResponses: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: number | null
    typeId: string | null
    ResponseRate: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
  }

  export type SurveyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    status: $Enums.SurveyStatus | null
    allowMultipleResponses: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: number | null
    typeId: string | null
    ResponseRate: number | null
    totalOpenSurveys: number | null
    totalResponses: number | null
  }

  export type SurveyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    status: number
    allowMultipleResponses: number
    createdAt: number
    updatedAt: number
    teamId: number
    typeId: number
    ResponseRate: number
    totalOpenSurveys: number
    totalResponses: number
    _all: number
  }


  export type SurveyAvgAggregateInputType = {
    teamId?: true
    ResponseRate?: true
    totalOpenSurveys?: true
    totalResponses?: true
  }

  export type SurveySumAggregateInputType = {
    teamId?: true
    ResponseRate?: true
    totalOpenSurveys?: true
    totalResponses?: true
  }

  export type SurveyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    allowMultipleResponses?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    typeId?: true
    ResponseRate?: true
    totalOpenSurveys?: true
    totalResponses?: true
  }

  export type SurveyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    allowMultipleResponses?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    typeId?: true
    ResponseRate?: true
    totalOpenSurveys?: true
    totalResponses?: true
  }

  export type SurveyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    status?: true
    allowMultipleResponses?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    typeId?: true
    ResponseRate?: true
    totalOpenSurveys?: true
    totalResponses?: true
    _all?: true
  }

  export type SurveyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Survey to aggregate.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Surveys
    **/
    _count?: true | SurveyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveyMaxAggregateInputType
  }

  export type GetSurveyAggregateType<T extends SurveyAggregateArgs> = {
        [P in keyof T & keyof AggregateSurvey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurvey[P]>
      : GetScalarType<T[P], AggregateSurvey[P]>
  }




  export type SurveyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyWhereInput
    orderBy?: SurveyOrderByWithAggregationInput | SurveyOrderByWithAggregationInput[]
    by: SurveyScalarFieldEnum[] | SurveyScalarFieldEnum
    having?: SurveyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveyCountAggregateInputType | true
    _avg?: SurveyAvgAggregateInputType
    _sum?: SurveySumAggregateInputType
    _min?: SurveyMinAggregateInputType
    _max?: SurveyMaxAggregateInputType
  }

  export type SurveyGroupByOutputType = {
    id: string
    name: string
    description: string | null
    status: $Enums.SurveyStatus
    allowMultipleResponses: boolean
    createdAt: Date
    updatedAt: Date
    teamId: number
    typeId: string | null
    ResponseRate: number
    totalOpenSurveys: number
    totalResponses: number
    _count: SurveyCountAggregateOutputType | null
    _avg: SurveyAvgAggregateOutputType | null
    _sum: SurveySumAggregateOutputType | null
    _min: SurveyMinAggregateOutputType | null
    _max: SurveyMaxAggregateOutputType | null
  }

  type GetSurveyGroupByPayload<T extends SurveyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurveyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveyGroupByOutputType[P]>
            : GetScalarType<T[P], SurveyGroupByOutputType[P]>
        }
      >
    >


  export type SurveySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    allowMultipleResponses?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    typeId?: boolean
    ResponseRate?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    questions?: boolean | Survey$questionsArgs<ExtArgs>
    responses?: boolean | Survey$responsesArgs<ExtArgs>
    style?: boolean | Survey$styleArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | Survey$typeArgs<ExtArgs>
    SurveyResponseSummary?: boolean | Survey$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | SurveyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["survey"]>

  export type SurveySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    allowMultipleResponses?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    typeId?: boolean
    ResponseRate?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | Survey$typeArgs<ExtArgs>
  }, ExtArgs["result"]["survey"]>

  export type SurveySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    allowMultipleResponses?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    typeId?: boolean
    ResponseRate?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | Survey$typeArgs<ExtArgs>
  }, ExtArgs["result"]["survey"]>

  export type SurveySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    status?: boolean
    allowMultipleResponses?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    typeId?: boolean
    ResponseRate?: boolean
    totalOpenSurveys?: boolean
    totalResponses?: boolean
  }

  export type SurveyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "status" | "allowMultipleResponses" | "createdAt" | "updatedAt" | "teamId" | "typeId" | "ResponseRate" | "totalOpenSurveys" | "totalResponses", ExtArgs["result"]["survey"]>
  export type SurveyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | Survey$questionsArgs<ExtArgs>
    responses?: boolean | Survey$responsesArgs<ExtArgs>
    style?: boolean | Survey$styleArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | Survey$typeArgs<ExtArgs>
    SurveyResponseSummary?: boolean | Survey$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | SurveyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SurveyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | Survey$typeArgs<ExtArgs>
  }
  export type SurveyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    type?: boolean | Survey$typeArgs<ExtArgs>
  }

  export type $SurveyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Survey"
    objects: {
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      responses: Prisma.$SurveyResponsePayload<ExtArgs>[]
      style: Prisma.$SurveyStylePayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs>
      type: Prisma.$SurveyTypePayload<ExtArgs> | null
      SurveyResponseSummary: Prisma.$SurveyResponseSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      status: $Enums.SurveyStatus
      allowMultipleResponses: boolean
      createdAt: Date
      updatedAt: Date
      teamId: number
      typeId: string | null
      ResponseRate: number
      totalOpenSurveys: number
      totalResponses: number
    }, ExtArgs["result"]["survey"]>
    composites: {}
  }

  type SurveyGetPayload<S extends boolean | null | undefined | SurveyDefaultArgs> = $Result.GetResult<Prisma.$SurveyPayload, S>

  type SurveyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SurveyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SurveyCountAggregateInputType | true
    }

  export interface SurveyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Survey'], meta: { name: 'Survey' } }
    /**
     * Find zero or one Survey that matches the filter.
     * @param {SurveyFindUniqueArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurveyFindUniqueArgs>(args: SelectSubset<T, SurveyFindUniqueArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Survey that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SurveyFindUniqueOrThrowArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurveyFindUniqueOrThrowArgs>(args: SelectSubset<T, SurveyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Survey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyFindFirstArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurveyFindFirstArgs>(args?: SelectSubset<T, SurveyFindFirstArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Survey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyFindFirstOrThrowArgs} args - Arguments to find a Survey
     * @example
     * // Get one Survey
     * const survey = await prisma.survey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurveyFindFirstOrThrowArgs>(args?: SelectSubset<T, SurveyFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Surveys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Surveys
     * const surveys = await prisma.survey.findMany()
     * 
     * // Get first 10 Surveys
     * const surveys = await prisma.survey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveyWithIdOnly = await prisma.survey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurveyFindManyArgs>(args?: SelectSubset<T, SurveyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Survey.
     * @param {SurveyCreateArgs} args - Arguments to create a Survey.
     * @example
     * // Create one Survey
     * const Survey = await prisma.survey.create({
     *   data: {
     *     // ... data to create a Survey
     *   }
     * })
     * 
     */
    create<T extends SurveyCreateArgs>(args: SelectSubset<T, SurveyCreateArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Surveys.
     * @param {SurveyCreateManyArgs} args - Arguments to create many Surveys.
     * @example
     * // Create many Surveys
     * const survey = await prisma.survey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurveyCreateManyArgs>(args?: SelectSubset<T, SurveyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Surveys and returns the data saved in the database.
     * @param {SurveyCreateManyAndReturnArgs} args - Arguments to create many Surveys.
     * @example
     * // Create many Surveys
     * const survey = await prisma.survey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Surveys and only return the `id`
     * const surveyWithIdOnly = await prisma.survey.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SurveyCreateManyAndReturnArgs>(args?: SelectSubset<T, SurveyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Survey.
     * @param {SurveyDeleteArgs} args - Arguments to delete one Survey.
     * @example
     * // Delete one Survey
     * const Survey = await prisma.survey.delete({
     *   where: {
     *     // ... filter to delete one Survey
     *   }
     * })
     * 
     */
    delete<T extends SurveyDeleteArgs>(args: SelectSubset<T, SurveyDeleteArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Survey.
     * @param {SurveyUpdateArgs} args - Arguments to update one Survey.
     * @example
     * // Update one Survey
     * const survey = await prisma.survey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurveyUpdateArgs>(args: SelectSubset<T, SurveyUpdateArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Surveys.
     * @param {SurveyDeleteManyArgs} args - Arguments to filter Surveys to delete.
     * @example
     * // Delete a few Surveys
     * const { count } = await prisma.survey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurveyDeleteManyArgs>(args?: SelectSubset<T, SurveyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Surveys
     * const survey = await prisma.survey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurveyUpdateManyArgs>(args: SelectSubset<T, SurveyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Surveys and returns the data updated in the database.
     * @param {SurveyUpdateManyAndReturnArgs} args - Arguments to update many Surveys.
     * @example
     * // Update many Surveys
     * const survey = await prisma.survey.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Surveys and only return the `id`
     * const surveyWithIdOnly = await prisma.survey.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SurveyUpdateManyAndReturnArgs>(args: SelectSubset<T, SurveyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Survey.
     * @param {SurveyUpsertArgs} args - Arguments to update or create a Survey.
     * @example
     * // Update or create a Survey
     * const survey = await prisma.survey.upsert({
     *   create: {
     *     // ... data to create a Survey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Survey we want to update
     *   }
     * })
     */
    upsert<T extends SurveyUpsertArgs>(args: SelectSubset<T, SurveyUpsertArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Surveys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyCountArgs} args - Arguments to filter Surveys to count.
     * @example
     * // Count the number of Surveys
     * const count = await prisma.survey.count({
     *   where: {
     *     // ... the filter for the Surveys we want to count
     *   }
     * })
    **/
    count<T extends SurveyCountArgs>(
      args?: Subset<T, SurveyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Survey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveyAggregateArgs>(args: Subset<T, SurveyAggregateArgs>): Prisma.PrismaPromise<GetSurveyAggregateType<T>>

    /**
     * Group by Survey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveyGroupByArgs['orderBy'] }
        : { orderBy?: SurveyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Survey model
   */
  readonly fields: SurveyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Survey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurveyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questions<T extends Survey$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Survey$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    responses<T extends Survey$responsesArgs<ExtArgs> = {}>(args?: Subset<T, Survey$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    style<T extends Survey$styleArgs<ExtArgs> = {}>(args?: Subset<T, Survey$styleArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    type<T extends Survey$typeArgs<ExtArgs> = {}>(args?: Subset<T, Survey$typeArgs<ExtArgs>>): Prisma__SurveyTypeClient<$Result.GetResult<Prisma.$SurveyTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    SurveyResponseSummary<T extends Survey$SurveyResponseSummaryArgs<ExtArgs> = {}>(args?: Subset<T, Survey$SurveyResponseSummaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Survey model
   */
  interface SurveyFieldRefs {
    readonly id: FieldRef<"Survey", 'String'>
    readonly name: FieldRef<"Survey", 'String'>
    readonly description: FieldRef<"Survey", 'String'>
    readonly status: FieldRef<"Survey", 'SurveyStatus'>
    readonly allowMultipleResponses: FieldRef<"Survey", 'Boolean'>
    readonly createdAt: FieldRef<"Survey", 'DateTime'>
    readonly updatedAt: FieldRef<"Survey", 'DateTime'>
    readonly teamId: FieldRef<"Survey", 'Int'>
    readonly typeId: FieldRef<"Survey", 'String'>
    readonly ResponseRate: FieldRef<"Survey", 'Int'>
    readonly totalOpenSurveys: FieldRef<"Survey", 'Int'>
    readonly totalResponses: FieldRef<"Survey", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Survey findUnique
   */
  export type SurveyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey findUniqueOrThrow
   */
  export type SurveyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey findFirst
   */
  export type SurveyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surveys.
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surveys.
     */
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Survey findFirstOrThrow
   */
  export type SurveyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Survey to fetch.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Surveys.
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Surveys.
     */
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Survey findMany
   */
  export type SurveyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter, which Surveys to fetch.
     */
    where?: SurveyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Surveys to fetch.
     */
    orderBy?: SurveyOrderByWithRelationInput | SurveyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Surveys.
     */
    cursor?: SurveyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Surveys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Surveys.
     */
    skip?: number
    distinct?: SurveyScalarFieldEnum | SurveyScalarFieldEnum[]
  }

  /**
   * Survey create
   */
  export type SurveyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * The data needed to create a Survey.
     */
    data: XOR<SurveyCreateInput, SurveyUncheckedCreateInput>
  }

  /**
   * Survey createMany
   */
  export type SurveyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Surveys.
     */
    data: SurveyCreateManyInput | SurveyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Survey createManyAndReturn
   */
  export type SurveyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * The data used to create many Surveys.
     */
    data: SurveyCreateManyInput | SurveyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Survey update
   */
  export type SurveyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * The data needed to update a Survey.
     */
    data: XOR<SurveyUpdateInput, SurveyUncheckedUpdateInput>
    /**
     * Choose, which Survey to update.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey updateMany
   */
  export type SurveyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Surveys.
     */
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyInput>
    /**
     * Filter which Surveys to update
     */
    where?: SurveyWhereInput
    /**
     * Limit how many Surveys to update.
     */
    limit?: number
  }

  /**
   * Survey updateManyAndReturn
   */
  export type SurveyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * The data used to update Surveys.
     */
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyInput>
    /**
     * Filter which Surveys to update
     */
    where?: SurveyWhereInput
    /**
     * Limit how many Surveys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Survey upsert
   */
  export type SurveyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * The filter to search for the Survey to update in case it exists.
     */
    where: SurveyWhereUniqueInput
    /**
     * In case the Survey found by the `where` argument doesn't exist, create a new Survey with this data.
     */
    create: XOR<SurveyCreateInput, SurveyUncheckedCreateInput>
    /**
     * In case the Survey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveyUpdateInput, SurveyUncheckedUpdateInput>
  }

  /**
   * Survey delete
   */
  export type SurveyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
    /**
     * Filter which Survey to delete.
     */
    where: SurveyWhereUniqueInput
  }

  /**
   * Survey deleteMany
   */
  export type SurveyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Surveys to delete
     */
    where?: SurveyWhereInput
    /**
     * Limit how many Surveys to delete.
     */
    limit?: number
  }

  /**
   * Survey.questions
   */
  export type Survey$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Survey.responses
   */
  export type Survey$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    where?: SurveyResponseWhereInput
    orderBy?: SurveyResponseOrderByWithRelationInput | SurveyResponseOrderByWithRelationInput[]
    cursor?: SurveyResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseScalarFieldEnum | SurveyResponseScalarFieldEnum[]
  }

  /**
   * Survey.style
   */
  export type Survey$styleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    where?: SurveyStyleWhereInput
  }

  /**
   * Survey.type
   */
  export type Survey$typeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyType
     */
    select?: SurveyTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyType
     */
    omit?: SurveyTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyTypeInclude<ExtArgs> | null
    where?: SurveyTypeWhereInput
  }

  /**
   * Survey.SurveyResponseSummary
   */
  export type Survey$SurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    where?: SurveyResponseSummaryWhereInput
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    cursor?: SurveyResponseSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * Survey without action
   */
  export type SurveyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Survey
     */
    select?: SurveySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Survey
     */
    omit?: SurveyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyInclude<ExtArgs> | null
  }


  /**
   * Model SurveyStyle
   */

  export type AggregateSurveyStyle = {
    _count: SurveyStyleCountAggregateOutputType | null
    _avg: SurveyStyleAvgAggregateOutputType | null
    _sum: SurveyStyleSumAggregateOutputType | null
    _min: SurveyStyleMinAggregateOutputType | null
    _max: SurveyStyleMaxAggregateOutputType | null
  }

  export type SurveyStyleAvgAggregateOutputType = {
    teamId: number | null
  }

  export type SurveyStyleSumAggregateOutputType = {
    teamId: number | null
  }

  export type SurveyStyleMinAggregateOutputType = {
    id: string | null
    backgroundColor: string | null
    textColor: string | null
    buttonBackgroundColor: string | null
    buttonTextColor: string | null
    margin: string | null
    padding: string | null
    borderRadius: string | null
    titleFontSize: string | null
    bodyFontSize: string | null
    fontFamily: string | null
    basicCSS: string | null
    styleMode: $Enums.StyleMode | null
    advancedCSS: string | null
    createdAt: Date | null
    updatedAt: Date | null
    surveyId: string | null
    teamId: number | null
    border: string | null
  }

  export type SurveyStyleMaxAggregateOutputType = {
    id: string | null
    backgroundColor: string | null
    textColor: string | null
    buttonBackgroundColor: string | null
    buttonTextColor: string | null
    margin: string | null
    padding: string | null
    borderRadius: string | null
    titleFontSize: string | null
    bodyFontSize: string | null
    fontFamily: string | null
    basicCSS: string | null
    styleMode: $Enums.StyleMode | null
    advancedCSS: string | null
    createdAt: Date | null
    updatedAt: Date | null
    surveyId: string | null
    teamId: number | null
    border: string | null
  }

  export type SurveyStyleCountAggregateOutputType = {
    id: number
    backgroundColor: number
    textColor: number
    buttonBackgroundColor: number
    buttonTextColor: number
    margin: number
    padding: number
    borderRadius: number
    titleFontSize: number
    bodyFontSize: number
    fontFamily: number
    basicCSS: number
    styleMode: number
    advancedCSS: number
    createdAt: number
    updatedAt: number
    surveyId: number
    teamId: number
    border: number
    _all: number
  }


  export type SurveyStyleAvgAggregateInputType = {
    teamId?: true
  }

  export type SurveyStyleSumAggregateInputType = {
    teamId?: true
  }

  export type SurveyStyleMinAggregateInputType = {
    id?: true
    backgroundColor?: true
    textColor?: true
    buttonBackgroundColor?: true
    buttonTextColor?: true
    margin?: true
    padding?: true
    borderRadius?: true
    titleFontSize?: true
    bodyFontSize?: true
    fontFamily?: true
    basicCSS?: true
    styleMode?: true
    advancedCSS?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    border?: true
  }

  export type SurveyStyleMaxAggregateInputType = {
    id?: true
    backgroundColor?: true
    textColor?: true
    buttonBackgroundColor?: true
    buttonTextColor?: true
    margin?: true
    padding?: true
    borderRadius?: true
    titleFontSize?: true
    bodyFontSize?: true
    fontFamily?: true
    basicCSS?: true
    styleMode?: true
    advancedCSS?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    border?: true
  }

  export type SurveyStyleCountAggregateInputType = {
    id?: true
    backgroundColor?: true
    textColor?: true
    buttonBackgroundColor?: true
    buttonTextColor?: true
    margin?: true
    padding?: true
    borderRadius?: true
    titleFontSize?: true
    bodyFontSize?: true
    fontFamily?: true
    basicCSS?: true
    styleMode?: true
    advancedCSS?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    border?: true
    _all?: true
  }

  export type SurveyStyleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyStyle to aggregate.
     */
    where?: SurveyStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyStyles to fetch.
     */
    orderBy?: SurveyStyleOrderByWithRelationInput | SurveyStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveyStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyStyles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SurveyStyles
    **/
    _count?: true | SurveyStyleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveyStyleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveyStyleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveyStyleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveyStyleMaxAggregateInputType
  }

  export type GetSurveyStyleAggregateType<T extends SurveyStyleAggregateArgs> = {
        [P in keyof T & keyof AggregateSurveyStyle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurveyStyle[P]>
      : GetScalarType<T[P], AggregateSurveyStyle[P]>
  }




  export type SurveyStyleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyStyleWhereInput
    orderBy?: SurveyStyleOrderByWithAggregationInput | SurveyStyleOrderByWithAggregationInput[]
    by: SurveyStyleScalarFieldEnum[] | SurveyStyleScalarFieldEnum
    having?: SurveyStyleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveyStyleCountAggregateInputType | true
    _avg?: SurveyStyleAvgAggregateInputType
    _sum?: SurveyStyleSumAggregateInputType
    _min?: SurveyStyleMinAggregateInputType
    _max?: SurveyStyleMaxAggregateInputType
  }

  export type SurveyStyleGroupByOutputType = {
    id: string
    backgroundColor: string
    textColor: string
    buttonBackgroundColor: string
    buttonTextColor: string
    margin: string
    padding: string
    borderRadius: string
    titleFontSize: string
    bodyFontSize: string
    fontFamily: string
    basicCSS: string
    styleMode: $Enums.StyleMode
    advancedCSS: string | null
    createdAt: Date
    updatedAt: Date
    surveyId: string
    teamId: number
    border: string
    _count: SurveyStyleCountAggregateOutputType | null
    _avg: SurveyStyleAvgAggregateOutputType | null
    _sum: SurveyStyleSumAggregateOutputType | null
    _min: SurveyStyleMinAggregateOutputType | null
    _max: SurveyStyleMaxAggregateOutputType | null
  }

  type GetSurveyStyleGroupByPayload<T extends SurveyStyleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurveyStyleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveyStyleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveyStyleGroupByOutputType[P]>
            : GetScalarType<T[P], SurveyStyleGroupByOutputType[P]>
        }
      >
    >


  export type SurveyStyleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    backgroundColor?: boolean
    textColor?: boolean
    buttonBackgroundColor?: boolean
    buttonTextColor?: boolean
    margin?: boolean
    padding?: boolean
    borderRadius?: boolean
    titleFontSize?: boolean
    bodyFontSize?: boolean
    fontFamily?: boolean
    basicCSS?: boolean
    styleMode?: boolean
    advancedCSS?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    border?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyStyle"]>

  export type SurveyStyleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    backgroundColor?: boolean
    textColor?: boolean
    buttonBackgroundColor?: boolean
    buttonTextColor?: boolean
    margin?: boolean
    padding?: boolean
    borderRadius?: boolean
    titleFontSize?: boolean
    bodyFontSize?: boolean
    fontFamily?: boolean
    basicCSS?: boolean
    styleMode?: boolean
    advancedCSS?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    border?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyStyle"]>

  export type SurveyStyleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    backgroundColor?: boolean
    textColor?: boolean
    buttonBackgroundColor?: boolean
    buttonTextColor?: boolean
    margin?: boolean
    padding?: boolean
    borderRadius?: boolean
    titleFontSize?: boolean
    bodyFontSize?: boolean
    fontFamily?: boolean
    basicCSS?: boolean
    styleMode?: boolean
    advancedCSS?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    border?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyStyle"]>

  export type SurveyStyleSelectScalar = {
    id?: boolean
    backgroundColor?: boolean
    textColor?: boolean
    buttonBackgroundColor?: boolean
    buttonTextColor?: boolean
    margin?: boolean
    padding?: boolean
    borderRadius?: boolean
    titleFontSize?: boolean
    bodyFontSize?: boolean
    fontFamily?: boolean
    basicCSS?: boolean
    styleMode?: boolean
    advancedCSS?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    border?: boolean
  }

  export type SurveyStyleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "backgroundColor" | "textColor" | "buttonBackgroundColor" | "buttonTextColor" | "margin" | "padding" | "borderRadius" | "titleFontSize" | "bodyFontSize" | "fontFamily" | "basicCSS" | "styleMode" | "advancedCSS" | "createdAt" | "updatedAt" | "surveyId" | "teamId" | "border", ExtArgs["result"]["surveyStyle"]>
  export type SurveyStyleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type SurveyStyleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type SurveyStyleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $SurveyStylePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SurveyStyle"
    objects: {
      survey: Prisma.$SurveyPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      backgroundColor: string
      textColor: string
      buttonBackgroundColor: string
      buttonTextColor: string
      margin: string
      padding: string
      borderRadius: string
      titleFontSize: string
      bodyFontSize: string
      fontFamily: string
      basicCSS: string
      styleMode: $Enums.StyleMode
      advancedCSS: string | null
      createdAt: Date
      updatedAt: Date
      surveyId: string
      teamId: number
      border: string
    }, ExtArgs["result"]["surveyStyle"]>
    composites: {}
  }

  type SurveyStyleGetPayload<S extends boolean | null | undefined | SurveyStyleDefaultArgs> = $Result.GetResult<Prisma.$SurveyStylePayload, S>

  type SurveyStyleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SurveyStyleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SurveyStyleCountAggregateInputType | true
    }

  export interface SurveyStyleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SurveyStyle'], meta: { name: 'SurveyStyle' } }
    /**
     * Find zero or one SurveyStyle that matches the filter.
     * @param {SurveyStyleFindUniqueArgs} args - Arguments to find a SurveyStyle
     * @example
     * // Get one SurveyStyle
     * const surveyStyle = await prisma.surveyStyle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurveyStyleFindUniqueArgs>(args: SelectSubset<T, SurveyStyleFindUniqueArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SurveyStyle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SurveyStyleFindUniqueOrThrowArgs} args - Arguments to find a SurveyStyle
     * @example
     * // Get one SurveyStyle
     * const surveyStyle = await prisma.surveyStyle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurveyStyleFindUniqueOrThrowArgs>(args: SelectSubset<T, SurveyStyleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyStyle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleFindFirstArgs} args - Arguments to find a SurveyStyle
     * @example
     * // Get one SurveyStyle
     * const surveyStyle = await prisma.surveyStyle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurveyStyleFindFirstArgs>(args?: SelectSubset<T, SurveyStyleFindFirstArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyStyle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleFindFirstOrThrowArgs} args - Arguments to find a SurveyStyle
     * @example
     * // Get one SurveyStyle
     * const surveyStyle = await prisma.surveyStyle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurveyStyleFindFirstOrThrowArgs>(args?: SelectSubset<T, SurveyStyleFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SurveyStyles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SurveyStyles
     * const surveyStyles = await prisma.surveyStyle.findMany()
     * 
     * // Get first 10 SurveyStyles
     * const surveyStyles = await prisma.surveyStyle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveyStyleWithIdOnly = await prisma.surveyStyle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurveyStyleFindManyArgs>(args?: SelectSubset<T, SurveyStyleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SurveyStyle.
     * @param {SurveyStyleCreateArgs} args - Arguments to create a SurveyStyle.
     * @example
     * // Create one SurveyStyle
     * const SurveyStyle = await prisma.surveyStyle.create({
     *   data: {
     *     // ... data to create a SurveyStyle
     *   }
     * })
     * 
     */
    create<T extends SurveyStyleCreateArgs>(args: SelectSubset<T, SurveyStyleCreateArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SurveyStyles.
     * @param {SurveyStyleCreateManyArgs} args - Arguments to create many SurveyStyles.
     * @example
     * // Create many SurveyStyles
     * const surveyStyle = await prisma.surveyStyle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurveyStyleCreateManyArgs>(args?: SelectSubset<T, SurveyStyleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SurveyStyles and returns the data saved in the database.
     * @param {SurveyStyleCreateManyAndReturnArgs} args - Arguments to create many SurveyStyles.
     * @example
     * // Create many SurveyStyles
     * const surveyStyle = await prisma.surveyStyle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SurveyStyles and only return the `id`
     * const surveyStyleWithIdOnly = await prisma.surveyStyle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SurveyStyleCreateManyAndReturnArgs>(args?: SelectSubset<T, SurveyStyleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SurveyStyle.
     * @param {SurveyStyleDeleteArgs} args - Arguments to delete one SurveyStyle.
     * @example
     * // Delete one SurveyStyle
     * const SurveyStyle = await prisma.surveyStyle.delete({
     *   where: {
     *     // ... filter to delete one SurveyStyle
     *   }
     * })
     * 
     */
    delete<T extends SurveyStyleDeleteArgs>(args: SelectSubset<T, SurveyStyleDeleteArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SurveyStyle.
     * @param {SurveyStyleUpdateArgs} args - Arguments to update one SurveyStyle.
     * @example
     * // Update one SurveyStyle
     * const surveyStyle = await prisma.surveyStyle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurveyStyleUpdateArgs>(args: SelectSubset<T, SurveyStyleUpdateArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SurveyStyles.
     * @param {SurveyStyleDeleteManyArgs} args - Arguments to filter SurveyStyles to delete.
     * @example
     * // Delete a few SurveyStyles
     * const { count } = await prisma.surveyStyle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurveyStyleDeleteManyArgs>(args?: SelectSubset<T, SurveyStyleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyStyles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SurveyStyles
     * const surveyStyle = await prisma.surveyStyle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurveyStyleUpdateManyArgs>(args: SelectSubset<T, SurveyStyleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyStyles and returns the data updated in the database.
     * @param {SurveyStyleUpdateManyAndReturnArgs} args - Arguments to update many SurveyStyles.
     * @example
     * // Update many SurveyStyles
     * const surveyStyle = await prisma.surveyStyle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SurveyStyles and only return the `id`
     * const surveyStyleWithIdOnly = await prisma.surveyStyle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SurveyStyleUpdateManyAndReturnArgs>(args: SelectSubset<T, SurveyStyleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SurveyStyle.
     * @param {SurveyStyleUpsertArgs} args - Arguments to update or create a SurveyStyle.
     * @example
     * // Update or create a SurveyStyle
     * const surveyStyle = await prisma.surveyStyle.upsert({
     *   create: {
     *     // ... data to create a SurveyStyle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SurveyStyle we want to update
     *   }
     * })
     */
    upsert<T extends SurveyStyleUpsertArgs>(args: SelectSubset<T, SurveyStyleUpsertArgs<ExtArgs>>): Prisma__SurveyStyleClient<$Result.GetResult<Prisma.$SurveyStylePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SurveyStyles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleCountArgs} args - Arguments to filter SurveyStyles to count.
     * @example
     * // Count the number of SurveyStyles
     * const count = await prisma.surveyStyle.count({
     *   where: {
     *     // ... the filter for the SurveyStyles we want to count
     *   }
     * })
    **/
    count<T extends SurveyStyleCountArgs>(
      args?: Subset<T, SurveyStyleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveyStyleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SurveyStyle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveyStyleAggregateArgs>(args: Subset<T, SurveyStyleAggregateArgs>): Prisma.PrismaPromise<GetSurveyStyleAggregateType<T>>

    /**
     * Group by SurveyStyle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyStyleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveyStyleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveyStyleGroupByArgs['orderBy'] }
        : { orderBy?: SurveyStyleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveyStyleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveyStyleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SurveyStyle model
   */
  readonly fields: SurveyStyleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SurveyStyle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurveyStyleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survey<T extends SurveyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurveyDefaultArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SurveyStyle model
   */
  interface SurveyStyleFieldRefs {
    readonly id: FieldRef<"SurveyStyle", 'String'>
    readonly backgroundColor: FieldRef<"SurveyStyle", 'String'>
    readonly textColor: FieldRef<"SurveyStyle", 'String'>
    readonly buttonBackgroundColor: FieldRef<"SurveyStyle", 'String'>
    readonly buttonTextColor: FieldRef<"SurveyStyle", 'String'>
    readonly margin: FieldRef<"SurveyStyle", 'String'>
    readonly padding: FieldRef<"SurveyStyle", 'String'>
    readonly borderRadius: FieldRef<"SurveyStyle", 'String'>
    readonly titleFontSize: FieldRef<"SurveyStyle", 'String'>
    readonly bodyFontSize: FieldRef<"SurveyStyle", 'String'>
    readonly fontFamily: FieldRef<"SurveyStyle", 'String'>
    readonly basicCSS: FieldRef<"SurveyStyle", 'String'>
    readonly styleMode: FieldRef<"SurveyStyle", 'StyleMode'>
    readonly advancedCSS: FieldRef<"SurveyStyle", 'String'>
    readonly createdAt: FieldRef<"SurveyStyle", 'DateTime'>
    readonly updatedAt: FieldRef<"SurveyStyle", 'DateTime'>
    readonly surveyId: FieldRef<"SurveyStyle", 'String'>
    readonly teamId: FieldRef<"SurveyStyle", 'Int'>
    readonly border: FieldRef<"SurveyStyle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SurveyStyle findUnique
   */
  export type SurveyStyleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * Filter, which SurveyStyle to fetch.
     */
    where: SurveyStyleWhereUniqueInput
  }

  /**
   * SurveyStyle findUniqueOrThrow
   */
  export type SurveyStyleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * Filter, which SurveyStyle to fetch.
     */
    where: SurveyStyleWhereUniqueInput
  }

  /**
   * SurveyStyle findFirst
   */
  export type SurveyStyleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * Filter, which SurveyStyle to fetch.
     */
    where?: SurveyStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyStyles to fetch.
     */
    orderBy?: SurveyStyleOrderByWithRelationInput | SurveyStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyStyles.
     */
    cursor?: SurveyStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyStyles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyStyles.
     */
    distinct?: SurveyStyleScalarFieldEnum | SurveyStyleScalarFieldEnum[]
  }

  /**
   * SurveyStyle findFirstOrThrow
   */
  export type SurveyStyleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * Filter, which SurveyStyle to fetch.
     */
    where?: SurveyStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyStyles to fetch.
     */
    orderBy?: SurveyStyleOrderByWithRelationInput | SurveyStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyStyles.
     */
    cursor?: SurveyStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyStyles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyStyles.
     */
    distinct?: SurveyStyleScalarFieldEnum | SurveyStyleScalarFieldEnum[]
  }

  /**
   * SurveyStyle findMany
   */
  export type SurveyStyleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * Filter, which SurveyStyles to fetch.
     */
    where?: SurveyStyleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyStyles to fetch.
     */
    orderBy?: SurveyStyleOrderByWithRelationInput | SurveyStyleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SurveyStyles.
     */
    cursor?: SurveyStyleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyStyles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyStyles.
     */
    skip?: number
    distinct?: SurveyStyleScalarFieldEnum | SurveyStyleScalarFieldEnum[]
  }

  /**
   * SurveyStyle create
   */
  export type SurveyStyleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * The data needed to create a SurveyStyle.
     */
    data: XOR<SurveyStyleCreateInput, SurveyStyleUncheckedCreateInput>
  }

  /**
   * SurveyStyle createMany
   */
  export type SurveyStyleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SurveyStyles.
     */
    data: SurveyStyleCreateManyInput | SurveyStyleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SurveyStyle createManyAndReturn
   */
  export type SurveyStyleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * The data used to create many SurveyStyles.
     */
    data: SurveyStyleCreateManyInput | SurveyStyleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyStyle update
   */
  export type SurveyStyleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * The data needed to update a SurveyStyle.
     */
    data: XOR<SurveyStyleUpdateInput, SurveyStyleUncheckedUpdateInput>
    /**
     * Choose, which SurveyStyle to update.
     */
    where: SurveyStyleWhereUniqueInput
  }

  /**
   * SurveyStyle updateMany
   */
  export type SurveyStyleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SurveyStyles.
     */
    data: XOR<SurveyStyleUpdateManyMutationInput, SurveyStyleUncheckedUpdateManyInput>
    /**
     * Filter which SurveyStyles to update
     */
    where?: SurveyStyleWhereInput
    /**
     * Limit how many SurveyStyles to update.
     */
    limit?: number
  }

  /**
   * SurveyStyle updateManyAndReturn
   */
  export type SurveyStyleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * The data used to update SurveyStyles.
     */
    data: XOR<SurveyStyleUpdateManyMutationInput, SurveyStyleUncheckedUpdateManyInput>
    /**
     * Filter which SurveyStyles to update
     */
    where?: SurveyStyleWhereInput
    /**
     * Limit how many SurveyStyles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyStyle upsert
   */
  export type SurveyStyleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * The filter to search for the SurveyStyle to update in case it exists.
     */
    where: SurveyStyleWhereUniqueInput
    /**
     * In case the SurveyStyle found by the `where` argument doesn't exist, create a new SurveyStyle with this data.
     */
    create: XOR<SurveyStyleCreateInput, SurveyStyleUncheckedCreateInput>
    /**
     * In case the SurveyStyle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveyStyleUpdateInput, SurveyStyleUncheckedUpdateInput>
  }

  /**
   * SurveyStyle delete
   */
  export type SurveyStyleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
    /**
     * Filter which SurveyStyle to delete.
     */
    where: SurveyStyleWhereUniqueInput
  }

  /**
   * SurveyStyle deleteMany
   */
  export type SurveyStyleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyStyles to delete
     */
    where?: SurveyStyleWhereInput
    /**
     * Limit how many SurveyStyles to delete.
     */
    limit?: number
  }

  /**
   * SurveyStyle without action
   */
  export type SurveyStyleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyStyle
     */
    select?: SurveyStyleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyStyle
     */
    omit?: SurveyStyleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyStyleInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    order: number | null
    teamId: number | null
  }

  export type QuestionSumAggregateOutputType = {
    order: number | null
    teamId: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    format: $Enums.QuestionFormat | null
    required: boolean | null
    order: number | null
    yesLabel: string | null
    noLabel: string | null
    buttonLabel: string | null
    createdAt: Date | null
    updatedAt: Date | null
    surveyId: string | null
    teamId: number | null
    addOther: boolean | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    format: $Enums.QuestionFormat | null
    required: boolean | null
    order: number | null
    yesLabel: string | null
    noLabel: string | null
    buttonLabel: string | null
    createdAt: Date | null
    updatedAt: Date | null
    surveyId: string | null
    teamId: number | null
    addOther: boolean | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    title: number
    description: number
    format: number
    required: number
    order: number
    yesLabel: number
    noLabel: number
    buttonLabel: number
    createdAt: number
    updatedAt: number
    surveyId: number
    teamId: number
    addOther: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    order?: true
    teamId?: true
  }

  export type QuestionSumAggregateInputType = {
    order?: true
    teamId?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    format?: true
    required?: true
    order?: true
    yesLabel?: true
    noLabel?: true
    buttonLabel?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    addOther?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    format?: true
    required?: true
    order?: true
    yesLabel?: true
    noLabel?: true
    buttonLabel?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    addOther?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    format?: true
    required?: true
    order?: true
    yesLabel?: true
    noLabel?: true
    buttonLabel?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    addOther?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    title: string
    description: string | null
    format: $Enums.QuestionFormat
    required: boolean
    order: number
    yesLabel: string | null
    noLabel: string | null
    buttonLabel: string | null
    createdAt: Date
    updatedAt: Date
    surveyId: string
    teamId: number
    addOther: boolean
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    format?: boolean
    required?: boolean
    order?: boolean
    yesLabel?: boolean
    noLabel?: boolean
    buttonLabel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    addOther?: boolean
    options?: boolean | Question$optionsArgs<ExtArgs>
    responses?: boolean | Question$responsesArgs<ExtArgs>
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    SurveyResponseSummary?: boolean | Question$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    format?: boolean
    required?: boolean
    order?: boolean
    yesLabel?: boolean
    noLabel?: boolean
    buttonLabel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    addOther?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    format?: boolean
    required?: boolean
    order?: boolean
    yesLabel?: boolean
    noLabel?: boolean
    buttonLabel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    addOther?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    format?: boolean
    required?: boolean
    order?: boolean
    yesLabel?: boolean
    noLabel?: boolean
    buttonLabel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    addOther?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "format" | "required" | "order" | "yesLabel" | "noLabel" | "buttonLabel" | "createdAt" | "updatedAt" | "surveyId" | "teamId" | "addOther", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | Question$optionsArgs<ExtArgs>
    responses?: boolean | Question$responsesArgs<ExtArgs>
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    SurveyResponseSummary?: boolean | Question$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      options: Prisma.$QuestionOptionPayload<ExtArgs>[]
      responses: Prisma.$QuestionResponsePayload<ExtArgs>[]
      survey: Prisma.$SurveyPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
      SurveyResponseSummary: Prisma.$SurveyResponseSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      format: $Enums.QuestionFormat
      required: boolean
      order: number
      yesLabel: string | null
      noLabel: string | null
      buttonLabel: string | null
      createdAt: Date
      updatedAt: Date
      surveyId: string
      teamId: number
      addOther: boolean
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    options<T extends Question$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Question$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    responses<T extends Question$responsesArgs<ExtArgs> = {}>(args?: Subset<T, Question$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    survey<T extends SurveyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurveyDefaultArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    SurveyResponseSummary<T extends Question$SurveyResponseSummaryArgs<ExtArgs> = {}>(args?: Subset<T, Question$SurveyResponseSummaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly title: FieldRef<"Question", 'String'>
    readonly description: FieldRef<"Question", 'String'>
    readonly format: FieldRef<"Question", 'QuestionFormat'>
    readonly required: FieldRef<"Question", 'Boolean'>
    readonly order: FieldRef<"Question", 'Int'>
    readonly yesLabel: FieldRef<"Question", 'String'>
    readonly noLabel: FieldRef<"Question", 'String'>
    readonly buttonLabel: FieldRef<"Question", 'String'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
    readonly surveyId: FieldRef<"Question", 'String'>
    readonly teamId: FieldRef<"Question", 'Int'>
    readonly addOther: FieldRef<"Question", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.options
   */
  export type Question$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    cursor?: QuestionOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * Question.responses
   */
  export type Question$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    where?: QuestionResponseWhereInput
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    cursor?: QuestionResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * Question.SurveyResponseSummary
   */
  export type Question$SurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    where?: SurveyResponseSummaryWhereInput
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    cursor?: SurveyResponseSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionOption
   */

  export type AggregateQuestionOption = {
    _count: QuestionOptionCountAggregateOutputType | null
    _avg: QuestionOptionAvgAggregateOutputType | null
    _sum: QuestionOptionSumAggregateOutputType | null
    _min: QuestionOptionMinAggregateOutputType | null
    _max: QuestionOptionMaxAggregateOutputType | null
  }

  export type QuestionOptionAvgAggregateOutputType = {
    order: number | null
    teamId: number | null
  }

  export type QuestionOptionSumAggregateOutputType = {
    order: number | null
    teamId: number | null
  }

  export type QuestionOptionMinAggregateOutputType = {
    id: string | null
    text: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
    questionId: string | null
    teamId: number | null
    isOther: boolean | null
  }

  export type QuestionOptionMaxAggregateOutputType = {
    id: string | null
    text: string | null
    order: number | null
    createdAt: Date | null
    updatedAt: Date | null
    questionId: string | null
    teamId: number | null
    isOther: boolean | null
  }

  export type QuestionOptionCountAggregateOutputType = {
    id: number
    text: number
    order: number
    createdAt: number
    updatedAt: number
    questionId: number
    teamId: number
    isOther: number
    _all: number
  }


  export type QuestionOptionAvgAggregateInputType = {
    order?: true
    teamId?: true
  }

  export type QuestionOptionSumAggregateInputType = {
    order?: true
    teamId?: true
  }

  export type QuestionOptionMinAggregateInputType = {
    id?: true
    text?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    questionId?: true
    teamId?: true
    isOther?: true
  }

  export type QuestionOptionMaxAggregateInputType = {
    id?: true
    text?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    questionId?: true
    teamId?: true
    isOther?: true
  }

  export type QuestionOptionCountAggregateInputType = {
    id?: true
    text?: true
    order?: true
    createdAt?: true
    updatedAt?: true
    questionId?: true
    teamId?: true
    isOther?: true
    _all?: true
  }

  export type QuestionOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOption to aggregate.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionOptions
    **/
    _count?: true | QuestionOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionOptionMaxAggregateInputType
  }

  export type GetQuestionOptionAggregateType<T extends QuestionOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionOption[P]>
      : GetScalarType<T[P], AggregateQuestionOption[P]>
  }




  export type QuestionOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithAggregationInput | QuestionOptionOrderByWithAggregationInput[]
    by: QuestionOptionScalarFieldEnum[] | QuestionOptionScalarFieldEnum
    having?: QuestionOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionOptionCountAggregateInputType | true
    _avg?: QuestionOptionAvgAggregateInputType
    _sum?: QuestionOptionSumAggregateInputType
    _min?: QuestionOptionMinAggregateInputType
    _max?: QuestionOptionMaxAggregateInputType
  }

  export type QuestionOptionGroupByOutputType = {
    id: string
    text: string
    order: number
    createdAt: Date
    updatedAt: Date
    questionId: string
    teamId: number
    isOther: boolean
    _count: QuestionOptionCountAggregateOutputType | null
    _avg: QuestionOptionAvgAggregateOutputType | null
    _sum: QuestionOptionSumAggregateOutputType | null
    _min: QuestionOptionMinAggregateOutputType | null
    _max: QuestionOptionMaxAggregateOutputType | null
  }

  type GetQuestionOptionGroupByPayload<T extends QuestionOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionOptionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionOptionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    teamId?: boolean
    isOther?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    responses?: boolean | QuestionOption$responsesArgs<ExtArgs>
    SurveyResponseSummary?: boolean | QuestionOption$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | QuestionOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    teamId?: boolean
    isOther?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    teamId?: boolean
    isOther?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectScalar = {
    id?: boolean
    text?: boolean
    order?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    teamId?: boolean
    isOther?: boolean
  }

  export type QuestionOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "order" | "createdAt" | "updatedAt" | "questionId" | "teamId" | "isOther", ExtArgs["result"]["questionOption"]>
  export type QuestionOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    responses?: boolean | QuestionOption$responsesArgs<ExtArgs>
    SurveyResponseSummary?: boolean | QuestionOption$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | QuestionOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type QuestionOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $QuestionOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionOption"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
      responses: Prisma.$QuestionResponsePayload<ExtArgs>[]
      SurveyResponseSummary: Prisma.$SurveyResponseSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      order: number
      createdAt: Date
      updatedAt: Date
      questionId: string
      teamId: number
      isOther: boolean
    }, ExtArgs["result"]["questionOption"]>
    composites: {}
  }

  type QuestionOptionGetPayload<S extends boolean | null | undefined | QuestionOptionDefaultArgs> = $Result.GetResult<Prisma.$QuestionOptionPayload, S>

  type QuestionOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionOptionCountAggregateInputType | true
    }

  export interface QuestionOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionOption'], meta: { name: 'QuestionOption' } }
    /**
     * Find zero or one QuestionOption that matches the filter.
     * @param {QuestionOptionFindUniqueArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionOptionFindUniqueArgs>(args: SelectSubset<T, QuestionOptionFindUniqueArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionOptionFindUniqueOrThrowArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindFirstArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionOptionFindFirstArgs>(args?: SelectSubset<T, QuestionOptionFindFirstArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindFirstOrThrowArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionOptions
     * const questionOptions = await prisma.questionOption.findMany()
     * 
     * // Get first 10 QuestionOptions
     * const questionOptions = await prisma.questionOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionOptionFindManyArgs>(args?: SelectSubset<T, QuestionOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionOption.
     * @param {QuestionOptionCreateArgs} args - Arguments to create a QuestionOption.
     * @example
     * // Create one QuestionOption
     * const QuestionOption = await prisma.questionOption.create({
     *   data: {
     *     // ... data to create a QuestionOption
     *   }
     * })
     * 
     */
    create<T extends QuestionOptionCreateArgs>(args: SelectSubset<T, QuestionOptionCreateArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionOptions.
     * @param {QuestionOptionCreateManyArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOption = await prisma.questionOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionOptionCreateManyArgs>(args?: SelectSubset<T, QuestionOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionOptions and returns the data saved in the database.
     * @param {QuestionOptionCreateManyAndReturnArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOption = await prisma.questionOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionOptions and only return the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionOption.
     * @param {QuestionOptionDeleteArgs} args - Arguments to delete one QuestionOption.
     * @example
     * // Delete one QuestionOption
     * const QuestionOption = await prisma.questionOption.delete({
     *   where: {
     *     // ... filter to delete one QuestionOption
     *   }
     * })
     * 
     */
    delete<T extends QuestionOptionDeleteArgs>(args: SelectSubset<T, QuestionOptionDeleteArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionOption.
     * @param {QuestionOptionUpdateArgs} args - Arguments to update one QuestionOption.
     * @example
     * // Update one QuestionOption
     * const questionOption = await prisma.questionOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionOptionUpdateArgs>(args: SelectSubset<T, QuestionOptionUpdateArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionOptions.
     * @param {QuestionOptionDeleteManyArgs} args - Arguments to filter QuestionOptions to delete.
     * @example
     * // Delete a few QuestionOptions
     * const { count } = await prisma.questionOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionOptionDeleteManyArgs>(args?: SelectSubset<T, QuestionOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionOptions
     * const questionOption = await prisma.questionOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionOptionUpdateManyArgs>(args: SelectSubset<T, QuestionOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions and returns the data updated in the database.
     * @param {QuestionOptionUpdateManyAndReturnArgs} args - Arguments to update many QuestionOptions.
     * @example
     * // Update many QuestionOptions
     * const questionOption = await prisma.questionOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionOptions and only return the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionOption.
     * @param {QuestionOptionUpsertArgs} args - Arguments to update or create a QuestionOption.
     * @example
     * // Update or create a QuestionOption
     * const questionOption = await prisma.questionOption.upsert({
     *   create: {
     *     // ... data to create a QuestionOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionOption we want to update
     *   }
     * })
     */
    upsert<T extends QuestionOptionUpsertArgs>(args: SelectSubset<T, QuestionOptionUpsertArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionCountArgs} args - Arguments to filter QuestionOptions to count.
     * @example
     * // Count the number of QuestionOptions
     * const count = await prisma.questionOption.count({
     *   where: {
     *     // ... the filter for the QuestionOptions we want to count
     *   }
     * })
    **/
    count<T extends QuestionOptionCountArgs>(
      args?: Subset<T, QuestionOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionOptionAggregateArgs>(args: Subset<T, QuestionOptionAggregateArgs>): Prisma.PrismaPromise<GetQuestionOptionAggregateType<T>>

    /**
     * Group by QuestionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionOptionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionOption model
   */
  readonly fields: QuestionOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    responses<T extends QuestionOption$responsesArgs<ExtArgs> = {}>(args?: Subset<T, QuestionOption$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SurveyResponseSummary<T extends QuestionOption$SurveyResponseSummaryArgs<ExtArgs> = {}>(args?: Subset<T, QuestionOption$SurveyResponseSummaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionOption model
   */
  interface QuestionOptionFieldRefs {
    readonly id: FieldRef<"QuestionOption", 'String'>
    readonly text: FieldRef<"QuestionOption", 'String'>
    readonly order: FieldRef<"QuestionOption", 'Int'>
    readonly createdAt: FieldRef<"QuestionOption", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionOption", 'DateTime'>
    readonly questionId: FieldRef<"QuestionOption", 'String'>
    readonly teamId: FieldRef<"QuestionOption", 'Int'>
    readonly isOther: FieldRef<"QuestionOption", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * QuestionOption findUnique
   */
  export type QuestionOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption findUniqueOrThrow
   */
  export type QuestionOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption findFirst
   */
  export type QuestionOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption findFirstOrThrow
   */
  export type QuestionOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption findMany
   */
  export type QuestionOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption create
   */
  export type QuestionOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionOption.
     */
    data: XOR<QuestionOptionCreateInput, QuestionOptionUncheckedCreateInput>
  }

  /**
   * QuestionOption createMany
   */
  export type QuestionOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionCreateManyInput | QuestionOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionOption createManyAndReturn
   */
  export type QuestionOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionCreateManyInput | QuestionOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOption update
   */
  export type QuestionOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionOption.
     */
    data: XOR<QuestionOptionUpdateInput, QuestionOptionUncheckedUpdateInput>
    /**
     * Choose, which QuestionOption to update.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption updateMany
   */
  export type QuestionOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
  }

  /**
   * QuestionOption updateManyAndReturn
   */
  export type QuestionOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOption upsert
   */
  export type QuestionOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionOption to update in case it exists.
     */
    where: QuestionOptionWhereUniqueInput
    /**
     * In case the QuestionOption found by the `where` argument doesn't exist, create a new QuestionOption with this data.
     */
    create: XOR<QuestionOptionCreateInput, QuestionOptionUncheckedCreateInput>
    /**
     * In case the QuestionOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionOptionUpdateInput, QuestionOptionUncheckedUpdateInput>
  }

  /**
   * QuestionOption delete
   */
  export type QuestionOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter which QuestionOption to delete.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption deleteMany
   */
  export type QuestionOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOptions to delete
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to delete.
     */
    limit?: number
  }

  /**
   * QuestionOption.responses
   */
  export type QuestionOption$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    where?: QuestionResponseWhereInput
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    cursor?: QuestionResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * QuestionOption.SurveyResponseSummary
   */
  export type QuestionOption$SurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    where?: SurveyResponseSummaryWhereInput
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    cursor?: SurveyResponseSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * QuestionOption without action
   */
  export type QuestionOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
  }


  /**
   * Model SurveyResponse
   */

  export type AggregateSurveyResponse = {
    _count: SurveyResponseCountAggregateOutputType | null
    _avg: SurveyResponseAvgAggregateOutputType | null
    _sum: SurveyResponseSumAggregateOutputType | null
    _min: SurveyResponseMinAggregateOutputType | null
    _max: SurveyResponseMaxAggregateOutputType | null
  }

  export type SurveyResponseAvgAggregateOutputType = {
    teamId: number | null
  }

  export type SurveyResponseSumAggregateOutputType = {
    teamId: number | null
  }

  export type SurveyResponseMinAggregateOutputType = {
    id: string | null
    status: $Enums.ResponseStatus | null
    userId: string | null
    userIp: string | null
    extraInfo: string | null
    origin: string | null
    expiresAt: Date | null
    submittedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    surveyId: string | null
    teamId: number | null
  }

  export type SurveyResponseMaxAggregateOutputType = {
    id: string | null
    status: $Enums.ResponseStatus | null
    userId: string | null
    userIp: string | null
    extraInfo: string | null
    origin: string | null
    expiresAt: Date | null
    submittedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    surveyId: string | null
    teamId: number | null
  }

  export type SurveyResponseCountAggregateOutputType = {
    id: number
    status: number
    userId: number
    userIp: number
    extraInfo: number
    origin: number
    expiresAt: number
    submittedAt: number
    createdAt: number
    updatedAt: number
    surveyId: number
    teamId: number
    _all: number
  }


  export type SurveyResponseAvgAggregateInputType = {
    teamId?: true
  }

  export type SurveyResponseSumAggregateInputType = {
    teamId?: true
  }

  export type SurveyResponseMinAggregateInputType = {
    id?: true
    status?: true
    userId?: true
    userIp?: true
    extraInfo?: true
    origin?: true
    expiresAt?: true
    submittedAt?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
  }

  export type SurveyResponseMaxAggregateInputType = {
    id?: true
    status?: true
    userId?: true
    userIp?: true
    extraInfo?: true
    origin?: true
    expiresAt?: true
    submittedAt?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
  }

  export type SurveyResponseCountAggregateInputType = {
    id?: true
    status?: true
    userId?: true
    userIp?: true
    extraInfo?: true
    origin?: true
    expiresAt?: true
    submittedAt?: true
    createdAt?: true
    updatedAt?: true
    surveyId?: true
    teamId?: true
    _all?: true
  }

  export type SurveyResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyResponse to aggregate.
     */
    where?: SurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponses to fetch.
     */
    orderBy?: SurveyResponseOrderByWithRelationInput | SurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SurveyResponses
    **/
    _count?: true | SurveyResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveyResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveyResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveyResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveyResponseMaxAggregateInputType
  }

  export type GetSurveyResponseAggregateType<T extends SurveyResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateSurveyResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurveyResponse[P]>
      : GetScalarType<T[P], AggregateSurveyResponse[P]>
  }




  export type SurveyResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseWhereInput
    orderBy?: SurveyResponseOrderByWithAggregationInput | SurveyResponseOrderByWithAggregationInput[]
    by: SurveyResponseScalarFieldEnum[] | SurveyResponseScalarFieldEnum
    having?: SurveyResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveyResponseCountAggregateInputType | true
    _avg?: SurveyResponseAvgAggregateInputType
    _sum?: SurveyResponseSumAggregateInputType
    _min?: SurveyResponseMinAggregateInputType
    _max?: SurveyResponseMaxAggregateInputType
  }

  export type SurveyResponseGroupByOutputType = {
    id: string
    status: $Enums.ResponseStatus
    userId: string | null
    userIp: string | null
    extraInfo: string | null
    origin: string | null
    expiresAt: Date | null
    submittedAt: Date | null
    createdAt: Date
    updatedAt: Date
    surveyId: string
    teamId: number
    _count: SurveyResponseCountAggregateOutputType | null
    _avg: SurveyResponseAvgAggregateOutputType | null
    _sum: SurveyResponseSumAggregateOutputType | null
    _min: SurveyResponseMinAggregateOutputType | null
    _max: SurveyResponseMaxAggregateOutputType | null
  }

  type GetSurveyResponseGroupByPayload<T extends SurveyResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurveyResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveyResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveyResponseGroupByOutputType[P]>
            : GetScalarType<T[P], SurveyResponseGroupByOutputType[P]>
        }
      >
    >


  export type SurveyResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    userId?: boolean
    userIp?: boolean
    extraInfo?: boolean
    origin?: boolean
    expiresAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    questionResponses?: boolean | SurveyResponse$questionResponsesArgs<ExtArgs>
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    SurveyResponseSummary?: boolean | SurveyResponse$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | SurveyResponseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyResponse"]>

  export type SurveyResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    userId?: boolean
    userIp?: boolean
    extraInfo?: boolean
    origin?: boolean
    expiresAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyResponse"]>

  export type SurveyResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    userId?: boolean
    userIp?: boolean
    extraInfo?: boolean
    origin?: boolean
    expiresAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyResponse"]>

  export type SurveyResponseSelectScalar = {
    id?: boolean
    status?: boolean
    userId?: boolean
    userIp?: boolean
    extraInfo?: boolean
    origin?: boolean
    expiresAt?: boolean
    submittedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    surveyId?: boolean
    teamId?: boolean
  }

  export type SurveyResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "userId" | "userIp" | "extraInfo" | "origin" | "expiresAt" | "submittedAt" | "createdAt" | "updatedAt" | "surveyId" | "teamId", ExtArgs["result"]["surveyResponse"]>
  export type SurveyResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questionResponses?: boolean | SurveyResponse$questionResponsesArgs<ExtArgs>
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    SurveyResponseSummary?: boolean | SurveyResponse$SurveyResponseSummaryArgs<ExtArgs>
    _count?: boolean | SurveyResponseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SurveyResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type SurveyResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $SurveyResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SurveyResponse"
    objects: {
      questionResponses: Prisma.$QuestionResponsePayload<ExtArgs>[]
      survey: Prisma.$SurveyPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
      SurveyResponseSummary: Prisma.$SurveyResponseSummaryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: $Enums.ResponseStatus
      userId: string | null
      userIp: string | null
      extraInfo: string | null
      origin: string | null
      expiresAt: Date | null
      submittedAt: Date | null
      createdAt: Date
      updatedAt: Date
      surveyId: string
      teamId: number
    }, ExtArgs["result"]["surveyResponse"]>
    composites: {}
  }

  type SurveyResponseGetPayload<S extends boolean | null | undefined | SurveyResponseDefaultArgs> = $Result.GetResult<Prisma.$SurveyResponsePayload, S>

  type SurveyResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SurveyResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SurveyResponseCountAggregateInputType | true
    }

  export interface SurveyResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SurveyResponse'], meta: { name: 'SurveyResponse' } }
    /**
     * Find zero or one SurveyResponse that matches the filter.
     * @param {SurveyResponseFindUniqueArgs} args - Arguments to find a SurveyResponse
     * @example
     * // Get one SurveyResponse
     * const surveyResponse = await prisma.surveyResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurveyResponseFindUniqueArgs>(args: SelectSubset<T, SurveyResponseFindUniqueArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SurveyResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SurveyResponseFindUniqueOrThrowArgs} args - Arguments to find a SurveyResponse
     * @example
     * // Get one SurveyResponse
     * const surveyResponse = await prisma.surveyResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurveyResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, SurveyResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseFindFirstArgs} args - Arguments to find a SurveyResponse
     * @example
     * // Get one SurveyResponse
     * const surveyResponse = await prisma.surveyResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurveyResponseFindFirstArgs>(args?: SelectSubset<T, SurveyResponseFindFirstArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseFindFirstOrThrowArgs} args - Arguments to find a SurveyResponse
     * @example
     * // Get one SurveyResponse
     * const surveyResponse = await prisma.surveyResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurveyResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, SurveyResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SurveyResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SurveyResponses
     * const surveyResponses = await prisma.surveyResponse.findMany()
     * 
     * // Get first 10 SurveyResponses
     * const surveyResponses = await prisma.surveyResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveyResponseWithIdOnly = await prisma.surveyResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurveyResponseFindManyArgs>(args?: SelectSubset<T, SurveyResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SurveyResponse.
     * @param {SurveyResponseCreateArgs} args - Arguments to create a SurveyResponse.
     * @example
     * // Create one SurveyResponse
     * const SurveyResponse = await prisma.surveyResponse.create({
     *   data: {
     *     // ... data to create a SurveyResponse
     *   }
     * })
     * 
     */
    create<T extends SurveyResponseCreateArgs>(args: SelectSubset<T, SurveyResponseCreateArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SurveyResponses.
     * @param {SurveyResponseCreateManyArgs} args - Arguments to create many SurveyResponses.
     * @example
     * // Create many SurveyResponses
     * const surveyResponse = await prisma.surveyResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurveyResponseCreateManyArgs>(args?: SelectSubset<T, SurveyResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SurveyResponses and returns the data saved in the database.
     * @param {SurveyResponseCreateManyAndReturnArgs} args - Arguments to create many SurveyResponses.
     * @example
     * // Create many SurveyResponses
     * const surveyResponse = await prisma.surveyResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SurveyResponses and only return the `id`
     * const surveyResponseWithIdOnly = await prisma.surveyResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SurveyResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, SurveyResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SurveyResponse.
     * @param {SurveyResponseDeleteArgs} args - Arguments to delete one SurveyResponse.
     * @example
     * // Delete one SurveyResponse
     * const SurveyResponse = await prisma.surveyResponse.delete({
     *   where: {
     *     // ... filter to delete one SurveyResponse
     *   }
     * })
     * 
     */
    delete<T extends SurveyResponseDeleteArgs>(args: SelectSubset<T, SurveyResponseDeleteArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SurveyResponse.
     * @param {SurveyResponseUpdateArgs} args - Arguments to update one SurveyResponse.
     * @example
     * // Update one SurveyResponse
     * const surveyResponse = await prisma.surveyResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurveyResponseUpdateArgs>(args: SelectSubset<T, SurveyResponseUpdateArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SurveyResponses.
     * @param {SurveyResponseDeleteManyArgs} args - Arguments to filter SurveyResponses to delete.
     * @example
     * // Delete a few SurveyResponses
     * const { count } = await prisma.surveyResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurveyResponseDeleteManyArgs>(args?: SelectSubset<T, SurveyResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SurveyResponses
     * const surveyResponse = await prisma.surveyResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurveyResponseUpdateManyArgs>(args: SelectSubset<T, SurveyResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyResponses and returns the data updated in the database.
     * @param {SurveyResponseUpdateManyAndReturnArgs} args - Arguments to update many SurveyResponses.
     * @example
     * // Update many SurveyResponses
     * const surveyResponse = await prisma.surveyResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SurveyResponses and only return the `id`
     * const surveyResponseWithIdOnly = await prisma.surveyResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SurveyResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, SurveyResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SurveyResponse.
     * @param {SurveyResponseUpsertArgs} args - Arguments to update or create a SurveyResponse.
     * @example
     * // Update or create a SurveyResponse
     * const surveyResponse = await prisma.surveyResponse.upsert({
     *   create: {
     *     // ... data to create a SurveyResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SurveyResponse we want to update
     *   }
     * })
     */
    upsert<T extends SurveyResponseUpsertArgs>(args: SelectSubset<T, SurveyResponseUpsertArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SurveyResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseCountArgs} args - Arguments to filter SurveyResponses to count.
     * @example
     * // Count the number of SurveyResponses
     * const count = await prisma.surveyResponse.count({
     *   where: {
     *     // ... the filter for the SurveyResponses we want to count
     *   }
     * })
    **/
    count<T extends SurveyResponseCountArgs>(
      args?: Subset<T, SurveyResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveyResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SurveyResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveyResponseAggregateArgs>(args: Subset<T, SurveyResponseAggregateArgs>): Prisma.PrismaPromise<GetSurveyResponseAggregateType<T>>

    /**
     * Group by SurveyResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveyResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveyResponseGroupByArgs['orderBy'] }
        : { orderBy?: SurveyResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveyResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveyResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SurveyResponse model
   */
  readonly fields: SurveyResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SurveyResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurveyResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    questionResponses<T extends SurveyResponse$questionResponsesArgs<ExtArgs> = {}>(args?: Subset<T, SurveyResponse$questionResponsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    survey<T extends SurveyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurveyDefaultArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    SurveyResponseSummary<T extends SurveyResponse$SurveyResponseSummaryArgs<ExtArgs> = {}>(args?: Subset<T, SurveyResponse$SurveyResponseSummaryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SurveyResponse model
   */
  interface SurveyResponseFieldRefs {
    readonly id: FieldRef<"SurveyResponse", 'String'>
    readonly status: FieldRef<"SurveyResponse", 'ResponseStatus'>
    readonly userId: FieldRef<"SurveyResponse", 'String'>
    readonly userIp: FieldRef<"SurveyResponse", 'String'>
    readonly extraInfo: FieldRef<"SurveyResponse", 'String'>
    readonly origin: FieldRef<"SurveyResponse", 'String'>
    readonly expiresAt: FieldRef<"SurveyResponse", 'DateTime'>
    readonly submittedAt: FieldRef<"SurveyResponse", 'DateTime'>
    readonly createdAt: FieldRef<"SurveyResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"SurveyResponse", 'DateTime'>
    readonly surveyId: FieldRef<"SurveyResponse", 'String'>
    readonly teamId: FieldRef<"SurveyResponse", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SurveyResponse findUnique
   */
  export type SurveyResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponse to fetch.
     */
    where: SurveyResponseWhereUniqueInput
  }

  /**
   * SurveyResponse findUniqueOrThrow
   */
  export type SurveyResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponse to fetch.
     */
    where: SurveyResponseWhereUniqueInput
  }

  /**
   * SurveyResponse findFirst
   */
  export type SurveyResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponse to fetch.
     */
    where?: SurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponses to fetch.
     */
    orderBy?: SurveyResponseOrderByWithRelationInput | SurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyResponses.
     */
    cursor?: SurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyResponses.
     */
    distinct?: SurveyResponseScalarFieldEnum | SurveyResponseScalarFieldEnum[]
  }

  /**
   * SurveyResponse findFirstOrThrow
   */
  export type SurveyResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponse to fetch.
     */
    where?: SurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponses to fetch.
     */
    orderBy?: SurveyResponseOrderByWithRelationInput | SurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyResponses.
     */
    cursor?: SurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyResponses.
     */
    distinct?: SurveyResponseScalarFieldEnum | SurveyResponseScalarFieldEnum[]
  }

  /**
   * SurveyResponse findMany
   */
  export type SurveyResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponses to fetch.
     */
    where?: SurveyResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponses to fetch.
     */
    orderBy?: SurveyResponseOrderByWithRelationInput | SurveyResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SurveyResponses.
     */
    cursor?: SurveyResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponses.
     */
    skip?: number
    distinct?: SurveyResponseScalarFieldEnum | SurveyResponseScalarFieldEnum[]
  }

  /**
   * SurveyResponse create
   */
  export type SurveyResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a SurveyResponse.
     */
    data: XOR<SurveyResponseCreateInput, SurveyResponseUncheckedCreateInput>
  }

  /**
   * SurveyResponse createMany
   */
  export type SurveyResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SurveyResponses.
     */
    data: SurveyResponseCreateManyInput | SurveyResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SurveyResponse createManyAndReturn
   */
  export type SurveyResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * The data used to create many SurveyResponses.
     */
    data: SurveyResponseCreateManyInput | SurveyResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyResponse update
   */
  export type SurveyResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a SurveyResponse.
     */
    data: XOR<SurveyResponseUpdateInput, SurveyResponseUncheckedUpdateInput>
    /**
     * Choose, which SurveyResponse to update.
     */
    where: SurveyResponseWhereUniqueInput
  }

  /**
   * SurveyResponse updateMany
   */
  export type SurveyResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SurveyResponses.
     */
    data: XOR<SurveyResponseUpdateManyMutationInput, SurveyResponseUncheckedUpdateManyInput>
    /**
     * Filter which SurveyResponses to update
     */
    where?: SurveyResponseWhereInput
    /**
     * Limit how many SurveyResponses to update.
     */
    limit?: number
  }

  /**
   * SurveyResponse updateManyAndReturn
   */
  export type SurveyResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * The data used to update SurveyResponses.
     */
    data: XOR<SurveyResponseUpdateManyMutationInput, SurveyResponseUncheckedUpdateManyInput>
    /**
     * Filter which SurveyResponses to update
     */
    where?: SurveyResponseWhereInput
    /**
     * Limit how many SurveyResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyResponse upsert
   */
  export type SurveyResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the SurveyResponse to update in case it exists.
     */
    where: SurveyResponseWhereUniqueInput
    /**
     * In case the SurveyResponse found by the `where` argument doesn't exist, create a new SurveyResponse with this data.
     */
    create: XOR<SurveyResponseCreateInput, SurveyResponseUncheckedCreateInput>
    /**
     * In case the SurveyResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveyResponseUpdateInput, SurveyResponseUncheckedUpdateInput>
  }

  /**
   * SurveyResponse delete
   */
  export type SurveyResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
    /**
     * Filter which SurveyResponse to delete.
     */
    where: SurveyResponseWhereUniqueInput
  }

  /**
   * SurveyResponse deleteMany
   */
  export type SurveyResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyResponses to delete
     */
    where?: SurveyResponseWhereInput
    /**
     * Limit how many SurveyResponses to delete.
     */
    limit?: number
  }

  /**
   * SurveyResponse.questionResponses
   */
  export type SurveyResponse$questionResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    where?: QuestionResponseWhereInput
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    cursor?: QuestionResponseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * SurveyResponse.SurveyResponseSummary
   */
  export type SurveyResponse$SurveyResponseSummaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    where?: SurveyResponseSummaryWhereInput
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    cursor?: SurveyResponseSummaryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * SurveyResponse without action
   */
  export type SurveyResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponse
     */
    select?: SurveyResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponse
     */
    omit?: SurveyResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseInclude<ExtArgs> | null
  }


  /**
   * Model SurveyResponseSummary
   */

  export type AggregateSurveyResponseSummary = {
    _count: SurveyResponseSummaryCountAggregateOutputType | null
    _avg: SurveyResponseSummaryAvgAggregateOutputType | null
    _sum: SurveyResponseSummarySumAggregateOutputType | null
    _min: SurveyResponseSummaryMinAggregateOutputType | null
    _max: SurveyResponseSummaryMaxAggregateOutputType | null
  }

  export type SurveyResponseSummaryAvgAggregateOutputType = {
    numberValue: number | null
    teamId: number | null
    responseCount: number | null
  }

  export type SurveyResponseSummarySumAggregateOutputType = {
    numberValue: number | null
    teamId: number | null
    responseCount: number | null
  }

  export type SurveyResponseSummaryMinAggregateOutputType = {
    id: string | null
    surveyId: string | null
    questionId: string | null
    questionTitle: string | null
    responseId: string | null
    optionId: string | null
    textValue: string | null
    questionFormat: $Enums.QuestionFormat | null
    isOther: boolean | null
    numberValue: number | null
    booleanValue: boolean | null
    teamId: number | null
    responseCount: number | null
    lastUpdated: Date | null
  }

  export type SurveyResponseSummaryMaxAggregateOutputType = {
    id: string | null
    surveyId: string | null
    questionId: string | null
    questionTitle: string | null
    responseId: string | null
    optionId: string | null
    textValue: string | null
    questionFormat: $Enums.QuestionFormat | null
    isOther: boolean | null
    numberValue: number | null
    booleanValue: boolean | null
    teamId: number | null
    responseCount: number | null
    lastUpdated: Date | null
  }

  export type SurveyResponseSummaryCountAggregateOutputType = {
    id: number
    surveyId: number
    questionId: number
    questionTitle: number
    responseId: number
    optionId: number
    textValue: number
    questionFormat: number
    isOther: number
    numberValue: number
    booleanValue: number
    teamId: number
    responseCount: number
    lastUpdated: number
    _all: number
  }


  export type SurveyResponseSummaryAvgAggregateInputType = {
    numberValue?: true
    teamId?: true
    responseCount?: true
  }

  export type SurveyResponseSummarySumAggregateInputType = {
    numberValue?: true
    teamId?: true
    responseCount?: true
  }

  export type SurveyResponseSummaryMinAggregateInputType = {
    id?: true
    surveyId?: true
    questionId?: true
    questionTitle?: true
    responseId?: true
    optionId?: true
    textValue?: true
    questionFormat?: true
    isOther?: true
    numberValue?: true
    booleanValue?: true
    teamId?: true
    responseCount?: true
    lastUpdated?: true
  }

  export type SurveyResponseSummaryMaxAggregateInputType = {
    id?: true
    surveyId?: true
    questionId?: true
    questionTitle?: true
    responseId?: true
    optionId?: true
    textValue?: true
    questionFormat?: true
    isOther?: true
    numberValue?: true
    booleanValue?: true
    teamId?: true
    responseCount?: true
    lastUpdated?: true
  }

  export type SurveyResponseSummaryCountAggregateInputType = {
    id?: true
    surveyId?: true
    questionId?: true
    questionTitle?: true
    responseId?: true
    optionId?: true
    textValue?: true
    questionFormat?: true
    isOther?: true
    numberValue?: true
    booleanValue?: true
    teamId?: true
    responseCount?: true
    lastUpdated?: true
    _all?: true
  }

  export type SurveyResponseSummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyResponseSummary to aggregate.
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponseSummaries to fetch.
     */
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SurveyResponseSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponseSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponseSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SurveyResponseSummaries
    **/
    _count?: true | SurveyResponseSummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SurveyResponseSummaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SurveyResponseSummarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SurveyResponseSummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SurveyResponseSummaryMaxAggregateInputType
  }

  export type GetSurveyResponseSummaryAggregateType<T extends SurveyResponseSummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateSurveyResponseSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSurveyResponseSummary[P]>
      : GetScalarType<T[P], AggregateSurveyResponseSummary[P]>
  }




  export type SurveyResponseSummaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SurveyResponseSummaryWhereInput
    orderBy?: SurveyResponseSummaryOrderByWithAggregationInput | SurveyResponseSummaryOrderByWithAggregationInput[]
    by: SurveyResponseSummaryScalarFieldEnum[] | SurveyResponseSummaryScalarFieldEnum
    having?: SurveyResponseSummaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SurveyResponseSummaryCountAggregateInputType | true
    _avg?: SurveyResponseSummaryAvgAggregateInputType
    _sum?: SurveyResponseSummarySumAggregateInputType
    _min?: SurveyResponseSummaryMinAggregateInputType
    _max?: SurveyResponseSummaryMaxAggregateInputType
  }

  export type SurveyResponseSummaryGroupByOutputType = {
    id: string
    surveyId: string
    questionId: string
    questionTitle: string | null
    responseId: string
    optionId: string | null
    textValue: string | null
    questionFormat: $Enums.QuestionFormat | null
    isOther: boolean | null
    numberValue: number | null
    booleanValue: boolean | null
    teamId: number
    responseCount: number
    lastUpdated: Date
    _count: SurveyResponseSummaryCountAggregateOutputType | null
    _avg: SurveyResponseSummaryAvgAggregateOutputType | null
    _sum: SurveyResponseSummarySumAggregateOutputType | null
    _min: SurveyResponseSummaryMinAggregateOutputType | null
    _max: SurveyResponseSummaryMaxAggregateOutputType | null
  }

  type GetSurveyResponseSummaryGroupByPayload<T extends SurveyResponseSummaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SurveyResponseSummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SurveyResponseSummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SurveyResponseSummaryGroupByOutputType[P]>
            : GetScalarType<T[P], SurveyResponseSummaryGroupByOutputType[P]>
        }
      >
    >


  export type SurveyResponseSummarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    questionId?: boolean
    questionTitle?: boolean
    responseId?: boolean
    optionId?: boolean
    textValue?: boolean
    questionFormat?: boolean
    isOther?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    teamId?: boolean
    responseCount?: boolean
    lastUpdated?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    option?: boolean | SurveyResponseSummary$optionArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyResponseSummary"]>

  export type SurveyResponseSummarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    questionId?: boolean
    questionTitle?: boolean
    responseId?: boolean
    optionId?: boolean
    textValue?: boolean
    questionFormat?: boolean
    isOther?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    teamId?: boolean
    responseCount?: boolean
    lastUpdated?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    option?: boolean | SurveyResponseSummary$optionArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyResponseSummary"]>

  export type SurveyResponseSummarySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    surveyId?: boolean
    questionId?: boolean
    questionTitle?: boolean
    responseId?: boolean
    optionId?: boolean
    textValue?: boolean
    questionFormat?: boolean
    isOther?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    teamId?: boolean
    responseCount?: boolean
    lastUpdated?: boolean
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    option?: boolean | SurveyResponseSummary$optionArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["surveyResponseSummary"]>

  export type SurveyResponseSummarySelectScalar = {
    id?: boolean
    surveyId?: boolean
    questionId?: boolean
    questionTitle?: boolean
    responseId?: boolean
    optionId?: boolean
    textValue?: boolean
    questionFormat?: boolean
    isOther?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    teamId?: boolean
    responseCount?: boolean
    lastUpdated?: boolean
  }

  export type SurveyResponseSummaryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "surveyId" | "questionId" | "questionTitle" | "responseId" | "optionId" | "textValue" | "questionFormat" | "isOther" | "numberValue" | "booleanValue" | "teamId" | "responseCount" | "lastUpdated", ExtArgs["result"]["surveyResponseSummary"]>
  export type SurveyResponseSummaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    option?: boolean | SurveyResponseSummary$optionArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
  }
  export type SurveyResponseSummaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    option?: boolean | SurveyResponseSummary$optionArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
  }
  export type SurveyResponseSummaryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    survey?: boolean | SurveyDefaultArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    option?: boolean | SurveyResponseSummary$optionArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
  }

  export type $SurveyResponseSummaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SurveyResponseSummary"
    objects: {
      survey: Prisma.$SurveyPayload<ExtArgs>
      question: Prisma.$QuestionPayload<ExtArgs>
      option: Prisma.$QuestionOptionPayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs>
      response: Prisma.$SurveyResponsePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      surveyId: string
      questionId: string
      questionTitle: string | null
      responseId: string
      optionId: string | null
      textValue: string | null
      questionFormat: $Enums.QuestionFormat | null
      isOther: boolean | null
      numberValue: number | null
      booleanValue: boolean | null
      teamId: number
      responseCount: number
      lastUpdated: Date
    }, ExtArgs["result"]["surveyResponseSummary"]>
    composites: {}
  }

  type SurveyResponseSummaryGetPayload<S extends boolean | null | undefined | SurveyResponseSummaryDefaultArgs> = $Result.GetResult<Prisma.$SurveyResponseSummaryPayload, S>

  type SurveyResponseSummaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SurveyResponseSummaryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SurveyResponseSummaryCountAggregateInputType | true
    }

  export interface SurveyResponseSummaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SurveyResponseSummary'], meta: { name: 'SurveyResponseSummary' } }
    /**
     * Find zero or one SurveyResponseSummary that matches the filter.
     * @param {SurveyResponseSummaryFindUniqueArgs} args - Arguments to find a SurveyResponseSummary
     * @example
     * // Get one SurveyResponseSummary
     * const surveyResponseSummary = await prisma.surveyResponseSummary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SurveyResponseSummaryFindUniqueArgs>(args: SelectSubset<T, SurveyResponseSummaryFindUniqueArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SurveyResponseSummary that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SurveyResponseSummaryFindUniqueOrThrowArgs} args - Arguments to find a SurveyResponseSummary
     * @example
     * // Get one SurveyResponseSummary
     * const surveyResponseSummary = await prisma.surveyResponseSummary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SurveyResponseSummaryFindUniqueOrThrowArgs>(args: SelectSubset<T, SurveyResponseSummaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyResponseSummary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryFindFirstArgs} args - Arguments to find a SurveyResponseSummary
     * @example
     * // Get one SurveyResponseSummary
     * const surveyResponseSummary = await prisma.surveyResponseSummary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SurveyResponseSummaryFindFirstArgs>(args?: SelectSubset<T, SurveyResponseSummaryFindFirstArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SurveyResponseSummary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryFindFirstOrThrowArgs} args - Arguments to find a SurveyResponseSummary
     * @example
     * // Get one SurveyResponseSummary
     * const surveyResponseSummary = await prisma.surveyResponseSummary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SurveyResponseSummaryFindFirstOrThrowArgs>(args?: SelectSubset<T, SurveyResponseSummaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SurveyResponseSummaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SurveyResponseSummaries
     * const surveyResponseSummaries = await prisma.surveyResponseSummary.findMany()
     * 
     * // Get first 10 SurveyResponseSummaries
     * const surveyResponseSummaries = await prisma.surveyResponseSummary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const surveyResponseSummaryWithIdOnly = await prisma.surveyResponseSummary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SurveyResponseSummaryFindManyArgs>(args?: SelectSubset<T, SurveyResponseSummaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SurveyResponseSummary.
     * @param {SurveyResponseSummaryCreateArgs} args - Arguments to create a SurveyResponseSummary.
     * @example
     * // Create one SurveyResponseSummary
     * const SurveyResponseSummary = await prisma.surveyResponseSummary.create({
     *   data: {
     *     // ... data to create a SurveyResponseSummary
     *   }
     * })
     * 
     */
    create<T extends SurveyResponseSummaryCreateArgs>(args: SelectSubset<T, SurveyResponseSummaryCreateArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SurveyResponseSummaries.
     * @param {SurveyResponseSummaryCreateManyArgs} args - Arguments to create many SurveyResponseSummaries.
     * @example
     * // Create many SurveyResponseSummaries
     * const surveyResponseSummary = await prisma.surveyResponseSummary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SurveyResponseSummaryCreateManyArgs>(args?: SelectSubset<T, SurveyResponseSummaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SurveyResponseSummaries and returns the data saved in the database.
     * @param {SurveyResponseSummaryCreateManyAndReturnArgs} args - Arguments to create many SurveyResponseSummaries.
     * @example
     * // Create many SurveyResponseSummaries
     * const surveyResponseSummary = await prisma.surveyResponseSummary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SurveyResponseSummaries and only return the `id`
     * const surveyResponseSummaryWithIdOnly = await prisma.surveyResponseSummary.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SurveyResponseSummaryCreateManyAndReturnArgs>(args?: SelectSubset<T, SurveyResponseSummaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SurveyResponseSummary.
     * @param {SurveyResponseSummaryDeleteArgs} args - Arguments to delete one SurveyResponseSummary.
     * @example
     * // Delete one SurveyResponseSummary
     * const SurveyResponseSummary = await prisma.surveyResponseSummary.delete({
     *   where: {
     *     // ... filter to delete one SurveyResponseSummary
     *   }
     * })
     * 
     */
    delete<T extends SurveyResponseSummaryDeleteArgs>(args: SelectSubset<T, SurveyResponseSummaryDeleteArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SurveyResponseSummary.
     * @param {SurveyResponseSummaryUpdateArgs} args - Arguments to update one SurveyResponseSummary.
     * @example
     * // Update one SurveyResponseSummary
     * const surveyResponseSummary = await prisma.surveyResponseSummary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SurveyResponseSummaryUpdateArgs>(args: SelectSubset<T, SurveyResponseSummaryUpdateArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SurveyResponseSummaries.
     * @param {SurveyResponseSummaryDeleteManyArgs} args - Arguments to filter SurveyResponseSummaries to delete.
     * @example
     * // Delete a few SurveyResponseSummaries
     * const { count } = await prisma.surveyResponseSummary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SurveyResponseSummaryDeleteManyArgs>(args?: SelectSubset<T, SurveyResponseSummaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyResponseSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SurveyResponseSummaries
     * const surveyResponseSummary = await prisma.surveyResponseSummary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SurveyResponseSummaryUpdateManyArgs>(args: SelectSubset<T, SurveyResponseSummaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SurveyResponseSummaries and returns the data updated in the database.
     * @param {SurveyResponseSummaryUpdateManyAndReturnArgs} args - Arguments to update many SurveyResponseSummaries.
     * @example
     * // Update many SurveyResponseSummaries
     * const surveyResponseSummary = await prisma.surveyResponseSummary.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SurveyResponseSummaries and only return the `id`
     * const surveyResponseSummaryWithIdOnly = await prisma.surveyResponseSummary.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SurveyResponseSummaryUpdateManyAndReturnArgs>(args: SelectSubset<T, SurveyResponseSummaryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SurveyResponseSummary.
     * @param {SurveyResponseSummaryUpsertArgs} args - Arguments to update or create a SurveyResponseSummary.
     * @example
     * // Update or create a SurveyResponseSummary
     * const surveyResponseSummary = await prisma.surveyResponseSummary.upsert({
     *   create: {
     *     // ... data to create a SurveyResponseSummary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SurveyResponseSummary we want to update
     *   }
     * })
     */
    upsert<T extends SurveyResponseSummaryUpsertArgs>(args: SelectSubset<T, SurveyResponseSummaryUpsertArgs<ExtArgs>>): Prisma__SurveyResponseSummaryClient<$Result.GetResult<Prisma.$SurveyResponseSummaryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SurveyResponseSummaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryCountArgs} args - Arguments to filter SurveyResponseSummaries to count.
     * @example
     * // Count the number of SurveyResponseSummaries
     * const count = await prisma.surveyResponseSummary.count({
     *   where: {
     *     // ... the filter for the SurveyResponseSummaries we want to count
     *   }
     * })
    **/
    count<T extends SurveyResponseSummaryCountArgs>(
      args?: Subset<T, SurveyResponseSummaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SurveyResponseSummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SurveyResponseSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SurveyResponseSummaryAggregateArgs>(args: Subset<T, SurveyResponseSummaryAggregateArgs>): Prisma.PrismaPromise<GetSurveyResponseSummaryAggregateType<T>>

    /**
     * Group by SurveyResponseSummary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SurveyResponseSummaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SurveyResponseSummaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SurveyResponseSummaryGroupByArgs['orderBy'] }
        : { orderBy?: SurveyResponseSummaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SurveyResponseSummaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSurveyResponseSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SurveyResponseSummary model
   */
  readonly fields: SurveyResponseSummaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SurveyResponseSummary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SurveyResponseSummaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    survey<T extends SurveyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurveyDefaultArgs<ExtArgs>>): Prisma__SurveyClient<$Result.GetResult<Prisma.$SurveyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    option<T extends SurveyResponseSummary$optionArgs<ExtArgs> = {}>(args?: Subset<T, SurveyResponseSummary$optionArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    response<T extends SurveyResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurveyResponseDefaultArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SurveyResponseSummary model
   */
  interface SurveyResponseSummaryFieldRefs {
    readonly id: FieldRef<"SurveyResponseSummary", 'String'>
    readonly surveyId: FieldRef<"SurveyResponseSummary", 'String'>
    readonly questionId: FieldRef<"SurveyResponseSummary", 'String'>
    readonly questionTitle: FieldRef<"SurveyResponseSummary", 'String'>
    readonly responseId: FieldRef<"SurveyResponseSummary", 'String'>
    readonly optionId: FieldRef<"SurveyResponseSummary", 'String'>
    readonly textValue: FieldRef<"SurveyResponseSummary", 'String'>
    readonly questionFormat: FieldRef<"SurveyResponseSummary", 'QuestionFormat'>
    readonly isOther: FieldRef<"SurveyResponseSummary", 'Boolean'>
    readonly numberValue: FieldRef<"SurveyResponseSummary", 'Int'>
    readonly booleanValue: FieldRef<"SurveyResponseSummary", 'Boolean'>
    readonly teamId: FieldRef<"SurveyResponseSummary", 'Int'>
    readonly responseCount: FieldRef<"SurveyResponseSummary", 'Int'>
    readonly lastUpdated: FieldRef<"SurveyResponseSummary", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SurveyResponseSummary findUnique
   */
  export type SurveyResponseSummaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponseSummary to fetch.
     */
    where: SurveyResponseSummaryWhereUniqueInput
  }

  /**
   * SurveyResponseSummary findUniqueOrThrow
   */
  export type SurveyResponseSummaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponseSummary to fetch.
     */
    where: SurveyResponseSummaryWhereUniqueInput
  }

  /**
   * SurveyResponseSummary findFirst
   */
  export type SurveyResponseSummaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponseSummary to fetch.
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponseSummaries to fetch.
     */
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyResponseSummaries.
     */
    cursor?: SurveyResponseSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponseSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponseSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyResponseSummaries.
     */
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * SurveyResponseSummary findFirstOrThrow
   */
  export type SurveyResponseSummaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponseSummary to fetch.
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponseSummaries to fetch.
     */
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SurveyResponseSummaries.
     */
    cursor?: SurveyResponseSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponseSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponseSummaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SurveyResponseSummaries.
     */
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * SurveyResponseSummary findMany
   */
  export type SurveyResponseSummaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * Filter, which SurveyResponseSummaries to fetch.
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SurveyResponseSummaries to fetch.
     */
    orderBy?: SurveyResponseSummaryOrderByWithRelationInput | SurveyResponseSummaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SurveyResponseSummaries.
     */
    cursor?: SurveyResponseSummaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SurveyResponseSummaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SurveyResponseSummaries.
     */
    skip?: number
    distinct?: SurveyResponseSummaryScalarFieldEnum | SurveyResponseSummaryScalarFieldEnum[]
  }

  /**
   * SurveyResponseSummary create
   */
  export type SurveyResponseSummaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * The data needed to create a SurveyResponseSummary.
     */
    data: XOR<SurveyResponseSummaryCreateInput, SurveyResponseSummaryUncheckedCreateInput>
  }

  /**
   * SurveyResponseSummary createMany
   */
  export type SurveyResponseSummaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SurveyResponseSummaries.
     */
    data: SurveyResponseSummaryCreateManyInput | SurveyResponseSummaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SurveyResponseSummary createManyAndReturn
   */
  export type SurveyResponseSummaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * The data used to create many SurveyResponseSummaries.
     */
    data: SurveyResponseSummaryCreateManyInput | SurveyResponseSummaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyResponseSummary update
   */
  export type SurveyResponseSummaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * The data needed to update a SurveyResponseSummary.
     */
    data: XOR<SurveyResponseSummaryUpdateInput, SurveyResponseSummaryUncheckedUpdateInput>
    /**
     * Choose, which SurveyResponseSummary to update.
     */
    where: SurveyResponseSummaryWhereUniqueInput
  }

  /**
   * SurveyResponseSummary updateMany
   */
  export type SurveyResponseSummaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SurveyResponseSummaries.
     */
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyInput>
    /**
     * Filter which SurveyResponseSummaries to update
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * Limit how many SurveyResponseSummaries to update.
     */
    limit?: number
  }

  /**
   * SurveyResponseSummary updateManyAndReturn
   */
  export type SurveyResponseSummaryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * The data used to update SurveyResponseSummaries.
     */
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyInput>
    /**
     * Filter which SurveyResponseSummaries to update
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * Limit how many SurveyResponseSummaries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SurveyResponseSummary upsert
   */
  export type SurveyResponseSummaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * The filter to search for the SurveyResponseSummary to update in case it exists.
     */
    where: SurveyResponseSummaryWhereUniqueInput
    /**
     * In case the SurveyResponseSummary found by the `where` argument doesn't exist, create a new SurveyResponseSummary with this data.
     */
    create: XOR<SurveyResponseSummaryCreateInput, SurveyResponseSummaryUncheckedCreateInput>
    /**
     * In case the SurveyResponseSummary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SurveyResponseSummaryUpdateInput, SurveyResponseSummaryUncheckedUpdateInput>
  }

  /**
   * SurveyResponseSummary delete
   */
  export type SurveyResponseSummaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
    /**
     * Filter which SurveyResponseSummary to delete.
     */
    where: SurveyResponseSummaryWhereUniqueInput
  }

  /**
   * SurveyResponseSummary deleteMany
   */
  export type SurveyResponseSummaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SurveyResponseSummaries to delete
     */
    where?: SurveyResponseSummaryWhereInput
    /**
     * Limit how many SurveyResponseSummaries to delete.
     */
    limit?: number
  }

  /**
   * SurveyResponseSummary.option
   */
  export type SurveyResponseSummary$optionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
  }

  /**
   * SurveyResponseSummary without action
   */
  export type SurveyResponseSummaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SurveyResponseSummary
     */
    select?: SurveyResponseSummarySelect<ExtArgs> | null
    /**
     * Omit specific fields from the SurveyResponseSummary
     */
    omit?: SurveyResponseSummaryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SurveyResponseSummaryInclude<ExtArgs> | null
  }


  /**
   * Model QuestionResponse
   */

  export type AggregateQuestionResponse = {
    _count: QuestionResponseCountAggregateOutputType | null
    _avg: QuestionResponseAvgAggregateOutputType | null
    _sum: QuestionResponseSumAggregateOutputType | null
    _min: QuestionResponseMinAggregateOutputType | null
    _max: QuestionResponseMaxAggregateOutputType | null
  }

  export type QuestionResponseAvgAggregateOutputType = {
    numberValue: number | null
    teamId: number | null
  }

  export type QuestionResponseSumAggregateOutputType = {
    numberValue: number | null
    teamId: number | null
  }

  export type QuestionResponseMinAggregateOutputType = {
    id: string | null
    isOther: boolean | null
    textValue: string | null
    numberValue: number | null
    booleanValue: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    questionId: string | null
    questionTitle: string | null
    questionFormat: $Enums.QuestionFormat | null
    optionId: string | null
    responseId: string | null
    teamId: number | null
  }

  export type QuestionResponseMaxAggregateOutputType = {
    id: string | null
    isOther: boolean | null
    textValue: string | null
    numberValue: number | null
    booleanValue: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    questionId: string | null
    questionTitle: string | null
    questionFormat: $Enums.QuestionFormat | null
    optionId: string | null
    responseId: string | null
    teamId: number | null
  }

  export type QuestionResponseCountAggregateOutputType = {
    id: number
    isOther: number
    textValue: number
    numberValue: number
    booleanValue: number
    createdAt: number
    updatedAt: number
    questionId: number
    questionTitle: number
    questionFormat: number
    optionId: number
    responseId: number
    teamId: number
    _all: number
  }


  export type QuestionResponseAvgAggregateInputType = {
    numberValue?: true
    teamId?: true
  }

  export type QuestionResponseSumAggregateInputType = {
    numberValue?: true
    teamId?: true
  }

  export type QuestionResponseMinAggregateInputType = {
    id?: true
    isOther?: true
    textValue?: true
    numberValue?: true
    booleanValue?: true
    createdAt?: true
    updatedAt?: true
    questionId?: true
    questionTitle?: true
    questionFormat?: true
    optionId?: true
    responseId?: true
    teamId?: true
  }

  export type QuestionResponseMaxAggregateInputType = {
    id?: true
    isOther?: true
    textValue?: true
    numberValue?: true
    booleanValue?: true
    createdAt?: true
    updatedAt?: true
    questionId?: true
    questionTitle?: true
    questionFormat?: true
    optionId?: true
    responseId?: true
    teamId?: true
  }

  export type QuestionResponseCountAggregateInputType = {
    id?: true
    isOther?: true
    textValue?: true
    numberValue?: true
    booleanValue?: true
    createdAt?: true
    updatedAt?: true
    questionId?: true
    questionTitle?: true
    questionFormat?: true
    optionId?: true
    responseId?: true
    teamId?: true
    _all?: true
  }

  export type QuestionResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionResponse to aggregate.
     */
    where?: QuestionResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionResponses to fetch.
     */
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionResponses
    **/
    _count?: true | QuestionResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionResponseMaxAggregateInputType
  }

  export type GetQuestionResponseAggregateType<T extends QuestionResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionResponse[P]>
      : GetScalarType<T[P], AggregateQuestionResponse[P]>
  }




  export type QuestionResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionResponseWhereInput
    orderBy?: QuestionResponseOrderByWithAggregationInput | QuestionResponseOrderByWithAggregationInput[]
    by: QuestionResponseScalarFieldEnum[] | QuestionResponseScalarFieldEnum
    having?: QuestionResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionResponseCountAggregateInputType | true
    _avg?: QuestionResponseAvgAggregateInputType
    _sum?: QuestionResponseSumAggregateInputType
    _min?: QuestionResponseMinAggregateInputType
    _max?: QuestionResponseMaxAggregateInputType
  }

  export type QuestionResponseGroupByOutputType = {
    id: string
    isOther: boolean | null
    textValue: string | null
    numberValue: number | null
    booleanValue: boolean | null
    createdAt: Date
    updatedAt: Date
    questionId: string
    questionTitle: string | null
    questionFormat: $Enums.QuestionFormat | null
    optionId: string | null
    responseId: string
    teamId: number
    _count: QuestionResponseCountAggregateOutputType | null
    _avg: QuestionResponseAvgAggregateOutputType | null
    _sum: QuestionResponseSumAggregateOutputType | null
    _min: QuestionResponseMinAggregateOutputType | null
    _max: QuestionResponseMaxAggregateOutputType | null
  }

  type GetQuestionResponseGroupByPayload<T extends QuestionResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionResponseGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionResponseGroupByOutputType[P]>
        }
      >
    >


  export type QuestionResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isOther?: boolean
    textValue?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    questionTitle?: boolean
    questionFormat?: boolean
    optionId?: boolean
    responseId?: boolean
    teamId?: boolean
    option?: boolean | QuestionResponse$optionArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionResponse"]>

  export type QuestionResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isOther?: boolean
    textValue?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    questionTitle?: boolean
    questionFormat?: boolean
    optionId?: boolean
    responseId?: boolean
    teamId?: boolean
    option?: boolean | QuestionResponse$optionArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionResponse"]>

  export type QuestionResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isOther?: boolean
    textValue?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    questionTitle?: boolean
    questionFormat?: boolean
    optionId?: boolean
    responseId?: boolean
    teamId?: boolean
    option?: boolean | QuestionResponse$optionArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionResponse"]>

  export type QuestionResponseSelectScalar = {
    id?: boolean
    isOther?: boolean
    textValue?: boolean
    numberValue?: boolean
    booleanValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    questionId?: boolean
    questionTitle?: boolean
    questionFormat?: boolean
    optionId?: boolean
    responseId?: boolean
    teamId?: boolean
  }

  export type QuestionResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isOther" | "textValue" | "numberValue" | "booleanValue" | "createdAt" | "updatedAt" | "questionId" | "questionTitle" | "questionFormat" | "optionId" | "responseId" | "teamId", ExtArgs["result"]["questionResponse"]>
  export type QuestionResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    option?: boolean | QuestionResponse$optionArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type QuestionResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    option?: boolean | QuestionResponse$optionArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type QuestionResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    option?: boolean | QuestionResponse$optionArgs<ExtArgs>
    question?: boolean | QuestionDefaultArgs<ExtArgs>
    response?: boolean | SurveyResponseDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $QuestionResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionResponse"
    objects: {
      option: Prisma.$QuestionOptionPayload<ExtArgs> | null
      question: Prisma.$QuestionPayload<ExtArgs>
      response: Prisma.$SurveyResponsePayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isOther: boolean | null
      textValue: string | null
      numberValue: number | null
      booleanValue: boolean | null
      createdAt: Date
      updatedAt: Date
      questionId: string
      questionTitle: string | null
      questionFormat: $Enums.QuestionFormat | null
      optionId: string | null
      responseId: string
      teamId: number
    }, ExtArgs["result"]["questionResponse"]>
    composites: {}
  }

  type QuestionResponseGetPayload<S extends boolean | null | undefined | QuestionResponseDefaultArgs> = $Result.GetResult<Prisma.$QuestionResponsePayload, S>

  type QuestionResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionResponseCountAggregateInputType | true
    }

  export interface QuestionResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionResponse'], meta: { name: 'QuestionResponse' } }
    /**
     * Find zero or one QuestionResponse that matches the filter.
     * @param {QuestionResponseFindUniqueArgs} args - Arguments to find a QuestionResponse
     * @example
     * // Get one QuestionResponse
     * const questionResponse = await prisma.questionResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionResponseFindUniqueArgs>(args: SelectSubset<T, QuestionResponseFindUniqueArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionResponseFindUniqueOrThrowArgs} args - Arguments to find a QuestionResponse
     * @example
     * // Get one QuestionResponse
     * const questionResponse = await prisma.questionResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseFindFirstArgs} args - Arguments to find a QuestionResponse
     * @example
     * // Get one QuestionResponse
     * const questionResponse = await prisma.questionResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionResponseFindFirstArgs>(args?: SelectSubset<T, QuestionResponseFindFirstArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseFindFirstOrThrowArgs} args - Arguments to find a QuestionResponse
     * @example
     * // Get one QuestionResponse
     * const questionResponse = await prisma.questionResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionResponses
     * const questionResponses = await prisma.questionResponse.findMany()
     * 
     * // Get first 10 QuestionResponses
     * const questionResponses = await prisma.questionResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionResponseWithIdOnly = await prisma.questionResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionResponseFindManyArgs>(args?: SelectSubset<T, QuestionResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionResponse.
     * @param {QuestionResponseCreateArgs} args - Arguments to create a QuestionResponse.
     * @example
     * // Create one QuestionResponse
     * const QuestionResponse = await prisma.questionResponse.create({
     *   data: {
     *     // ... data to create a QuestionResponse
     *   }
     * })
     * 
     */
    create<T extends QuestionResponseCreateArgs>(args: SelectSubset<T, QuestionResponseCreateArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionResponses.
     * @param {QuestionResponseCreateManyArgs} args - Arguments to create many QuestionResponses.
     * @example
     * // Create many QuestionResponses
     * const questionResponse = await prisma.questionResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionResponseCreateManyArgs>(args?: SelectSubset<T, QuestionResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionResponses and returns the data saved in the database.
     * @param {QuestionResponseCreateManyAndReturnArgs} args - Arguments to create many QuestionResponses.
     * @example
     * // Create many QuestionResponses
     * const questionResponse = await prisma.questionResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionResponses and only return the `id`
     * const questionResponseWithIdOnly = await prisma.questionResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionResponse.
     * @param {QuestionResponseDeleteArgs} args - Arguments to delete one QuestionResponse.
     * @example
     * // Delete one QuestionResponse
     * const QuestionResponse = await prisma.questionResponse.delete({
     *   where: {
     *     // ... filter to delete one QuestionResponse
     *   }
     * })
     * 
     */
    delete<T extends QuestionResponseDeleteArgs>(args: SelectSubset<T, QuestionResponseDeleteArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionResponse.
     * @param {QuestionResponseUpdateArgs} args - Arguments to update one QuestionResponse.
     * @example
     * // Update one QuestionResponse
     * const questionResponse = await prisma.questionResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionResponseUpdateArgs>(args: SelectSubset<T, QuestionResponseUpdateArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionResponses.
     * @param {QuestionResponseDeleteManyArgs} args - Arguments to filter QuestionResponses to delete.
     * @example
     * // Delete a few QuestionResponses
     * const { count } = await prisma.questionResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionResponseDeleteManyArgs>(args?: SelectSubset<T, QuestionResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionResponses
     * const questionResponse = await prisma.questionResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionResponseUpdateManyArgs>(args: SelectSubset<T, QuestionResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionResponses and returns the data updated in the database.
     * @param {QuestionResponseUpdateManyAndReturnArgs} args - Arguments to update many QuestionResponses.
     * @example
     * // Update many QuestionResponses
     * const questionResponse = await prisma.questionResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionResponses and only return the `id`
     * const questionResponseWithIdOnly = await prisma.questionResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionResponse.
     * @param {QuestionResponseUpsertArgs} args - Arguments to update or create a QuestionResponse.
     * @example
     * // Update or create a QuestionResponse
     * const questionResponse = await prisma.questionResponse.upsert({
     *   create: {
     *     // ... data to create a QuestionResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionResponse we want to update
     *   }
     * })
     */
    upsert<T extends QuestionResponseUpsertArgs>(args: SelectSubset<T, QuestionResponseUpsertArgs<ExtArgs>>): Prisma__QuestionResponseClient<$Result.GetResult<Prisma.$QuestionResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseCountArgs} args - Arguments to filter QuestionResponses to count.
     * @example
     * // Count the number of QuestionResponses
     * const count = await prisma.questionResponse.count({
     *   where: {
     *     // ... the filter for the QuestionResponses we want to count
     *   }
     * })
    **/
    count<T extends QuestionResponseCountArgs>(
      args?: Subset<T, QuestionResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionResponseAggregateArgs>(args: Subset<T, QuestionResponseAggregateArgs>): Prisma.PrismaPromise<GetQuestionResponseAggregateType<T>>

    /**
     * Group by QuestionResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionResponseGroupByArgs['orderBy'] }
        : { orderBy?: QuestionResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionResponse model
   */
  readonly fields: QuestionResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    option<T extends QuestionResponse$optionArgs<ExtArgs> = {}>(args?: Subset<T, QuestionResponse$optionArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    response<T extends SurveyResponseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SurveyResponseDefaultArgs<ExtArgs>>): Prisma__SurveyResponseClient<$Result.GetResult<Prisma.$SurveyResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionResponse model
   */
  interface QuestionResponseFieldRefs {
    readonly id: FieldRef<"QuestionResponse", 'String'>
    readonly isOther: FieldRef<"QuestionResponse", 'Boolean'>
    readonly textValue: FieldRef<"QuestionResponse", 'String'>
    readonly numberValue: FieldRef<"QuestionResponse", 'Int'>
    readonly booleanValue: FieldRef<"QuestionResponse", 'Boolean'>
    readonly createdAt: FieldRef<"QuestionResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionResponse", 'DateTime'>
    readonly questionId: FieldRef<"QuestionResponse", 'String'>
    readonly questionTitle: FieldRef<"QuestionResponse", 'String'>
    readonly questionFormat: FieldRef<"QuestionResponse", 'QuestionFormat'>
    readonly optionId: FieldRef<"QuestionResponse", 'String'>
    readonly responseId: FieldRef<"QuestionResponse", 'String'>
    readonly teamId: FieldRef<"QuestionResponse", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * QuestionResponse findUnique
   */
  export type QuestionResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionResponse to fetch.
     */
    where: QuestionResponseWhereUniqueInput
  }

  /**
   * QuestionResponse findUniqueOrThrow
   */
  export type QuestionResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionResponse to fetch.
     */
    where: QuestionResponseWhereUniqueInput
  }

  /**
   * QuestionResponse findFirst
   */
  export type QuestionResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionResponse to fetch.
     */
    where?: QuestionResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionResponses to fetch.
     */
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionResponses.
     */
    cursor?: QuestionResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionResponses.
     */
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * QuestionResponse findFirstOrThrow
   */
  export type QuestionResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionResponse to fetch.
     */
    where?: QuestionResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionResponses to fetch.
     */
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionResponses.
     */
    cursor?: QuestionResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionResponses.
     */
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * QuestionResponse findMany
   */
  export type QuestionResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionResponses to fetch.
     */
    where?: QuestionResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionResponses to fetch.
     */
    orderBy?: QuestionResponseOrderByWithRelationInput | QuestionResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionResponses.
     */
    cursor?: QuestionResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionResponses.
     */
    skip?: number
    distinct?: QuestionResponseScalarFieldEnum | QuestionResponseScalarFieldEnum[]
  }

  /**
   * QuestionResponse create
   */
  export type QuestionResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionResponse.
     */
    data: XOR<QuestionResponseCreateInput, QuestionResponseUncheckedCreateInput>
  }

  /**
   * QuestionResponse createMany
   */
  export type QuestionResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionResponses.
     */
    data: QuestionResponseCreateManyInput | QuestionResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionResponse createManyAndReturn
   */
  export type QuestionResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionResponses.
     */
    data: QuestionResponseCreateManyInput | QuestionResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionResponse update
   */
  export type QuestionResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionResponse.
     */
    data: XOR<QuestionResponseUpdateInput, QuestionResponseUncheckedUpdateInput>
    /**
     * Choose, which QuestionResponse to update.
     */
    where: QuestionResponseWhereUniqueInput
  }

  /**
   * QuestionResponse updateMany
   */
  export type QuestionResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionResponses.
     */
    data: XOR<QuestionResponseUpdateManyMutationInput, QuestionResponseUncheckedUpdateManyInput>
    /**
     * Filter which QuestionResponses to update
     */
    where?: QuestionResponseWhereInput
    /**
     * Limit how many QuestionResponses to update.
     */
    limit?: number
  }

  /**
   * QuestionResponse updateManyAndReturn
   */
  export type QuestionResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * The data used to update QuestionResponses.
     */
    data: XOR<QuestionResponseUpdateManyMutationInput, QuestionResponseUncheckedUpdateManyInput>
    /**
     * Filter which QuestionResponses to update
     */
    where?: QuestionResponseWhereInput
    /**
     * Limit how many QuestionResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionResponse upsert
   */
  export type QuestionResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionResponse to update in case it exists.
     */
    where: QuestionResponseWhereUniqueInput
    /**
     * In case the QuestionResponse found by the `where` argument doesn't exist, create a new QuestionResponse with this data.
     */
    create: XOR<QuestionResponseCreateInput, QuestionResponseUncheckedCreateInput>
    /**
     * In case the QuestionResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionResponseUpdateInput, QuestionResponseUncheckedUpdateInput>
  }

  /**
   * QuestionResponse delete
   */
  export type QuestionResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
    /**
     * Filter which QuestionResponse to delete.
     */
    where: QuestionResponseWhereUniqueInput
  }

  /**
   * QuestionResponse deleteMany
   */
  export type QuestionResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionResponses to delete
     */
    where?: QuestionResponseWhereInput
    /**
     * Limit how many QuestionResponses to delete.
     */
    limit?: number
  }

  /**
   * QuestionResponse.option
   */
  export type QuestionResponse$optionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
  }

  /**
   * QuestionResponse without action
   */
  export type QuestionResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionResponse
     */
    select?: QuestionResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionResponse
     */
    omit?: QuestionResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionResponseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    provider: 'provider',
    password: 'password',
    resetPasswordToken: 'resetPasswordToken',
    confirmationToken: 'confirmationToken',
    confirmed: 'confirmed',
    blocked: 'blocked',
    phone: 'phone',
    firstName: 'firstName',
    lastName: 'lastName',
    avatarUrl: 'avatarUrl',
    language: 'language',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    avatarId: 'avatarId',
    idProvider: 'idProvider',
    resetPasswordExpires: 'resetPasswordExpires',
    theme: 'theme',
    defaultTeamId: 'defaultTeamId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    publicId: 'publicId',
    format: 'format',
    version: 'version',
    mimeType: 'mimeType',
    size: 'size',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ResponseRate: 'ResponseRate',
    totalActiveSurveys: 'totalActiveSurveys',
    totalOpenSurveys: 'totalOpenSurveys',
    totalResponses: 'totalResponses',
    totalSurveys: 'totalSurveys'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamMemberScalarFieldEnum: {
    id: 'id',
    isAdmin: 'isAdmin',
    canPost: 'canPost',
    canApprove: 'canApprove',
    isOwner: 'isOwner',
    teamMemberStatus: 'teamMemberStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    teamId: 'teamId'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const SurveyTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    teamId: 'teamId'
  };

  export type SurveyTypeScalarFieldEnum = (typeof SurveyTypeScalarFieldEnum)[keyof typeof SurveyTypeScalarFieldEnum]


  export const SurveyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    status: 'status',
    allowMultipleResponses: 'allowMultipleResponses',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    teamId: 'teamId',
    typeId: 'typeId',
    ResponseRate: 'ResponseRate',
    totalOpenSurveys: 'totalOpenSurveys',
    totalResponses: 'totalResponses'
  };

  export type SurveyScalarFieldEnum = (typeof SurveyScalarFieldEnum)[keyof typeof SurveyScalarFieldEnum]


  export const SurveyStyleScalarFieldEnum: {
    id: 'id',
    backgroundColor: 'backgroundColor',
    textColor: 'textColor',
    buttonBackgroundColor: 'buttonBackgroundColor',
    buttonTextColor: 'buttonTextColor',
    margin: 'margin',
    padding: 'padding',
    borderRadius: 'borderRadius',
    titleFontSize: 'titleFontSize',
    bodyFontSize: 'bodyFontSize',
    fontFamily: 'fontFamily',
    basicCSS: 'basicCSS',
    styleMode: 'styleMode',
    advancedCSS: 'advancedCSS',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    surveyId: 'surveyId',
    teamId: 'teamId',
    border: 'border'
  };

  export type SurveyStyleScalarFieldEnum = (typeof SurveyStyleScalarFieldEnum)[keyof typeof SurveyStyleScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    format: 'format',
    required: 'required',
    order: 'order',
    yesLabel: 'yesLabel',
    noLabel: 'noLabel',
    buttonLabel: 'buttonLabel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    surveyId: 'surveyId',
    teamId: 'teamId',
    addOther: 'addOther'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuestionOptionScalarFieldEnum: {
    id: 'id',
    text: 'text',
    order: 'order',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    questionId: 'questionId',
    teamId: 'teamId',
    isOther: 'isOther'
  };

  export type QuestionOptionScalarFieldEnum = (typeof QuestionOptionScalarFieldEnum)[keyof typeof QuestionOptionScalarFieldEnum]


  export const SurveyResponseScalarFieldEnum: {
    id: 'id',
    status: 'status',
    userId: 'userId',
    userIp: 'userIp',
    extraInfo: 'extraInfo',
    origin: 'origin',
    expiresAt: 'expiresAt',
    submittedAt: 'submittedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    surveyId: 'surveyId',
    teamId: 'teamId'
  };

  export type SurveyResponseScalarFieldEnum = (typeof SurveyResponseScalarFieldEnum)[keyof typeof SurveyResponseScalarFieldEnum]


  export const SurveyResponseSummaryScalarFieldEnum: {
    id: 'id',
    surveyId: 'surveyId',
    questionId: 'questionId',
    questionTitle: 'questionTitle',
    responseId: 'responseId',
    optionId: 'optionId',
    textValue: 'textValue',
    questionFormat: 'questionFormat',
    isOther: 'isOther',
    numberValue: 'numberValue',
    booleanValue: 'booleanValue',
    teamId: 'teamId',
    responseCount: 'responseCount',
    lastUpdated: 'lastUpdated'
  };

  export type SurveyResponseSummaryScalarFieldEnum = (typeof SurveyResponseSummaryScalarFieldEnum)[keyof typeof SurveyResponseSummaryScalarFieldEnum]


  export const QuestionResponseScalarFieldEnum: {
    id: 'id',
    isOther: 'isOther',
    textValue: 'textValue',
    numberValue: 'numberValue',
    booleanValue: 'booleanValue',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    questionId: 'questionId',
    questionTitle: 'questionTitle',
    questionFormat: 'questionFormat',
    optionId: 'optionId',
    responseId: 'responseId',
    teamId: 'teamId'
  };

  export type QuestionResponseScalarFieldEnum = (typeof QuestionResponseScalarFieldEnum)[keyof typeof QuestionResponseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Provider'
   */
  export type EnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider'>
    


  /**
   * Reference to a field of type 'Provider[]'
   */
  export type ListEnumProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Provider[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Language'
   */
  export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


  /**
   * Reference to a field of type 'Language[]'
   */
  export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Theme'
   */
  export type EnumThemeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Theme'>
    


  /**
   * Reference to a field of type 'Theme[]'
   */
  export type ListEnumThemeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Theme[]'>
    


  /**
   * Reference to a field of type 'TeamMemberStatus'
   */
  export type EnumTeamMemberStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamMemberStatus'>
    


  /**
   * Reference to a field of type 'TeamMemberStatus[]'
   */
  export type ListEnumTeamMemberStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamMemberStatus[]'>
    


  /**
   * Reference to a field of type 'SurveyStatus'
   */
  export type EnumSurveyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SurveyStatus'>
    


  /**
   * Reference to a field of type 'SurveyStatus[]'
   */
  export type ListEnumSurveyStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SurveyStatus[]'>
    


  /**
   * Reference to a field of type 'StyleMode'
   */
  export type EnumStyleModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StyleMode'>
    


  /**
   * Reference to a field of type 'StyleMode[]'
   */
  export type ListEnumStyleModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StyleMode[]'>
    


  /**
   * Reference to a field of type 'QuestionFormat'
   */
  export type EnumQuestionFormatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionFormat'>
    


  /**
   * Reference to a field of type 'QuestionFormat[]'
   */
  export type ListEnumQuestionFormatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionFormat[]'>
    


  /**
   * Reference to a field of type 'ResponseStatus'
   */
  export type EnumResponseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResponseStatus'>
    


  /**
   * Reference to a field of type 'ResponseStatus[]'
   */
  export type ListEnumResponseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResponseStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    provider?: EnumProviderFilter<"User"> | $Enums.Provider
    password?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    confirmationToken?: StringNullableFilter<"User"> | string | null
    confirmed?: BoolNullableFilter<"User"> | boolean | null
    blocked?: BoolNullableFilter<"User"> | boolean | null
    phone?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: EnumLanguageFilter<"User"> | $Enums.Language
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarId?: IntNullableFilter<"User"> | number | null
    idProvider?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    defaultTeamId?: IntNullableFilter<"User"> | number | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    teamMembers?: TeamMemberListRelationFilter
    avatar?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    team?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    confirmationToken?: SortOrderInput | SortOrder
    confirmed?: SortOrderInput | SortOrder
    blocked?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrderInput | SortOrder
    idProvider?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    theme?: SortOrder
    defaultTeamId?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    teamMembers?: TeamMemberOrderByRelationAggregateInput
    avatar?: FileOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    provider?: EnumProviderFilter<"User"> | $Enums.Provider
    password?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    confirmationToken?: StringNullableFilter<"User"> | string | null
    confirmed?: BoolNullableFilter<"User"> | boolean | null
    blocked?: BoolNullableFilter<"User"> | boolean | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: EnumLanguageFilter<"User"> | $Enums.Language
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarId?: IntNullableFilter<"User"> | number | null
    idProvider?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    defaultTeamId?: IntNullableFilter<"User"> | number | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    teamMembers?: TeamMemberListRelationFilter
    avatar?: XOR<FileNullableScalarRelationFilter, FileWhereInput> | null
    team?: XOR<TeamNullableScalarRelationFilter, TeamWhereInput> | null
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    confirmationToken?: SortOrderInput | SortOrder
    confirmed?: SortOrderInput | SortOrder
    blocked?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrderInput | SortOrder
    idProvider?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    theme?: SortOrder
    defaultTeamId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    provider?: EnumProviderWithAggregatesFilter<"User"> | $Enums.Provider
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    confirmationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    confirmed?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    blocked?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    language?: EnumLanguageWithAggregatesFilter<"User"> | $Enums.Language
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    avatarId?: IntNullableWithAggregatesFilter<"User"> | number | null
    idProvider?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    theme?: EnumThemeWithAggregatesFilter<"User"> | $Enums.Theme
    defaultTeamId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: IntFilter<"File"> | number
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    publicId?: StringNullableFilter<"File"> | string | null
    format?: StringNullableFilter<"File"> | string | null
    version?: StringNullableFilter<"File"> | string | null
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    avatarFor?: UserListRelationFilter
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    mimeType?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarFor?: UserOrderByRelationAggregateInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    name?: StringFilter<"File"> | string
    url?: StringFilter<"File"> | string
    publicId?: StringNullableFilter<"File"> | string | null
    format?: StringNullableFilter<"File"> | string | null
    version?: StringNullableFilter<"File"> | string | null
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    avatarFor?: UserListRelationFilter
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrderInput | SortOrder
    format?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    mimeType?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"File"> | number
    name?: StringWithAggregatesFilter<"File"> | string
    url?: StringWithAggregatesFilter<"File"> | string
    publicId?: StringNullableWithAggregatesFilter<"File"> | string | null
    format?: StringNullableWithAggregatesFilter<"File"> | string | null
    version?: StringNullableWithAggregatesFilter<"File"> | string | null
    mimeType?: StringNullableWithAggregatesFilter<"File"> | string | null
    size?: IntNullableWithAggregatesFilter<"File"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: IntWithAggregatesFilter<"Account"> | number
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    token?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    ResponseRate?: IntFilter<"Team"> | number
    totalActiveSurveys?: IntFilter<"Team"> | number
    totalOpenSurveys?: IntFilter<"Team"> | number
    totalResponses?: IntFilter<"Team"> | number
    totalSurveys?: IntFilter<"Team"> | number
    questionOptions?: QuestionOptionListRelationFilter
    questionResponses?: QuestionResponseListRelationFilter
    questions?: QuestionListRelationFilter
    surveyResponses?: SurveyResponseListRelationFilter
    surveysStyle?: SurveyStyleListRelationFilter
    surveyTypes?: SurveyTypeListRelationFilter
    surveys?: SurveyListRelationFilter
    members?: TeamMemberListRelationFilter
    user?: UserListRelationFilter
    responseSummaries?: SurveyResponseSummaryListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
    questionOptions?: QuestionOptionOrderByRelationAggregateInput
    questionResponses?: QuestionResponseOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
    surveyResponses?: SurveyResponseOrderByRelationAggregateInput
    surveysStyle?: SurveyStyleOrderByRelationAggregateInput
    surveyTypes?: SurveyTypeOrderByRelationAggregateInput
    surveys?: SurveyOrderByRelationAggregateInput
    members?: TeamMemberOrderByRelationAggregateInput
    user?: UserOrderByRelationAggregateInput
    responseSummaries?: SurveyResponseSummaryOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    token?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    ResponseRate?: IntFilter<"Team"> | number
    totalActiveSurveys?: IntFilter<"Team"> | number
    totalOpenSurveys?: IntFilter<"Team"> | number
    totalResponses?: IntFilter<"Team"> | number
    totalSurveys?: IntFilter<"Team"> | number
    questionOptions?: QuestionOptionListRelationFilter
    questionResponses?: QuestionResponseListRelationFilter
    questions?: QuestionListRelationFilter
    surveyResponses?: SurveyResponseListRelationFilter
    surveysStyle?: SurveyStyleListRelationFilter
    surveyTypes?: SurveyTypeListRelationFilter
    surveys?: SurveyListRelationFilter
    members?: TeamMemberListRelationFilter
    user?: UserListRelationFilter
    responseSummaries?: SurveyResponseSummaryListRelationFilter
  }, "id" | "token">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    token?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    name?: StringWithAggregatesFilter<"Team"> | string
    description?: StringNullableWithAggregatesFilter<"Team"> | string | null
    token?: StringNullableWithAggregatesFilter<"Team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    ResponseRate?: IntWithAggregatesFilter<"Team"> | number
    totalActiveSurveys?: IntWithAggregatesFilter<"Team"> | number
    totalOpenSurveys?: IntWithAggregatesFilter<"Team"> | number
    totalResponses?: IntWithAggregatesFilter<"Team"> | number
    totalSurveys?: IntWithAggregatesFilter<"Team"> | number
  }

  export type TeamMemberWhereInput = {
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    id?: IntFilter<"TeamMember"> | number
    isAdmin?: BoolFilter<"TeamMember"> | boolean
    canPost?: BoolFilter<"TeamMember"> | boolean
    canApprove?: BoolFilter<"TeamMember"> | boolean
    isOwner?: BoolFilter<"TeamMember"> | boolean
    teamMemberStatus?: EnumTeamMemberStatusFilter<"TeamMember"> | $Enums.TeamMemberStatus
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeFilter<"TeamMember"> | Date | string
    userId?: IntFilter<"TeamMember"> | number
    teamId?: IntFilter<"TeamMember"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TeamMemberOrderByWithRelationInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    teamMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_teamId?: TeamMemberUserIdTeamIdCompoundUniqueInput
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    isAdmin?: BoolFilter<"TeamMember"> | boolean
    canPost?: BoolFilter<"TeamMember"> | boolean
    canApprove?: BoolFilter<"TeamMember"> | boolean
    isOwner?: BoolFilter<"TeamMember"> | boolean
    teamMemberStatus?: EnumTeamMemberStatusFilter<"TeamMember"> | $Enums.TeamMemberStatus
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeFilter<"TeamMember"> | Date | string
    userId?: IntFilter<"TeamMember"> | number
    teamId?: IntFilter<"TeamMember"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_teamId">

  export type TeamMemberOrderByWithAggregationInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    teamMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _avg?: TeamMemberAvgOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
    _sum?: TeamMemberSumOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    OR?: TeamMemberScalarWhereWithAggregatesInput[]
    NOT?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TeamMember"> | number
    isAdmin?: BoolWithAggregatesFilter<"TeamMember"> | boolean
    canPost?: BoolWithAggregatesFilter<"TeamMember"> | boolean
    canApprove?: BoolWithAggregatesFilter<"TeamMember"> | boolean
    isOwner?: BoolWithAggregatesFilter<"TeamMember"> | boolean
    teamMemberStatus?: EnumTeamMemberStatusWithAggregatesFilter<"TeamMember"> | $Enums.TeamMemberStatus
    createdAt?: DateTimeWithAggregatesFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeamMember"> | Date | string
    userId?: IntWithAggregatesFilter<"TeamMember"> | number
    teamId?: IntWithAggregatesFilter<"TeamMember"> | number
  }

  export type SurveyTypeWhereInput = {
    AND?: SurveyTypeWhereInput | SurveyTypeWhereInput[]
    OR?: SurveyTypeWhereInput[]
    NOT?: SurveyTypeWhereInput | SurveyTypeWhereInput[]
    id?: StringFilter<"SurveyType"> | string
    name?: StringFilter<"SurveyType"> | string
    isDefault?: BoolFilter<"SurveyType"> | boolean
    createdAt?: DateTimeFilter<"SurveyType"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyType"> | Date | string
    teamId?: IntFilter<"SurveyType"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    surveys?: SurveyListRelationFilter
  }

  export type SurveyTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    surveys?: SurveyOrderByRelationAggregateInput
  }

  export type SurveyTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SurveyTypeWhereInput | SurveyTypeWhereInput[]
    OR?: SurveyTypeWhereInput[]
    NOT?: SurveyTypeWhereInput | SurveyTypeWhereInput[]
    name?: StringFilter<"SurveyType"> | string
    isDefault?: BoolFilter<"SurveyType"> | boolean
    createdAt?: DateTimeFilter<"SurveyType"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyType"> | Date | string
    teamId?: IntFilter<"SurveyType"> | number
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    surveys?: SurveyListRelationFilter
  }, "id">

  export type SurveyTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    _count?: SurveyTypeCountOrderByAggregateInput
    _avg?: SurveyTypeAvgOrderByAggregateInput
    _max?: SurveyTypeMaxOrderByAggregateInput
    _min?: SurveyTypeMinOrderByAggregateInput
    _sum?: SurveyTypeSumOrderByAggregateInput
  }

  export type SurveyTypeScalarWhereWithAggregatesInput = {
    AND?: SurveyTypeScalarWhereWithAggregatesInput | SurveyTypeScalarWhereWithAggregatesInput[]
    OR?: SurveyTypeScalarWhereWithAggregatesInput[]
    NOT?: SurveyTypeScalarWhereWithAggregatesInput | SurveyTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SurveyType"> | string
    name?: StringWithAggregatesFilter<"SurveyType"> | string
    isDefault?: BoolWithAggregatesFilter<"SurveyType"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SurveyType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SurveyType"> | Date | string
    teamId?: IntWithAggregatesFilter<"SurveyType"> | number
  }

  export type SurveyWhereInput = {
    AND?: SurveyWhereInput | SurveyWhereInput[]
    OR?: SurveyWhereInput[]
    NOT?: SurveyWhereInput | SurveyWhereInput[]
    id?: StringFilter<"Survey"> | string
    name?: StringFilter<"Survey"> | string
    description?: StringNullableFilter<"Survey"> | string | null
    status?: EnumSurveyStatusFilter<"Survey"> | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFilter<"Survey"> | boolean
    createdAt?: DateTimeFilter<"Survey"> | Date | string
    updatedAt?: DateTimeFilter<"Survey"> | Date | string
    teamId?: IntFilter<"Survey"> | number
    typeId?: StringNullableFilter<"Survey"> | string | null
    ResponseRate?: IntFilter<"Survey"> | number
    totalOpenSurveys?: IntFilter<"Survey"> | number
    totalResponses?: IntFilter<"Survey"> | number
    questions?: QuestionListRelationFilter
    responses?: SurveyResponseListRelationFilter
    style?: XOR<SurveyStyleNullableScalarRelationFilter, SurveyStyleWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    type?: XOR<SurveyTypeNullableScalarRelationFilter, SurveyTypeWhereInput> | null
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }

  export type SurveyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    allowMultipleResponses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrderInput | SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    questions?: QuestionOrderByRelationAggregateInput
    responses?: SurveyResponseOrderByRelationAggregateInput
    style?: SurveyStyleOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    type?: SurveyTypeOrderByWithRelationInput
    SurveyResponseSummary?: SurveyResponseSummaryOrderByRelationAggregateInput
  }

  export type SurveyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SurveyWhereInput | SurveyWhereInput[]
    OR?: SurveyWhereInput[]
    NOT?: SurveyWhereInput | SurveyWhereInput[]
    name?: StringFilter<"Survey"> | string
    description?: StringNullableFilter<"Survey"> | string | null
    status?: EnumSurveyStatusFilter<"Survey"> | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFilter<"Survey"> | boolean
    createdAt?: DateTimeFilter<"Survey"> | Date | string
    updatedAt?: DateTimeFilter<"Survey"> | Date | string
    teamId?: IntFilter<"Survey"> | number
    typeId?: StringNullableFilter<"Survey"> | string | null
    ResponseRate?: IntFilter<"Survey"> | number
    totalOpenSurveys?: IntFilter<"Survey"> | number
    totalResponses?: IntFilter<"Survey"> | number
    questions?: QuestionListRelationFilter
    responses?: SurveyResponseListRelationFilter
    style?: XOR<SurveyStyleNullableScalarRelationFilter, SurveyStyleWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    type?: XOR<SurveyTypeNullableScalarRelationFilter, SurveyTypeWhereInput> | null
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }, "id">

  export type SurveyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    allowMultipleResponses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrderInput | SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    _count?: SurveyCountOrderByAggregateInput
    _avg?: SurveyAvgOrderByAggregateInput
    _max?: SurveyMaxOrderByAggregateInput
    _min?: SurveyMinOrderByAggregateInput
    _sum?: SurveySumOrderByAggregateInput
  }

  export type SurveyScalarWhereWithAggregatesInput = {
    AND?: SurveyScalarWhereWithAggregatesInput | SurveyScalarWhereWithAggregatesInput[]
    OR?: SurveyScalarWhereWithAggregatesInput[]
    NOT?: SurveyScalarWhereWithAggregatesInput | SurveyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Survey"> | string
    name?: StringWithAggregatesFilter<"Survey"> | string
    description?: StringNullableWithAggregatesFilter<"Survey"> | string | null
    status?: EnumSurveyStatusWithAggregatesFilter<"Survey"> | $Enums.SurveyStatus
    allowMultipleResponses?: BoolWithAggregatesFilter<"Survey"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Survey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Survey"> | Date | string
    teamId?: IntWithAggregatesFilter<"Survey"> | number
    typeId?: StringNullableWithAggregatesFilter<"Survey"> | string | null
    ResponseRate?: IntWithAggregatesFilter<"Survey"> | number
    totalOpenSurveys?: IntWithAggregatesFilter<"Survey"> | number
    totalResponses?: IntWithAggregatesFilter<"Survey"> | number
  }

  export type SurveyStyleWhereInput = {
    AND?: SurveyStyleWhereInput | SurveyStyleWhereInput[]
    OR?: SurveyStyleWhereInput[]
    NOT?: SurveyStyleWhereInput | SurveyStyleWhereInput[]
    id?: StringFilter<"SurveyStyle"> | string
    backgroundColor?: StringFilter<"SurveyStyle"> | string
    textColor?: StringFilter<"SurveyStyle"> | string
    buttonBackgroundColor?: StringFilter<"SurveyStyle"> | string
    buttonTextColor?: StringFilter<"SurveyStyle"> | string
    margin?: StringFilter<"SurveyStyle"> | string
    padding?: StringFilter<"SurveyStyle"> | string
    borderRadius?: StringFilter<"SurveyStyle"> | string
    titleFontSize?: StringFilter<"SurveyStyle"> | string
    bodyFontSize?: StringFilter<"SurveyStyle"> | string
    fontFamily?: StringFilter<"SurveyStyle"> | string
    basicCSS?: StringFilter<"SurveyStyle"> | string
    styleMode?: EnumStyleModeFilter<"SurveyStyle"> | $Enums.StyleMode
    advancedCSS?: StringNullableFilter<"SurveyStyle"> | string | null
    createdAt?: DateTimeFilter<"SurveyStyle"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyStyle"> | Date | string
    surveyId?: StringFilter<"SurveyStyle"> | string
    teamId?: IntFilter<"SurveyStyle"> | number
    border?: StringFilter<"SurveyStyle"> | string
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type SurveyStyleOrderByWithRelationInput = {
    id?: SortOrder
    backgroundColor?: SortOrder
    textColor?: SortOrder
    buttonBackgroundColor?: SortOrder
    buttonTextColor?: SortOrder
    margin?: SortOrder
    padding?: SortOrder
    borderRadius?: SortOrder
    titleFontSize?: SortOrder
    bodyFontSize?: SortOrder
    fontFamily?: SortOrder
    basicCSS?: SortOrder
    styleMode?: SortOrder
    advancedCSS?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    border?: SortOrder
    survey?: SurveyOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type SurveyStyleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    surveyId?: string
    AND?: SurveyStyleWhereInput | SurveyStyleWhereInput[]
    OR?: SurveyStyleWhereInput[]
    NOT?: SurveyStyleWhereInput | SurveyStyleWhereInput[]
    backgroundColor?: StringFilter<"SurveyStyle"> | string
    textColor?: StringFilter<"SurveyStyle"> | string
    buttonBackgroundColor?: StringFilter<"SurveyStyle"> | string
    buttonTextColor?: StringFilter<"SurveyStyle"> | string
    margin?: StringFilter<"SurveyStyle"> | string
    padding?: StringFilter<"SurveyStyle"> | string
    borderRadius?: StringFilter<"SurveyStyle"> | string
    titleFontSize?: StringFilter<"SurveyStyle"> | string
    bodyFontSize?: StringFilter<"SurveyStyle"> | string
    fontFamily?: StringFilter<"SurveyStyle"> | string
    basicCSS?: StringFilter<"SurveyStyle"> | string
    styleMode?: EnumStyleModeFilter<"SurveyStyle"> | $Enums.StyleMode
    advancedCSS?: StringNullableFilter<"SurveyStyle"> | string | null
    createdAt?: DateTimeFilter<"SurveyStyle"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyStyle"> | Date | string
    teamId?: IntFilter<"SurveyStyle"> | number
    border?: StringFilter<"SurveyStyle"> | string
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id" | "surveyId">

  export type SurveyStyleOrderByWithAggregationInput = {
    id?: SortOrder
    backgroundColor?: SortOrder
    textColor?: SortOrder
    buttonBackgroundColor?: SortOrder
    buttonTextColor?: SortOrder
    margin?: SortOrder
    padding?: SortOrder
    borderRadius?: SortOrder
    titleFontSize?: SortOrder
    bodyFontSize?: SortOrder
    fontFamily?: SortOrder
    basicCSS?: SortOrder
    styleMode?: SortOrder
    advancedCSS?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    border?: SortOrder
    _count?: SurveyStyleCountOrderByAggregateInput
    _avg?: SurveyStyleAvgOrderByAggregateInput
    _max?: SurveyStyleMaxOrderByAggregateInput
    _min?: SurveyStyleMinOrderByAggregateInput
    _sum?: SurveyStyleSumOrderByAggregateInput
  }

  export type SurveyStyleScalarWhereWithAggregatesInput = {
    AND?: SurveyStyleScalarWhereWithAggregatesInput | SurveyStyleScalarWhereWithAggregatesInput[]
    OR?: SurveyStyleScalarWhereWithAggregatesInput[]
    NOT?: SurveyStyleScalarWhereWithAggregatesInput | SurveyStyleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SurveyStyle"> | string
    backgroundColor?: StringWithAggregatesFilter<"SurveyStyle"> | string
    textColor?: StringWithAggregatesFilter<"SurveyStyle"> | string
    buttonBackgroundColor?: StringWithAggregatesFilter<"SurveyStyle"> | string
    buttonTextColor?: StringWithAggregatesFilter<"SurveyStyle"> | string
    margin?: StringWithAggregatesFilter<"SurveyStyle"> | string
    padding?: StringWithAggregatesFilter<"SurveyStyle"> | string
    borderRadius?: StringWithAggregatesFilter<"SurveyStyle"> | string
    titleFontSize?: StringWithAggregatesFilter<"SurveyStyle"> | string
    bodyFontSize?: StringWithAggregatesFilter<"SurveyStyle"> | string
    fontFamily?: StringWithAggregatesFilter<"SurveyStyle"> | string
    basicCSS?: StringWithAggregatesFilter<"SurveyStyle"> | string
    styleMode?: EnumStyleModeWithAggregatesFilter<"SurveyStyle"> | $Enums.StyleMode
    advancedCSS?: StringNullableWithAggregatesFilter<"SurveyStyle"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SurveyStyle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SurveyStyle"> | Date | string
    surveyId?: StringWithAggregatesFilter<"SurveyStyle"> | string
    teamId?: IntWithAggregatesFilter<"SurveyStyle"> | number
    border?: StringWithAggregatesFilter<"SurveyStyle"> | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    description?: StringNullableFilter<"Question"> | string | null
    format?: EnumQuestionFormatFilter<"Question"> | $Enums.QuestionFormat
    required?: BoolFilter<"Question"> | boolean
    order?: IntFilter<"Question"> | number
    yesLabel?: StringNullableFilter<"Question"> | string | null
    noLabel?: StringNullableFilter<"Question"> | string | null
    buttonLabel?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    surveyId?: StringFilter<"Question"> | string
    teamId?: IntFilter<"Question"> | number
    addOther?: BoolFilter<"Question"> | boolean
    options?: QuestionOptionListRelationFilter
    responses?: QuestionResponseListRelationFilter
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    format?: SortOrder
    required?: SortOrder
    order?: SortOrder
    yesLabel?: SortOrderInput | SortOrder
    noLabel?: SortOrderInput | SortOrder
    buttonLabel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    addOther?: SortOrder
    options?: QuestionOptionOrderByRelationAggregateInput
    responses?: QuestionResponseOrderByRelationAggregateInput
    survey?: SurveyOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    SurveyResponseSummary?: SurveyResponseSummaryOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    title?: StringFilter<"Question"> | string
    description?: StringNullableFilter<"Question"> | string | null
    format?: EnumQuestionFormatFilter<"Question"> | $Enums.QuestionFormat
    required?: BoolFilter<"Question"> | boolean
    order?: IntFilter<"Question"> | number
    yesLabel?: StringNullableFilter<"Question"> | string | null
    noLabel?: StringNullableFilter<"Question"> | string | null
    buttonLabel?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    surveyId?: StringFilter<"Question"> | string
    teamId?: IntFilter<"Question"> | number
    addOther?: BoolFilter<"Question"> | boolean
    options?: QuestionOptionListRelationFilter
    responses?: QuestionResponseListRelationFilter
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    format?: SortOrder
    required?: SortOrder
    order?: SortOrder
    yesLabel?: SortOrderInput | SortOrder
    noLabel?: SortOrderInput | SortOrder
    buttonLabel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    addOther?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    title?: StringWithAggregatesFilter<"Question"> | string
    description?: StringNullableWithAggregatesFilter<"Question"> | string | null
    format?: EnumQuestionFormatWithAggregatesFilter<"Question"> | $Enums.QuestionFormat
    required?: BoolWithAggregatesFilter<"Question"> | boolean
    order?: IntWithAggregatesFilter<"Question"> | number
    yesLabel?: StringNullableWithAggregatesFilter<"Question"> | string | null
    noLabel?: StringNullableWithAggregatesFilter<"Question"> | string | null
    buttonLabel?: StringNullableWithAggregatesFilter<"Question"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    surveyId?: StringWithAggregatesFilter<"Question"> | string
    teamId?: IntWithAggregatesFilter<"Question"> | number
    addOther?: BoolWithAggregatesFilter<"Question"> | boolean
  }

  export type QuestionOptionWhereInput = {
    AND?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    OR?: QuestionOptionWhereInput[]
    NOT?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    id?: StringFilter<"QuestionOption"> | string
    text?: StringFilter<"QuestionOption"> | string
    order?: IntFilter<"QuestionOption"> | number
    createdAt?: DateTimeFilter<"QuestionOption"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionOption"> | Date | string
    questionId?: StringFilter<"QuestionOption"> | string
    teamId?: IntFilter<"QuestionOption"> | number
    isOther?: BoolFilter<"QuestionOption"> | boolean
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    responses?: QuestionResponseListRelationFilter
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }

  export type QuestionOptionOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    teamId?: SortOrder
    isOther?: SortOrder
    question?: QuestionOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    responses?: QuestionResponseOrderByRelationAggregateInput
    SurveyResponseSummary?: SurveyResponseSummaryOrderByRelationAggregateInput
  }

  export type QuestionOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    OR?: QuestionOptionWhereInput[]
    NOT?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    text?: StringFilter<"QuestionOption"> | string
    order?: IntFilter<"QuestionOption"> | number
    createdAt?: DateTimeFilter<"QuestionOption"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionOption"> | Date | string
    questionId?: StringFilter<"QuestionOption"> | string
    teamId?: IntFilter<"QuestionOption"> | number
    isOther?: BoolFilter<"QuestionOption"> | boolean
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    responses?: QuestionResponseListRelationFilter
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }, "id">

  export type QuestionOptionOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    teamId?: SortOrder
    isOther?: SortOrder
    _count?: QuestionOptionCountOrderByAggregateInput
    _avg?: QuestionOptionAvgOrderByAggregateInput
    _max?: QuestionOptionMaxOrderByAggregateInput
    _min?: QuestionOptionMinOrderByAggregateInput
    _sum?: QuestionOptionSumOrderByAggregateInput
  }

  export type QuestionOptionScalarWhereWithAggregatesInput = {
    AND?: QuestionOptionScalarWhereWithAggregatesInput | QuestionOptionScalarWhereWithAggregatesInput[]
    OR?: QuestionOptionScalarWhereWithAggregatesInput[]
    NOT?: QuestionOptionScalarWhereWithAggregatesInput | QuestionOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionOption"> | string
    text?: StringWithAggregatesFilter<"QuestionOption"> | string
    order?: IntWithAggregatesFilter<"QuestionOption"> | number
    createdAt?: DateTimeWithAggregatesFilter<"QuestionOption"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionOption"> | Date | string
    questionId?: StringWithAggregatesFilter<"QuestionOption"> | string
    teamId?: IntWithAggregatesFilter<"QuestionOption"> | number
    isOther?: BoolWithAggregatesFilter<"QuestionOption"> | boolean
  }

  export type SurveyResponseWhereInput = {
    AND?: SurveyResponseWhereInput | SurveyResponseWhereInput[]
    OR?: SurveyResponseWhereInput[]
    NOT?: SurveyResponseWhereInput | SurveyResponseWhereInput[]
    id?: StringFilter<"SurveyResponse"> | string
    status?: EnumResponseStatusFilter<"SurveyResponse"> | $Enums.ResponseStatus
    userId?: StringNullableFilter<"SurveyResponse"> | string | null
    userIp?: StringNullableFilter<"SurveyResponse"> | string | null
    extraInfo?: StringNullableFilter<"SurveyResponse"> | string | null
    origin?: StringNullableFilter<"SurveyResponse"> | string | null
    expiresAt?: DateTimeNullableFilter<"SurveyResponse"> | Date | string | null
    submittedAt?: DateTimeNullableFilter<"SurveyResponse"> | Date | string | null
    createdAt?: DateTimeFilter<"SurveyResponse"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyResponse"> | Date | string
    surveyId?: StringFilter<"SurveyResponse"> | string
    teamId?: IntFilter<"SurveyResponse"> | number
    questionResponses?: QuestionResponseListRelationFilter
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }

  export type SurveyResponseOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrderInput | SortOrder
    userIp?: SortOrderInput | SortOrder
    extraInfo?: SortOrderInput | SortOrder
    origin?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    questionResponses?: QuestionResponseOrderByRelationAggregateInput
    survey?: SurveyOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    SurveyResponseSummary?: SurveyResponseSummaryOrderByRelationAggregateInput
  }

  export type SurveyResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SurveyResponseWhereInput | SurveyResponseWhereInput[]
    OR?: SurveyResponseWhereInput[]
    NOT?: SurveyResponseWhereInput | SurveyResponseWhereInput[]
    status?: EnumResponseStatusFilter<"SurveyResponse"> | $Enums.ResponseStatus
    userId?: StringNullableFilter<"SurveyResponse"> | string | null
    userIp?: StringNullableFilter<"SurveyResponse"> | string | null
    extraInfo?: StringNullableFilter<"SurveyResponse"> | string | null
    origin?: StringNullableFilter<"SurveyResponse"> | string | null
    expiresAt?: DateTimeNullableFilter<"SurveyResponse"> | Date | string | null
    submittedAt?: DateTimeNullableFilter<"SurveyResponse"> | Date | string | null
    createdAt?: DateTimeFilter<"SurveyResponse"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyResponse"> | Date | string
    surveyId?: StringFilter<"SurveyResponse"> | string
    teamId?: IntFilter<"SurveyResponse"> | number
    questionResponses?: QuestionResponseListRelationFilter
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    SurveyResponseSummary?: SurveyResponseSummaryListRelationFilter
  }, "id">

  export type SurveyResponseOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrderInput | SortOrder
    userIp?: SortOrderInput | SortOrder
    extraInfo?: SortOrderInput | SortOrder
    origin?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    _count?: SurveyResponseCountOrderByAggregateInput
    _avg?: SurveyResponseAvgOrderByAggregateInput
    _max?: SurveyResponseMaxOrderByAggregateInput
    _min?: SurveyResponseMinOrderByAggregateInput
    _sum?: SurveyResponseSumOrderByAggregateInput
  }

  export type SurveyResponseScalarWhereWithAggregatesInput = {
    AND?: SurveyResponseScalarWhereWithAggregatesInput | SurveyResponseScalarWhereWithAggregatesInput[]
    OR?: SurveyResponseScalarWhereWithAggregatesInput[]
    NOT?: SurveyResponseScalarWhereWithAggregatesInput | SurveyResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SurveyResponse"> | string
    status?: EnumResponseStatusWithAggregatesFilter<"SurveyResponse"> | $Enums.ResponseStatus
    userId?: StringNullableWithAggregatesFilter<"SurveyResponse"> | string | null
    userIp?: StringNullableWithAggregatesFilter<"SurveyResponse"> | string | null
    extraInfo?: StringNullableWithAggregatesFilter<"SurveyResponse"> | string | null
    origin?: StringNullableWithAggregatesFilter<"SurveyResponse"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"SurveyResponse"> | Date | string | null
    submittedAt?: DateTimeNullableWithAggregatesFilter<"SurveyResponse"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SurveyResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SurveyResponse"> | Date | string
    surveyId?: StringWithAggregatesFilter<"SurveyResponse"> | string
    teamId?: IntWithAggregatesFilter<"SurveyResponse"> | number
  }

  export type SurveyResponseSummaryWhereInput = {
    AND?: SurveyResponseSummaryWhereInput | SurveyResponseSummaryWhereInput[]
    OR?: SurveyResponseSummaryWhereInput[]
    NOT?: SurveyResponseSummaryWhereInput | SurveyResponseSummaryWhereInput[]
    id?: StringFilter<"SurveyResponseSummary"> | string
    surveyId?: StringFilter<"SurveyResponseSummary"> | string
    questionId?: StringFilter<"SurveyResponseSummary"> | string
    questionTitle?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    responseId?: StringFilter<"SurveyResponseSummary"> | string
    optionId?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    textValue?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    questionFormat?: EnumQuestionFormatNullableFilter<"SurveyResponseSummary"> | $Enums.QuestionFormat | null
    isOther?: BoolNullableFilter<"SurveyResponseSummary"> | boolean | null
    numberValue?: IntNullableFilter<"SurveyResponseSummary"> | number | null
    booleanValue?: BoolNullableFilter<"SurveyResponseSummary"> | boolean | null
    teamId?: IntFilter<"SurveyResponseSummary"> | number
    responseCount?: IntFilter<"SurveyResponseSummary"> | number
    lastUpdated?: DateTimeFilter<"SurveyResponseSummary"> | Date | string
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    option?: XOR<QuestionOptionNullableScalarRelationFilter, QuestionOptionWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    response?: XOR<SurveyResponseScalarRelationFilter, SurveyResponseWhereInput>
  }

  export type SurveyResponseSummaryOrderByWithRelationInput = {
    id?: SortOrder
    surveyId?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrderInput | SortOrder
    responseId?: SortOrder
    optionId?: SortOrderInput | SortOrder
    textValue?: SortOrderInput | SortOrder
    questionFormat?: SortOrderInput | SortOrder
    isOther?: SortOrderInput | SortOrder
    numberValue?: SortOrderInput | SortOrder
    booleanValue?: SortOrderInput | SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
    lastUpdated?: SortOrder
    survey?: SurveyOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
    option?: QuestionOptionOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
    response?: SurveyResponseOrderByWithRelationInput
  }

  export type SurveyResponseSummaryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    surveyId_questionId_optionId_teamId?: SurveyResponseSummarySurveyIdQuestionIdOptionIdTeamIdCompoundUniqueInput
    surveyId_questionId_numberValue_teamId?: SurveyResponseSummarySurveyIdQuestionIdNumberValueTeamIdCompoundUniqueInput
    surveyId_questionId_booleanValue_teamId?: SurveyResponseSummarySurveyIdQuestionIdBooleanValueTeamIdCompoundUniqueInput
    AND?: SurveyResponseSummaryWhereInput | SurveyResponseSummaryWhereInput[]
    OR?: SurveyResponseSummaryWhereInput[]
    NOT?: SurveyResponseSummaryWhereInput | SurveyResponseSummaryWhereInput[]
    surveyId?: StringFilter<"SurveyResponseSummary"> | string
    questionId?: StringFilter<"SurveyResponseSummary"> | string
    questionTitle?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    responseId?: StringFilter<"SurveyResponseSummary"> | string
    optionId?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    textValue?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    questionFormat?: EnumQuestionFormatNullableFilter<"SurveyResponseSummary"> | $Enums.QuestionFormat | null
    isOther?: BoolNullableFilter<"SurveyResponseSummary"> | boolean | null
    numberValue?: IntNullableFilter<"SurveyResponseSummary"> | number | null
    booleanValue?: BoolNullableFilter<"SurveyResponseSummary"> | boolean | null
    teamId?: IntFilter<"SurveyResponseSummary"> | number
    responseCount?: IntFilter<"SurveyResponseSummary"> | number
    lastUpdated?: DateTimeFilter<"SurveyResponseSummary"> | Date | string
    survey?: XOR<SurveyScalarRelationFilter, SurveyWhereInput>
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    option?: XOR<QuestionOptionNullableScalarRelationFilter, QuestionOptionWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    response?: XOR<SurveyResponseScalarRelationFilter, SurveyResponseWhereInput>
  }, "id" | "surveyId_questionId_optionId_teamId" | "surveyId_questionId_numberValue_teamId" | "surveyId_questionId_booleanValue_teamId">

  export type SurveyResponseSummaryOrderByWithAggregationInput = {
    id?: SortOrder
    surveyId?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrderInput | SortOrder
    responseId?: SortOrder
    optionId?: SortOrderInput | SortOrder
    textValue?: SortOrderInput | SortOrder
    questionFormat?: SortOrderInput | SortOrder
    isOther?: SortOrderInput | SortOrder
    numberValue?: SortOrderInput | SortOrder
    booleanValue?: SortOrderInput | SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
    lastUpdated?: SortOrder
    _count?: SurveyResponseSummaryCountOrderByAggregateInput
    _avg?: SurveyResponseSummaryAvgOrderByAggregateInput
    _max?: SurveyResponseSummaryMaxOrderByAggregateInput
    _min?: SurveyResponseSummaryMinOrderByAggregateInput
    _sum?: SurveyResponseSummarySumOrderByAggregateInput
  }

  export type SurveyResponseSummaryScalarWhereWithAggregatesInput = {
    AND?: SurveyResponseSummaryScalarWhereWithAggregatesInput | SurveyResponseSummaryScalarWhereWithAggregatesInput[]
    OR?: SurveyResponseSummaryScalarWhereWithAggregatesInput[]
    NOT?: SurveyResponseSummaryScalarWhereWithAggregatesInput | SurveyResponseSummaryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SurveyResponseSummary"> | string
    surveyId?: StringWithAggregatesFilter<"SurveyResponseSummary"> | string
    questionId?: StringWithAggregatesFilter<"SurveyResponseSummary"> | string
    questionTitle?: StringNullableWithAggregatesFilter<"SurveyResponseSummary"> | string | null
    responseId?: StringWithAggregatesFilter<"SurveyResponseSummary"> | string
    optionId?: StringNullableWithAggregatesFilter<"SurveyResponseSummary"> | string | null
    textValue?: StringNullableWithAggregatesFilter<"SurveyResponseSummary"> | string | null
    questionFormat?: EnumQuestionFormatNullableWithAggregatesFilter<"SurveyResponseSummary"> | $Enums.QuestionFormat | null
    isOther?: BoolNullableWithAggregatesFilter<"SurveyResponseSummary"> | boolean | null
    numberValue?: IntNullableWithAggregatesFilter<"SurveyResponseSummary"> | number | null
    booleanValue?: BoolNullableWithAggregatesFilter<"SurveyResponseSummary"> | boolean | null
    teamId?: IntWithAggregatesFilter<"SurveyResponseSummary"> | number
    responseCount?: IntWithAggregatesFilter<"SurveyResponseSummary"> | number
    lastUpdated?: DateTimeWithAggregatesFilter<"SurveyResponseSummary"> | Date | string
  }

  export type QuestionResponseWhereInput = {
    AND?: QuestionResponseWhereInput | QuestionResponseWhereInput[]
    OR?: QuestionResponseWhereInput[]
    NOT?: QuestionResponseWhereInput | QuestionResponseWhereInput[]
    id?: StringFilter<"QuestionResponse"> | string
    isOther?: BoolNullableFilter<"QuestionResponse"> | boolean | null
    textValue?: StringNullableFilter<"QuestionResponse"> | string | null
    numberValue?: IntNullableFilter<"QuestionResponse"> | number | null
    booleanValue?: BoolNullableFilter<"QuestionResponse"> | boolean | null
    createdAt?: DateTimeFilter<"QuestionResponse"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionResponse"> | Date | string
    questionId?: StringFilter<"QuestionResponse"> | string
    questionTitle?: StringNullableFilter<"QuestionResponse"> | string | null
    questionFormat?: EnumQuestionFormatNullableFilter<"QuestionResponse"> | $Enums.QuestionFormat | null
    optionId?: StringNullableFilter<"QuestionResponse"> | string | null
    responseId?: StringFilter<"QuestionResponse"> | string
    teamId?: IntFilter<"QuestionResponse"> | number
    option?: XOR<QuestionOptionNullableScalarRelationFilter, QuestionOptionWhereInput> | null
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    response?: XOR<SurveyResponseScalarRelationFilter, SurveyResponseWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type QuestionResponseOrderByWithRelationInput = {
    id?: SortOrder
    isOther?: SortOrderInput | SortOrder
    textValue?: SortOrderInput | SortOrder
    numberValue?: SortOrderInput | SortOrder
    booleanValue?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrderInput | SortOrder
    questionFormat?: SortOrderInput | SortOrder
    optionId?: SortOrderInput | SortOrder
    responseId?: SortOrder
    teamId?: SortOrder
    option?: QuestionOptionOrderByWithRelationInput
    question?: QuestionOrderByWithRelationInput
    response?: SurveyResponseOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type QuestionResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionResponseWhereInput | QuestionResponseWhereInput[]
    OR?: QuestionResponseWhereInput[]
    NOT?: QuestionResponseWhereInput | QuestionResponseWhereInput[]
    isOther?: BoolNullableFilter<"QuestionResponse"> | boolean | null
    textValue?: StringNullableFilter<"QuestionResponse"> | string | null
    numberValue?: IntNullableFilter<"QuestionResponse"> | number | null
    booleanValue?: BoolNullableFilter<"QuestionResponse"> | boolean | null
    createdAt?: DateTimeFilter<"QuestionResponse"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionResponse"> | Date | string
    questionId?: StringFilter<"QuestionResponse"> | string
    questionTitle?: StringNullableFilter<"QuestionResponse"> | string | null
    questionFormat?: EnumQuestionFormatNullableFilter<"QuestionResponse"> | $Enums.QuestionFormat | null
    optionId?: StringNullableFilter<"QuestionResponse"> | string | null
    responseId?: StringFilter<"QuestionResponse"> | string
    teamId?: IntFilter<"QuestionResponse"> | number
    option?: XOR<QuestionOptionNullableScalarRelationFilter, QuestionOptionWhereInput> | null
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
    response?: XOR<SurveyResponseScalarRelationFilter, SurveyResponseWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id">

  export type QuestionResponseOrderByWithAggregationInput = {
    id?: SortOrder
    isOther?: SortOrderInput | SortOrder
    textValue?: SortOrderInput | SortOrder
    numberValue?: SortOrderInput | SortOrder
    booleanValue?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrderInput | SortOrder
    questionFormat?: SortOrderInput | SortOrder
    optionId?: SortOrderInput | SortOrder
    responseId?: SortOrder
    teamId?: SortOrder
    _count?: QuestionResponseCountOrderByAggregateInput
    _avg?: QuestionResponseAvgOrderByAggregateInput
    _max?: QuestionResponseMaxOrderByAggregateInput
    _min?: QuestionResponseMinOrderByAggregateInput
    _sum?: QuestionResponseSumOrderByAggregateInput
  }

  export type QuestionResponseScalarWhereWithAggregatesInput = {
    AND?: QuestionResponseScalarWhereWithAggregatesInput | QuestionResponseScalarWhereWithAggregatesInput[]
    OR?: QuestionResponseScalarWhereWithAggregatesInput[]
    NOT?: QuestionResponseScalarWhereWithAggregatesInput | QuestionResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionResponse"> | string
    isOther?: BoolNullableWithAggregatesFilter<"QuestionResponse"> | boolean | null
    textValue?: StringNullableWithAggregatesFilter<"QuestionResponse"> | string | null
    numberValue?: IntNullableWithAggregatesFilter<"QuestionResponse"> | number | null
    booleanValue?: BoolNullableWithAggregatesFilter<"QuestionResponse"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionResponse"> | Date | string
    questionId?: StringWithAggregatesFilter<"QuestionResponse"> | string
    questionTitle?: StringNullableWithAggregatesFilter<"QuestionResponse"> | string | null
    questionFormat?: EnumQuestionFormatNullableWithAggregatesFilter<"QuestionResponse"> | $Enums.QuestionFormat | null
    optionId?: StringNullableWithAggregatesFilter<"QuestionResponse"> | string | null
    responseId?: StringWithAggregatesFilter<"QuestionResponse"> | string
    teamId?: IntWithAggregatesFilter<"QuestionResponse"> | number
  }

  export type UserCreateInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    team?: TeamCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    team?: TeamUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FileCreateInput = {
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarFor?: UserCreateNestedManyWithoutAvatarInput
  }

  export type FileUncheckedCreateInput = {
    id?: number
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarFor?: UserUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type FileUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarFor?: UserUpdateManyWithoutAvatarNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarFor?: UserUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type FileCreateManyInput = {
    id?: number
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: number
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMemberCreateInput = {
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type TeamMemberUncheckedCreateInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    teamId: number
  }

  export type TeamMemberUpdateInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMemberCreateManyInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    teamId: number
  }

  export type TeamMemberUpdateManyMutationInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyTypeCreateInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutSurveyTypesInput
    surveys?: SurveyCreateNestedManyWithoutTypeInput
  }

  export type SurveyTypeUncheckedCreateInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    surveys?: SurveyUncheckedCreateNestedManyWithoutTypeInput
  }

  export type SurveyTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutSurveyTypesNestedInput
    surveys?: SurveyUpdateManyWithoutTypeNestedInput
  }

  export type SurveyTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    surveys?: SurveyUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type SurveyTypeCreateManyInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
  }

  export type SurveyTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleCreateNestedOneWithoutSurveyInput
    team: TeamCreateNestedOneWithoutSurveysInput
    type?: SurveyTypeCreateNestedOneWithoutSurveysInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUpdateOneWithoutSurveyNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysNestedInput
    type?: SurveyTypeUpdateOneWithoutSurveysNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
  }

  export type SurveyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyStyleCreateInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    border?: string
    survey: SurveyCreateNestedOneWithoutStyleInput
    team: TeamCreateNestedOneWithoutSurveysStyleInput
  }

  export type SurveyStyleUncheckedCreateInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    border?: string
  }

  export type SurveyStyleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    border?: StringFieldUpdateOperationsInput | string
    survey?: SurveyUpdateOneRequiredWithoutStyleNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysStyleNestedInput
  }

  export type SurveyStyleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    border?: StringFieldUpdateOperationsInput | string
  }

  export type SurveyStyleCreateManyInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    border?: string
  }

  export type SurveyStyleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    border?: StringFieldUpdateOperationsInput | string
  }

  export type SurveyStyleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    border?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionCreateInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addOther?: boolean
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseCreateNestedManyWithoutQuestionInput
    survey: SurveyCreateNestedOneWithoutQuestionsInput
    team: TeamCreateNestedOneWithoutQuestionsInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    addOther?: boolean
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutQuestionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUpdateManyWithoutQuestionNestedInput
    survey?: SurveyUpdateOneRequiredWithoutQuestionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionsNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUncheckedUpdateManyWithoutQuestionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    addOther?: boolean
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionOptionCreateInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOther?: boolean
    question: QuestionCreateNestedOneWithoutOptionsInput
    team: TeamCreateNestedOneWithoutQuestionOptionsInput
    responses?: QuestionResponseCreateNestedManyWithoutOptionInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionUncheckedCreateInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    teamId: number
    isOther?: boolean
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutOptionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionOptionsNestedInput
    responses?: QuestionResponseUpdateManyWithoutOptionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    isOther?: BoolFieldUpdateOperationsInput | boolean
    responses?: QuestionResponseUncheckedUpdateManyWithoutOptionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionCreateManyInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    teamId: number
    isOther?: boolean
  }

  export type QuestionOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    isOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurveyResponseCreateInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionResponses?: QuestionResponseCreateNestedManyWithoutResponseInput
    survey: SurveyCreateNestedOneWithoutResponsesInput
    team: TeamCreateNestedOneWithoutSurveyResponsesInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseUncheckedCreateInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutResponseInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionResponses?: QuestionResponseUpdateManyWithoutResponseNestedInput
    survey?: SurveyUpdateOneRequiredWithoutResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveyResponsesNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutResponseNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseCreateManyInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
  }

  export type SurveyResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyResponseSummaryCreateInput = {
    id?: string
    questionTitle?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
    survey: SurveyCreateNestedOneWithoutSurveyResponseSummaryInput
    question: QuestionCreateNestedOneWithoutSurveyResponseSummaryInput
    option?: QuestionOptionCreateNestedOneWithoutSurveyResponseSummaryInput
    team: TeamCreateNestedOneWithoutResponseSummariesInput
    response: SurveyResponseCreateNestedOneWithoutSurveyResponseSummaryInput
  }

  export type SurveyResponseSummaryUncheckedCreateInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SurveyUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    question?: QuestionUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    option?: QuestionOptionUpdateOneWithoutSurveyResponseSummaryNestedInput
    team?: TeamUpdateOneRequiredWithoutResponseSummariesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
  }

  export type SurveyResponseSummaryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryCreateManyInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionResponseCreateInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    option?: QuestionOptionCreateNestedOneWithoutResponsesInput
    question: QuestionCreateNestedOneWithoutResponsesInput
    response: SurveyResponseCreateNestedOneWithoutQuestionResponsesInput
    team: TeamCreateNestedOneWithoutQuestionResponsesInput
  }

  export type QuestionResponseUncheckedCreateInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    responseId: string
    teamId: number
  }

  export type QuestionResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    option?: QuestionOptionUpdateOneWithoutResponsesNestedInput
    question?: QuestionUpdateOneRequiredWithoutResponsesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutQuestionResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionResponsesNestedInput
  }

  export type QuestionResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionResponseCreateManyInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    responseId: string
    teamId: number
  }

  export type QuestionResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
  }

  export type QuestionResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderFilter<$PrismaModel> | $Enums.Provider
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumThemeFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeFilter<$PrismaModel> | $Enums.Theme
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type TeamMemberListRelationFilter = {
    every?: TeamMemberWhereInput
    some?: TeamMemberWhereInput
    none?: TeamMemberWhereInput
  }

  export type FileNullableScalarRelationFilter = {
    is?: FileWhereInput | null
    isNot?: FileWhereInput | null
  }

  export type TeamNullableScalarRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrder
    resetPasswordToken?: SortOrder
    confirmationToken?: SortOrder
    confirmed?: SortOrder
    blocked?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrder
    idProvider?: SortOrder
    resetPasswordExpires?: SortOrder
    theme?: SortOrder
    defaultTeamId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    defaultTeamId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrder
    resetPasswordToken?: SortOrder
    confirmationToken?: SortOrder
    confirmed?: SortOrder
    blocked?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrder
    idProvider?: SortOrder
    resetPasswordExpires?: SortOrder
    theme?: SortOrder
    defaultTeamId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    provider?: SortOrder
    password?: SortOrder
    resetPasswordToken?: SortOrder
    confirmationToken?: SortOrder
    confirmed?: SortOrder
    blocked?: SortOrder
    phone?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatarUrl?: SortOrder
    language?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatarId?: SortOrder
    idProvider?: SortOrder
    resetPasswordExpires?: SortOrder
    theme?: SortOrder
    defaultTeamId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    avatarId?: SortOrder
    defaultTeamId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderWithAggregatesFilter<$PrismaModel> | $Enums.Provider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderFilter<$PrismaModel>
    _max?: NestedEnumProviderFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumThemeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeWithAggregatesFilter<$PrismaModel> | $Enums.Theme
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeFilter<$PrismaModel>
    _max?: NestedEnumThemeFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    format?: SortOrder
    version?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    format?: SortOrder
    version?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    publicId?: SortOrder
    format?: SortOrder
    version?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    id?: SortOrder
    size?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type QuestionOptionListRelationFilter = {
    every?: QuestionOptionWhereInput
    some?: QuestionOptionWhereInput
    none?: QuestionOptionWhereInput
  }

  export type QuestionResponseListRelationFilter = {
    every?: QuestionResponseWhereInput
    some?: QuestionResponseWhereInput
    none?: QuestionResponseWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type SurveyResponseListRelationFilter = {
    every?: SurveyResponseWhereInput
    some?: SurveyResponseWhereInput
    none?: SurveyResponseWhereInput
  }

  export type SurveyStyleListRelationFilter = {
    every?: SurveyStyleWhereInput
    some?: SurveyStyleWhereInput
    none?: SurveyStyleWhereInput
  }

  export type SurveyTypeListRelationFilter = {
    every?: SurveyTypeWhereInput
    some?: SurveyTypeWhereInput
    none?: SurveyTypeWhereInput
  }

  export type SurveyListRelationFilter = {
    every?: SurveyWhereInput
    some?: SurveyWhereInput
    none?: SurveyWhereInput
  }

  export type SurveyResponseSummaryListRelationFilter = {
    every?: SurveyResponseSummaryWhereInput
    some?: SurveyResponseSummaryWhereInput
    none?: SurveyResponseSummaryWhereInput
  }

  export type QuestionOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurveyResponseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurveyStyleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurveyTypeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurveyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SurveyResponseSummaryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
    ResponseRate?: SortOrder
    totalActiveSurveys?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
    totalSurveys?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumTeamMemberStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamMemberStatus | EnumTeamMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamMemberStatusFilter<$PrismaModel> | $Enums.TeamMemberStatus
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type TeamMemberUserIdTeamIdCompoundUniqueInput = {
    userId: number
    teamId: number
  }

  export type TeamMemberCountOrderByAggregateInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    teamMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMemberAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    teamMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    id?: SortOrder
    isAdmin?: SortOrder
    canPost?: SortOrder
    canApprove?: SortOrder
    isOwner?: SortOrder
    teamMemberStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type TeamMemberSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    teamId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTeamMemberStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamMemberStatus | EnumTeamMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamMemberStatusWithAggregatesFilter<$PrismaModel> | $Enums.TeamMemberStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamMemberStatusFilter<$PrismaModel>
    _max?: NestedEnumTeamMemberStatusFilter<$PrismaModel>
  }

  export type SurveyTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
  }

  export type SurveyTypeAvgOrderByAggregateInput = {
    teamId?: SortOrder
  }

  export type SurveyTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
  }

  export type SurveyTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
  }

  export type SurveyTypeSumOrderByAggregateInput = {
    teamId?: SortOrder
  }

  export type EnumSurveyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SurveyStatus | EnumSurveyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSurveyStatusFilter<$PrismaModel> | $Enums.SurveyStatus
  }

  export type SurveyStyleNullableScalarRelationFilter = {
    is?: SurveyStyleWhereInput | null
    isNot?: SurveyStyleWhereInput | null
  }

  export type SurveyTypeNullableScalarRelationFilter = {
    is?: SurveyTypeWhereInput | null
    isNot?: SurveyTypeWhereInput | null
  }

  export type SurveyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    allowMultipleResponses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
  }

  export type SurveyAvgOrderByAggregateInput = {
    teamId?: SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
  }

  export type SurveyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    allowMultipleResponses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
  }

  export type SurveyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    status?: SortOrder
    allowMultipleResponses?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    typeId?: SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
  }

  export type SurveySumOrderByAggregateInput = {
    teamId?: SortOrder
    ResponseRate?: SortOrder
    totalOpenSurveys?: SortOrder
    totalResponses?: SortOrder
  }

  export type EnumSurveyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SurveyStatus | EnumSurveyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSurveyStatusWithAggregatesFilter<$PrismaModel> | $Enums.SurveyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSurveyStatusFilter<$PrismaModel>
    _max?: NestedEnumSurveyStatusFilter<$PrismaModel>
  }

  export type EnumStyleModeFilter<$PrismaModel = never> = {
    equals?: $Enums.StyleMode | EnumStyleModeFieldRefInput<$PrismaModel>
    in?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    not?: NestedEnumStyleModeFilter<$PrismaModel> | $Enums.StyleMode
  }

  export type SurveyScalarRelationFilter = {
    is?: SurveyWhereInput
    isNot?: SurveyWhereInput
  }

  export type SurveyStyleCountOrderByAggregateInput = {
    id?: SortOrder
    backgroundColor?: SortOrder
    textColor?: SortOrder
    buttonBackgroundColor?: SortOrder
    buttonTextColor?: SortOrder
    margin?: SortOrder
    padding?: SortOrder
    borderRadius?: SortOrder
    titleFontSize?: SortOrder
    bodyFontSize?: SortOrder
    fontFamily?: SortOrder
    basicCSS?: SortOrder
    styleMode?: SortOrder
    advancedCSS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    border?: SortOrder
  }

  export type SurveyStyleAvgOrderByAggregateInput = {
    teamId?: SortOrder
  }

  export type SurveyStyleMaxOrderByAggregateInput = {
    id?: SortOrder
    backgroundColor?: SortOrder
    textColor?: SortOrder
    buttonBackgroundColor?: SortOrder
    buttonTextColor?: SortOrder
    margin?: SortOrder
    padding?: SortOrder
    borderRadius?: SortOrder
    titleFontSize?: SortOrder
    bodyFontSize?: SortOrder
    fontFamily?: SortOrder
    basicCSS?: SortOrder
    styleMode?: SortOrder
    advancedCSS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    border?: SortOrder
  }

  export type SurveyStyleMinOrderByAggregateInput = {
    id?: SortOrder
    backgroundColor?: SortOrder
    textColor?: SortOrder
    buttonBackgroundColor?: SortOrder
    buttonTextColor?: SortOrder
    margin?: SortOrder
    padding?: SortOrder
    borderRadius?: SortOrder
    titleFontSize?: SortOrder
    bodyFontSize?: SortOrder
    fontFamily?: SortOrder
    basicCSS?: SortOrder
    styleMode?: SortOrder
    advancedCSS?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    border?: SortOrder
  }

  export type SurveyStyleSumOrderByAggregateInput = {
    teamId?: SortOrder
  }

  export type EnumStyleModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StyleMode | EnumStyleModeFieldRefInput<$PrismaModel>
    in?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    not?: NestedEnumStyleModeWithAggregatesFilter<$PrismaModel> | $Enums.StyleMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStyleModeFilter<$PrismaModel>
    _max?: NestedEnumStyleModeFilter<$PrismaModel>
  }

  export type EnumQuestionFormatFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionFormatFilter<$PrismaModel> | $Enums.QuestionFormat
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    format?: SortOrder
    required?: SortOrder
    order?: SortOrder
    yesLabel?: SortOrder
    noLabel?: SortOrder
    buttonLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    addOther?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    order?: SortOrder
    teamId?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    format?: SortOrder
    required?: SortOrder
    order?: SortOrder
    yesLabel?: SortOrder
    noLabel?: SortOrder
    buttonLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    addOther?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    format?: SortOrder
    required?: SortOrder
    order?: SortOrder
    yesLabel?: SortOrder
    noLabel?: SortOrder
    buttonLabel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
    addOther?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    order?: SortOrder
    teamId?: SortOrder
  }

  export type EnumQuestionFormatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionFormatWithAggregatesFilter<$PrismaModel> | $Enums.QuestionFormat
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionFormatFilter<$PrismaModel>
    _max?: NestedEnumQuestionFormatFilter<$PrismaModel>
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type QuestionOptionCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    teamId?: SortOrder
    isOther?: SortOrder
  }

  export type QuestionOptionAvgOrderByAggregateInput = {
    order?: SortOrder
    teamId?: SortOrder
  }

  export type QuestionOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    teamId?: SortOrder
    isOther?: SortOrder
  }

  export type QuestionOptionMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    teamId?: SortOrder
    isOther?: SortOrder
  }

  export type QuestionOptionSumOrderByAggregateInput = {
    order?: SortOrder
    teamId?: SortOrder
  }

  export type EnumResponseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseStatus | EnumResponseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseStatusFilter<$PrismaModel> | $Enums.ResponseStatus
  }

  export type SurveyResponseCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    userIp?: SortOrder
    extraInfo?: SortOrder
    origin?: SortOrder
    expiresAt?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
  }

  export type SurveyResponseAvgOrderByAggregateInput = {
    teamId?: SortOrder
  }

  export type SurveyResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    userIp?: SortOrder
    extraInfo?: SortOrder
    origin?: SortOrder
    expiresAt?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
  }

  export type SurveyResponseMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    userIp?: SortOrder
    extraInfo?: SortOrder
    origin?: SortOrder
    expiresAt?: SortOrder
    submittedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    surveyId?: SortOrder
    teamId?: SortOrder
  }

  export type SurveyResponseSumOrderByAggregateInput = {
    teamId?: SortOrder
  }

  export type EnumResponseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseStatus | EnumResponseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseStatusWithAggregatesFilter<$PrismaModel> | $Enums.ResponseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResponseStatusFilter<$PrismaModel>
    _max?: NestedEnumResponseStatusFilter<$PrismaModel>
  }

  export type EnumQuestionFormatNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel> | null
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumQuestionFormatNullableFilter<$PrismaModel> | $Enums.QuestionFormat | null
  }

  export type QuestionOptionNullableScalarRelationFilter = {
    is?: QuestionOptionWhereInput | null
    isNot?: QuestionOptionWhereInput | null
  }

  export type SurveyResponseScalarRelationFilter = {
    is?: SurveyResponseWhereInput
    isNot?: SurveyResponseWhereInput
  }

  export type SurveyResponseSummarySurveyIdQuestionIdOptionIdTeamIdCompoundUniqueInput = {
    surveyId: string
    questionId: string
    optionId: string
    teamId: number
  }

  export type SurveyResponseSummarySurveyIdQuestionIdNumberValueTeamIdCompoundUniqueInput = {
    surveyId: string
    questionId: string
    numberValue: number
    teamId: number
  }

  export type SurveyResponseSummarySurveyIdQuestionIdBooleanValueTeamIdCompoundUniqueInput = {
    surveyId: string
    questionId: string
    booleanValue: boolean
    teamId: number
  }

  export type SurveyResponseSummaryCountOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrder
    responseId?: SortOrder
    optionId?: SortOrder
    textValue?: SortOrder
    questionFormat?: SortOrder
    isOther?: SortOrder
    numberValue?: SortOrder
    booleanValue?: SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
    lastUpdated?: SortOrder
  }

  export type SurveyResponseSummaryAvgOrderByAggregateInput = {
    numberValue?: SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
  }

  export type SurveyResponseSummaryMaxOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrder
    responseId?: SortOrder
    optionId?: SortOrder
    textValue?: SortOrder
    questionFormat?: SortOrder
    isOther?: SortOrder
    numberValue?: SortOrder
    booleanValue?: SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
    lastUpdated?: SortOrder
  }

  export type SurveyResponseSummaryMinOrderByAggregateInput = {
    id?: SortOrder
    surveyId?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrder
    responseId?: SortOrder
    optionId?: SortOrder
    textValue?: SortOrder
    questionFormat?: SortOrder
    isOther?: SortOrder
    numberValue?: SortOrder
    booleanValue?: SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
    lastUpdated?: SortOrder
  }

  export type SurveyResponseSummarySumOrderByAggregateInput = {
    numberValue?: SortOrder
    teamId?: SortOrder
    responseCount?: SortOrder
  }

  export type EnumQuestionFormatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel> | null
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumQuestionFormatNullableWithAggregatesFilter<$PrismaModel> | $Enums.QuestionFormat | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumQuestionFormatNullableFilter<$PrismaModel>
    _max?: NestedEnumQuestionFormatNullableFilter<$PrismaModel>
  }

  export type QuestionResponseCountOrderByAggregateInput = {
    id?: SortOrder
    isOther?: SortOrder
    textValue?: SortOrder
    numberValue?: SortOrder
    booleanValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrder
    questionFormat?: SortOrder
    optionId?: SortOrder
    responseId?: SortOrder
    teamId?: SortOrder
  }

  export type QuestionResponseAvgOrderByAggregateInput = {
    numberValue?: SortOrder
    teamId?: SortOrder
  }

  export type QuestionResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    isOther?: SortOrder
    textValue?: SortOrder
    numberValue?: SortOrder
    booleanValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrder
    questionFormat?: SortOrder
    optionId?: SortOrder
    responseId?: SortOrder
    teamId?: SortOrder
  }

  export type QuestionResponseMinOrderByAggregateInput = {
    id?: SortOrder
    isOther?: SortOrder
    textValue?: SortOrder
    numberValue?: SortOrder
    booleanValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    questionId?: SortOrder
    questionTitle?: SortOrder
    questionFormat?: SortOrder
    optionId?: SortOrder
    responseId?: SortOrder
    teamId?: SortOrder
  }

  export type QuestionResponseSumOrderByAggregateInput = {
    numberValue?: SortOrder
    teamId?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type TeamMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type FileCreateNestedOneWithoutAvatarForInput = {
    create?: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
    connectOrCreate?: FileCreateOrConnectWithoutAvatarForInput
    connect?: FileWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutUserInput = {
    create?: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUserInput
    connect?: TeamWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumProviderFieldUpdateOperationsInput = {
    set?: $Enums.Provider
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: $Enums.Language
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumThemeFieldUpdateOperationsInput = {
    set?: $Enums.Theme
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type TeamMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type FileUpdateOneWithoutAvatarForNestedInput = {
    create?: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
    connectOrCreate?: FileCreateOrConnectWithoutAvatarForInput
    upsert?: FileUpsertWithoutAvatarForInput
    disconnect?: FileWhereInput | boolean
    delete?: FileWhereInput | boolean
    connect?: FileWhereUniqueInput
    update?: XOR<XOR<FileUpdateToOneWithWhereWithoutAvatarForInput, FileUpdateWithoutAvatarForInput>, FileUncheckedUpdateWithoutAvatarForInput>
  }

  export type TeamUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeamCreateOrConnectWithoutUserInput
    upsert?: TeamUpsertWithoutUserInput
    disconnect?: TeamWhereInput | boolean
    delete?: TeamWhereInput | boolean
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutUserInput, TeamUpdateWithoutUserInput>, TeamUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type QuestionOptionCreateNestedManyWithoutTeamInput = {
    create?: XOR<QuestionOptionCreateWithoutTeamInput, QuestionOptionUncheckedCreateWithoutTeamInput> | QuestionOptionCreateWithoutTeamInput[] | QuestionOptionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutTeamInput | QuestionOptionCreateOrConnectWithoutTeamInput[]
    createMany?: QuestionOptionCreateManyTeamInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type QuestionResponseCreateNestedManyWithoutTeamInput = {
    create?: XOR<QuestionResponseCreateWithoutTeamInput, QuestionResponseUncheckedCreateWithoutTeamInput> | QuestionResponseCreateWithoutTeamInput[] | QuestionResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutTeamInput | QuestionResponseCreateOrConnectWithoutTeamInput[]
    createMany?: QuestionResponseCreateManyTeamInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutTeamInput = {
    create?: XOR<QuestionCreateWithoutTeamInput, QuestionUncheckedCreateWithoutTeamInput> | QuestionCreateWithoutTeamInput[] | QuestionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTeamInput | QuestionCreateOrConnectWithoutTeamInput[]
    createMany?: QuestionCreateManyTeamInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type SurveyResponseCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyResponseCreateWithoutTeamInput, SurveyResponseUncheckedCreateWithoutTeamInput> | SurveyResponseCreateWithoutTeamInput[] | SurveyResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutTeamInput | SurveyResponseCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyResponseCreateManyTeamInputEnvelope
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
  }

  export type SurveyStyleCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyStyleCreateWithoutTeamInput, SurveyStyleUncheckedCreateWithoutTeamInput> | SurveyStyleCreateWithoutTeamInput[] | SurveyStyleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutTeamInput | SurveyStyleCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyStyleCreateManyTeamInputEnvelope
    connect?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
  }

  export type SurveyTypeCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyTypeCreateWithoutTeamInput, SurveyTypeUncheckedCreateWithoutTeamInput> | SurveyTypeCreateWithoutTeamInput[] | SurveyTypeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyTypeCreateOrConnectWithoutTeamInput | SurveyTypeCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyTypeCreateManyTeamInputEnvelope
    connect?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
  }

  export type SurveyCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyCreateWithoutTeamInput, SurveyUncheckedCreateWithoutTeamInput> | SurveyCreateWithoutTeamInput[] | SurveyUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTeamInput | SurveyCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyCreateManyTeamInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type TeamMemberCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SurveyResponseSummaryCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutTeamInput, SurveyResponseSummaryUncheckedCreateWithoutTeamInput> | SurveyResponseSummaryCreateWithoutTeamInput[] | SurveyResponseSummaryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutTeamInput | SurveyResponseSummaryCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyResponseSummaryCreateManyTeamInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionOptionUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<QuestionOptionCreateWithoutTeamInput, QuestionOptionUncheckedCreateWithoutTeamInput> | QuestionOptionCreateWithoutTeamInput[] | QuestionOptionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutTeamInput | QuestionOptionCreateOrConnectWithoutTeamInput[]
    createMany?: QuestionOptionCreateManyTeamInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type QuestionResponseUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<QuestionResponseCreateWithoutTeamInput, QuestionResponseUncheckedCreateWithoutTeamInput> | QuestionResponseCreateWithoutTeamInput[] | QuestionResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutTeamInput | QuestionResponseCreateOrConnectWithoutTeamInput[]
    createMany?: QuestionResponseCreateManyTeamInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<QuestionCreateWithoutTeamInput, QuestionUncheckedCreateWithoutTeamInput> | QuestionCreateWithoutTeamInput[] | QuestionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTeamInput | QuestionCreateOrConnectWithoutTeamInput[]
    createMany?: QuestionCreateManyTeamInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type SurveyResponseUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyResponseCreateWithoutTeamInput, SurveyResponseUncheckedCreateWithoutTeamInput> | SurveyResponseCreateWithoutTeamInput[] | SurveyResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutTeamInput | SurveyResponseCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyResponseCreateManyTeamInputEnvelope
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
  }

  export type SurveyStyleUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyStyleCreateWithoutTeamInput, SurveyStyleUncheckedCreateWithoutTeamInput> | SurveyStyleCreateWithoutTeamInput[] | SurveyStyleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutTeamInput | SurveyStyleCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyStyleCreateManyTeamInputEnvelope
    connect?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
  }

  export type SurveyTypeUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyTypeCreateWithoutTeamInput, SurveyTypeUncheckedCreateWithoutTeamInput> | SurveyTypeCreateWithoutTeamInput[] | SurveyTypeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyTypeCreateOrConnectWithoutTeamInput | SurveyTypeCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyTypeCreateManyTeamInputEnvelope
    connect?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
  }

  export type SurveyUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyCreateWithoutTeamInput, SurveyUncheckedCreateWithoutTeamInput> | SurveyCreateWithoutTeamInput[] | SurveyUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTeamInput | SurveyCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyCreateManyTeamInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutTeamInput, SurveyResponseSummaryUncheckedCreateWithoutTeamInput> | SurveyResponseSummaryCreateWithoutTeamInput[] | SurveyResponseSummaryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutTeamInput | SurveyResponseSummaryCreateOrConnectWithoutTeamInput[]
    createMany?: SurveyResponseSummaryCreateManyTeamInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionOptionUpdateManyWithoutTeamNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutTeamInput, QuestionOptionUncheckedCreateWithoutTeamInput> | QuestionOptionCreateWithoutTeamInput[] | QuestionOptionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutTeamInput | QuestionOptionCreateOrConnectWithoutTeamInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutTeamInput | QuestionOptionUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: QuestionOptionCreateManyTeamInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutTeamInput | QuestionOptionUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutTeamInput | QuestionOptionUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type QuestionResponseUpdateManyWithoutTeamNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutTeamInput, QuestionResponseUncheckedCreateWithoutTeamInput> | QuestionResponseCreateWithoutTeamInput[] | QuestionResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutTeamInput | QuestionResponseCreateOrConnectWithoutTeamInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutTeamInput | QuestionResponseUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: QuestionResponseCreateManyTeamInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutTeamInput | QuestionResponseUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutTeamInput | QuestionResponseUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutTeamNestedInput = {
    create?: XOR<QuestionCreateWithoutTeamInput, QuestionUncheckedCreateWithoutTeamInput> | QuestionCreateWithoutTeamInput[] | QuestionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTeamInput | QuestionCreateOrConnectWithoutTeamInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTeamInput | QuestionUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: QuestionCreateManyTeamInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTeamInput | QuestionUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTeamInput | QuestionUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SurveyResponseUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyResponseCreateWithoutTeamInput, SurveyResponseUncheckedCreateWithoutTeamInput> | SurveyResponseCreateWithoutTeamInput[] | SurveyResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutTeamInput | SurveyResponseCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyResponseUpsertWithWhereUniqueWithoutTeamInput | SurveyResponseUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyResponseCreateManyTeamInputEnvelope
    set?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    disconnect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    delete?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    update?: SurveyResponseUpdateWithWhereUniqueWithoutTeamInput | SurveyResponseUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyResponseUpdateManyWithWhereWithoutTeamInput | SurveyResponseUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyResponseScalarWhereInput | SurveyResponseScalarWhereInput[]
  }

  export type SurveyStyleUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyStyleCreateWithoutTeamInput, SurveyStyleUncheckedCreateWithoutTeamInput> | SurveyStyleCreateWithoutTeamInput[] | SurveyStyleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutTeamInput | SurveyStyleCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyStyleUpsertWithWhereUniqueWithoutTeamInput | SurveyStyleUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyStyleCreateManyTeamInputEnvelope
    set?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    disconnect?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    delete?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    connect?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    update?: SurveyStyleUpdateWithWhereUniqueWithoutTeamInput | SurveyStyleUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyStyleUpdateManyWithWhereWithoutTeamInput | SurveyStyleUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyStyleScalarWhereInput | SurveyStyleScalarWhereInput[]
  }

  export type SurveyTypeUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyTypeCreateWithoutTeamInput, SurveyTypeUncheckedCreateWithoutTeamInput> | SurveyTypeCreateWithoutTeamInput[] | SurveyTypeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyTypeCreateOrConnectWithoutTeamInput | SurveyTypeCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyTypeUpsertWithWhereUniqueWithoutTeamInput | SurveyTypeUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyTypeCreateManyTeamInputEnvelope
    set?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    disconnect?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    delete?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    connect?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    update?: SurveyTypeUpdateWithWhereUniqueWithoutTeamInput | SurveyTypeUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyTypeUpdateManyWithWhereWithoutTeamInput | SurveyTypeUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyTypeScalarWhereInput | SurveyTypeScalarWhereInput[]
  }

  export type SurveyUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyCreateWithoutTeamInput, SurveyUncheckedCreateWithoutTeamInput> | SurveyCreateWithoutTeamInput[] | SurveyUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTeamInput | SurveyCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutTeamInput | SurveyUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyCreateManyTeamInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutTeamInput | SurveyUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutTeamInput | SurveyUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type TeamMemberUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamInput | UserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamInput | UserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamInput | UserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SurveyResponseSummaryUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutTeamInput, SurveyResponseSummaryUncheckedCreateWithoutTeamInput> | SurveyResponseSummaryCreateWithoutTeamInput[] | SurveyResponseSummaryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutTeamInput | SurveyResponseSummaryCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutTeamInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyResponseSummaryCreateManyTeamInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutTeamInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutTeamInput | SurveyResponseSummaryUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutTeamInput, QuestionOptionUncheckedCreateWithoutTeamInput> | QuestionOptionCreateWithoutTeamInput[] | QuestionOptionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutTeamInput | QuestionOptionCreateOrConnectWithoutTeamInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutTeamInput | QuestionOptionUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: QuestionOptionCreateManyTeamInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutTeamInput | QuestionOptionUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutTeamInput | QuestionOptionUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutTeamInput, QuestionResponseUncheckedCreateWithoutTeamInput> | QuestionResponseCreateWithoutTeamInput[] | QuestionResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutTeamInput | QuestionResponseCreateOrConnectWithoutTeamInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutTeamInput | QuestionResponseUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: QuestionResponseCreateManyTeamInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutTeamInput | QuestionResponseUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutTeamInput | QuestionResponseUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<QuestionCreateWithoutTeamInput, QuestionUncheckedCreateWithoutTeamInput> | QuestionCreateWithoutTeamInput[] | QuestionUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutTeamInput | QuestionCreateOrConnectWithoutTeamInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutTeamInput | QuestionUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: QuestionCreateManyTeamInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutTeamInput | QuestionUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutTeamInput | QuestionUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyResponseCreateWithoutTeamInput, SurveyResponseUncheckedCreateWithoutTeamInput> | SurveyResponseCreateWithoutTeamInput[] | SurveyResponseUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutTeamInput | SurveyResponseCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyResponseUpsertWithWhereUniqueWithoutTeamInput | SurveyResponseUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyResponseCreateManyTeamInputEnvelope
    set?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    disconnect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    delete?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    update?: SurveyResponseUpdateWithWhereUniqueWithoutTeamInput | SurveyResponseUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyResponseUpdateManyWithWhereWithoutTeamInput | SurveyResponseUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyResponseScalarWhereInput | SurveyResponseScalarWhereInput[]
  }

  export type SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyStyleCreateWithoutTeamInput, SurveyStyleUncheckedCreateWithoutTeamInput> | SurveyStyleCreateWithoutTeamInput[] | SurveyStyleUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutTeamInput | SurveyStyleCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyStyleUpsertWithWhereUniqueWithoutTeamInput | SurveyStyleUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyStyleCreateManyTeamInputEnvelope
    set?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    disconnect?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    delete?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    connect?: SurveyStyleWhereUniqueInput | SurveyStyleWhereUniqueInput[]
    update?: SurveyStyleUpdateWithWhereUniqueWithoutTeamInput | SurveyStyleUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyStyleUpdateManyWithWhereWithoutTeamInput | SurveyStyleUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyStyleScalarWhereInput | SurveyStyleScalarWhereInput[]
  }

  export type SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyTypeCreateWithoutTeamInput, SurveyTypeUncheckedCreateWithoutTeamInput> | SurveyTypeCreateWithoutTeamInput[] | SurveyTypeUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyTypeCreateOrConnectWithoutTeamInput | SurveyTypeCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyTypeUpsertWithWhereUniqueWithoutTeamInput | SurveyTypeUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyTypeCreateManyTeamInputEnvelope
    set?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    disconnect?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    delete?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    connect?: SurveyTypeWhereUniqueInput | SurveyTypeWhereUniqueInput[]
    update?: SurveyTypeUpdateWithWhereUniqueWithoutTeamInput | SurveyTypeUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyTypeUpdateManyWithWhereWithoutTeamInput | SurveyTypeUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyTypeScalarWhereInput | SurveyTypeScalarWhereInput[]
  }

  export type SurveyUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyCreateWithoutTeamInput, SurveyUncheckedCreateWithoutTeamInput> | SurveyCreateWithoutTeamInput[] | SurveyUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTeamInput | SurveyCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutTeamInput | SurveyUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyCreateManyTeamInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutTeamInput | SurveyUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutTeamInput | SurveyUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput> | UserCreateWithoutTeamInput[] | UserUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeamInput | UserCreateOrConnectWithoutTeamInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeamInput | UserUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: UserCreateManyTeamInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeamInput | UserUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeamInput | UserUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutTeamInput, SurveyResponseSummaryUncheckedCreateWithoutTeamInput> | SurveyResponseSummaryCreateWithoutTeamInput[] | SurveyResponseSummaryUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutTeamInput | SurveyResponseSummaryCreateOrConnectWithoutTeamInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutTeamInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SurveyResponseSummaryCreateManyTeamInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutTeamInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutTeamInput | SurveyResponseSummaryUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeamMembersInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumTeamMemberStatusFieldUpdateOperationsInput = {
    set?: $Enums.TeamMemberStatus
  }

  export type TeamUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    upsert?: TeamUpsertWithoutMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutMembersInput, TeamUpdateWithoutMembersInput>, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutTeamMembersNestedInput = {
    create?: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMembersInput
    upsert?: UserUpsertWithoutTeamMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMembersInput, UserUpdateWithoutTeamMembersInput>, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type TeamCreateNestedOneWithoutSurveyTypesInput = {
    create?: XOR<TeamCreateWithoutSurveyTypesInput, TeamUncheckedCreateWithoutSurveyTypesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveyTypesInput
    connect?: TeamWhereUniqueInput
  }

  export type SurveyCreateNestedManyWithoutTypeInput = {
    create?: XOR<SurveyCreateWithoutTypeInput, SurveyUncheckedCreateWithoutTypeInput> | SurveyCreateWithoutTypeInput[] | SurveyUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTypeInput | SurveyCreateOrConnectWithoutTypeInput[]
    createMany?: SurveyCreateManyTypeInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type SurveyUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<SurveyCreateWithoutTypeInput, SurveyUncheckedCreateWithoutTypeInput> | SurveyCreateWithoutTypeInput[] | SurveyUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTypeInput | SurveyCreateOrConnectWithoutTypeInput[]
    createMany?: SurveyCreateManyTypeInputEnvelope
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
  }

  export type TeamUpdateOneRequiredWithoutSurveyTypesNestedInput = {
    create?: XOR<TeamCreateWithoutSurveyTypesInput, TeamUncheckedCreateWithoutSurveyTypesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveyTypesInput
    upsert?: TeamUpsertWithoutSurveyTypesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSurveyTypesInput, TeamUpdateWithoutSurveyTypesInput>, TeamUncheckedUpdateWithoutSurveyTypesInput>
  }

  export type SurveyUpdateManyWithoutTypeNestedInput = {
    create?: XOR<SurveyCreateWithoutTypeInput, SurveyUncheckedCreateWithoutTypeInput> | SurveyCreateWithoutTypeInput[] | SurveyUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTypeInput | SurveyCreateOrConnectWithoutTypeInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutTypeInput | SurveyUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: SurveyCreateManyTypeInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutTypeInput | SurveyUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutTypeInput | SurveyUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type SurveyUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<SurveyCreateWithoutTypeInput, SurveyUncheckedCreateWithoutTypeInput> | SurveyCreateWithoutTypeInput[] | SurveyUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: SurveyCreateOrConnectWithoutTypeInput | SurveyCreateOrConnectWithoutTypeInput[]
    upsert?: SurveyUpsertWithWhereUniqueWithoutTypeInput | SurveyUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: SurveyCreateManyTypeInputEnvelope
    set?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    disconnect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    delete?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    connect?: SurveyWhereUniqueInput | SurveyWhereUniqueInput[]
    update?: SurveyUpdateWithWhereUniqueWithoutTypeInput | SurveyUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: SurveyUpdateManyWithWhereWithoutTypeInput | SurveyUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
  }

  export type QuestionCreateNestedManyWithoutSurveyInput = {
    create?: XOR<QuestionCreateWithoutSurveyInput, QuestionUncheckedCreateWithoutSurveyInput> | QuestionCreateWithoutSurveyInput[] | QuestionUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSurveyInput | QuestionCreateOrConnectWithoutSurveyInput[]
    createMany?: QuestionCreateManySurveyInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type SurveyResponseCreateNestedManyWithoutSurveyInput = {
    create?: XOR<SurveyResponseCreateWithoutSurveyInput, SurveyResponseUncheckedCreateWithoutSurveyInput> | SurveyResponseCreateWithoutSurveyInput[] | SurveyResponseUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutSurveyInput | SurveyResponseCreateOrConnectWithoutSurveyInput[]
    createMany?: SurveyResponseCreateManySurveyInputEnvelope
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
  }

  export type SurveyStyleCreateNestedOneWithoutSurveyInput = {
    create?: XOR<SurveyStyleCreateWithoutSurveyInput, SurveyStyleUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutSurveyInput
    connect?: SurveyStyleWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutSurveysInput = {
    create?: XOR<TeamCreateWithoutSurveysInput, TeamUncheckedCreateWithoutSurveysInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveysInput
    connect?: TeamWhereUniqueInput
  }

  export type SurveyTypeCreateNestedOneWithoutSurveysInput = {
    create?: XOR<SurveyTypeCreateWithoutSurveysInput, SurveyTypeUncheckedCreateWithoutSurveysInput>
    connectOrCreate?: SurveyTypeCreateOrConnectWithoutSurveysInput
    connect?: SurveyTypeWhereUniqueInput
  }

  export type SurveyResponseSummaryCreateNestedManyWithoutSurveyInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutSurveyInput, SurveyResponseSummaryUncheckedCreateWithoutSurveyInput> | SurveyResponseSummaryCreateWithoutSurveyInput[] | SurveyResponseSummaryUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutSurveyInput | SurveyResponseSummaryCreateOrConnectWithoutSurveyInput[]
    createMany?: SurveyResponseSummaryCreateManySurveyInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutSurveyInput = {
    create?: XOR<QuestionCreateWithoutSurveyInput, QuestionUncheckedCreateWithoutSurveyInput> | QuestionCreateWithoutSurveyInput[] | QuestionUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSurveyInput | QuestionCreateOrConnectWithoutSurveyInput[]
    createMany?: QuestionCreateManySurveyInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput = {
    create?: XOR<SurveyResponseCreateWithoutSurveyInput, SurveyResponseUncheckedCreateWithoutSurveyInput> | SurveyResponseCreateWithoutSurveyInput[] | SurveyResponseUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutSurveyInput | SurveyResponseCreateOrConnectWithoutSurveyInput[]
    createMany?: SurveyResponseCreateManySurveyInputEnvelope
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
  }

  export type SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput = {
    create?: XOR<SurveyStyleCreateWithoutSurveyInput, SurveyStyleUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutSurveyInput
    connect?: SurveyStyleWhereUniqueInput
  }

  export type SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutSurveyInput, SurveyResponseSummaryUncheckedCreateWithoutSurveyInput> | SurveyResponseSummaryCreateWithoutSurveyInput[] | SurveyResponseSummaryUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutSurveyInput | SurveyResponseSummaryCreateOrConnectWithoutSurveyInput[]
    createMany?: SurveyResponseSummaryCreateManySurveyInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type EnumSurveyStatusFieldUpdateOperationsInput = {
    set?: $Enums.SurveyStatus
  }

  export type QuestionUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<QuestionCreateWithoutSurveyInput, QuestionUncheckedCreateWithoutSurveyInput> | QuestionCreateWithoutSurveyInput[] | QuestionUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSurveyInput | QuestionCreateOrConnectWithoutSurveyInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSurveyInput | QuestionUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: QuestionCreateManySurveyInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSurveyInput | QuestionUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSurveyInput | QuestionUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SurveyResponseUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<SurveyResponseCreateWithoutSurveyInput, SurveyResponseUncheckedCreateWithoutSurveyInput> | SurveyResponseCreateWithoutSurveyInput[] | SurveyResponseUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutSurveyInput | SurveyResponseCreateOrConnectWithoutSurveyInput[]
    upsert?: SurveyResponseUpsertWithWhereUniqueWithoutSurveyInput | SurveyResponseUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: SurveyResponseCreateManySurveyInputEnvelope
    set?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    disconnect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    delete?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    update?: SurveyResponseUpdateWithWhereUniqueWithoutSurveyInput | SurveyResponseUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: SurveyResponseUpdateManyWithWhereWithoutSurveyInput | SurveyResponseUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: SurveyResponseScalarWhereInput | SurveyResponseScalarWhereInput[]
  }

  export type SurveyStyleUpdateOneWithoutSurveyNestedInput = {
    create?: XOR<SurveyStyleCreateWithoutSurveyInput, SurveyStyleUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutSurveyInput
    upsert?: SurveyStyleUpsertWithoutSurveyInput
    disconnect?: SurveyStyleWhereInput | boolean
    delete?: SurveyStyleWhereInput | boolean
    connect?: SurveyStyleWhereUniqueInput
    update?: XOR<XOR<SurveyStyleUpdateToOneWithWhereWithoutSurveyInput, SurveyStyleUpdateWithoutSurveyInput>, SurveyStyleUncheckedUpdateWithoutSurveyInput>
  }

  export type TeamUpdateOneRequiredWithoutSurveysNestedInput = {
    create?: XOR<TeamCreateWithoutSurveysInput, TeamUncheckedCreateWithoutSurveysInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveysInput
    upsert?: TeamUpsertWithoutSurveysInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSurveysInput, TeamUpdateWithoutSurveysInput>, TeamUncheckedUpdateWithoutSurveysInput>
  }

  export type SurveyTypeUpdateOneWithoutSurveysNestedInput = {
    create?: XOR<SurveyTypeCreateWithoutSurveysInput, SurveyTypeUncheckedCreateWithoutSurveysInput>
    connectOrCreate?: SurveyTypeCreateOrConnectWithoutSurveysInput
    upsert?: SurveyTypeUpsertWithoutSurveysInput
    disconnect?: SurveyTypeWhereInput | boolean
    delete?: SurveyTypeWhereInput | boolean
    connect?: SurveyTypeWhereUniqueInput
    update?: XOR<XOR<SurveyTypeUpdateToOneWithWhereWithoutSurveysInput, SurveyTypeUpdateWithoutSurveysInput>, SurveyTypeUncheckedUpdateWithoutSurveysInput>
  }

  export type SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutSurveyInput, SurveyResponseSummaryUncheckedCreateWithoutSurveyInput> | SurveyResponseSummaryCreateWithoutSurveyInput[] | SurveyResponseSummaryUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutSurveyInput | SurveyResponseSummaryCreateOrConnectWithoutSurveyInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutSurveyInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: SurveyResponseSummaryCreateManySurveyInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutSurveyInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutSurveyInput | SurveyResponseSummaryUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<QuestionCreateWithoutSurveyInput, QuestionUncheckedCreateWithoutSurveyInput> | QuestionCreateWithoutSurveyInput[] | QuestionUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutSurveyInput | QuestionCreateOrConnectWithoutSurveyInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutSurveyInput | QuestionUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: QuestionCreateManySurveyInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutSurveyInput | QuestionUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutSurveyInput | QuestionUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<SurveyResponseCreateWithoutSurveyInput, SurveyResponseUncheckedCreateWithoutSurveyInput> | SurveyResponseCreateWithoutSurveyInput[] | SurveyResponseUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutSurveyInput | SurveyResponseCreateOrConnectWithoutSurveyInput[]
    upsert?: SurveyResponseUpsertWithWhereUniqueWithoutSurveyInput | SurveyResponseUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: SurveyResponseCreateManySurveyInputEnvelope
    set?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    disconnect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    delete?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    connect?: SurveyResponseWhereUniqueInput | SurveyResponseWhereUniqueInput[]
    update?: SurveyResponseUpdateWithWhereUniqueWithoutSurveyInput | SurveyResponseUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: SurveyResponseUpdateManyWithWhereWithoutSurveyInput | SurveyResponseUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: SurveyResponseScalarWhereInput | SurveyResponseScalarWhereInput[]
  }

  export type SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput = {
    create?: XOR<SurveyStyleCreateWithoutSurveyInput, SurveyStyleUncheckedCreateWithoutSurveyInput>
    connectOrCreate?: SurveyStyleCreateOrConnectWithoutSurveyInput
    upsert?: SurveyStyleUpsertWithoutSurveyInput
    disconnect?: SurveyStyleWhereInput | boolean
    delete?: SurveyStyleWhereInput | boolean
    connect?: SurveyStyleWhereUniqueInput
    update?: XOR<XOR<SurveyStyleUpdateToOneWithWhereWithoutSurveyInput, SurveyStyleUpdateWithoutSurveyInput>, SurveyStyleUncheckedUpdateWithoutSurveyInput>
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutSurveyInput, SurveyResponseSummaryUncheckedCreateWithoutSurveyInput> | SurveyResponseSummaryCreateWithoutSurveyInput[] | SurveyResponseSummaryUncheckedCreateWithoutSurveyInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutSurveyInput | SurveyResponseSummaryCreateOrConnectWithoutSurveyInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutSurveyInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutSurveyInput[]
    createMany?: SurveyResponseSummaryCreateManySurveyInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutSurveyInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutSurveyInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutSurveyInput | SurveyResponseSummaryUpdateManyWithWhereWithoutSurveyInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type SurveyCreateNestedOneWithoutStyleInput = {
    create?: XOR<SurveyCreateWithoutStyleInput, SurveyUncheckedCreateWithoutStyleInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutStyleInput
    connect?: SurveyWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutSurveysStyleInput = {
    create?: XOR<TeamCreateWithoutSurveysStyleInput, TeamUncheckedCreateWithoutSurveysStyleInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveysStyleInput
    connect?: TeamWhereUniqueInput
  }

  export type EnumStyleModeFieldUpdateOperationsInput = {
    set?: $Enums.StyleMode
  }

  export type SurveyUpdateOneRequiredWithoutStyleNestedInput = {
    create?: XOR<SurveyCreateWithoutStyleInput, SurveyUncheckedCreateWithoutStyleInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutStyleInput
    upsert?: SurveyUpsertWithoutStyleInput
    connect?: SurveyWhereUniqueInput
    update?: XOR<XOR<SurveyUpdateToOneWithWhereWithoutStyleInput, SurveyUpdateWithoutStyleInput>, SurveyUncheckedUpdateWithoutStyleInput>
  }

  export type TeamUpdateOneRequiredWithoutSurveysStyleNestedInput = {
    create?: XOR<TeamCreateWithoutSurveysStyleInput, TeamUncheckedCreateWithoutSurveysStyleInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveysStyleInput
    upsert?: TeamUpsertWithoutSurveysStyleInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSurveysStyleInput, TeamUpdateWithoutSurveysStyleInput>, TeamUncheckedUpdateWithoutSurveysStyleInput>
  }

  export type QuestionOptionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type QuestionResponseCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionResponseCreateWithoutQuestionInput, QuestionResponseUncheckedCreateWithoutQuestionInput> | QuestionResponseCreateWithoutQuestionInput[] | QuestionResponseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutQuestionInput | QuestionResponseCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionResponseCreateManyQuestionInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type SurveyCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<SurveyCreateWithoutQuestionsInput, SurveyUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutQuestionsInput
    connect?: SurveyWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<TeamCreateWithoutQuestionsInput, TeamUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutQuestionsInput
    connect?: TeamWhereUniqueInput
  }

  export type SurveyResponseSummaryCreateNestedManyWithoutQuestionInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutQuestionInput, SurveyResponseSummaryUncheckedCreateWithoutQuestionInput> | SurveyResponseSummaryCreateWithoutQuestionInput[] | SurveyResponseSummaryUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutQuestionInput | SurveyResponseSummaryCreateOrConnectWithoutQuestionInput[]
    createMany?: SurveyResponseSummaryCreateManyQuestionInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type QuestionResponseUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionResponseCreateWithoutQuestionInput, QuestionResponseUncheckedCreateWithoutQuestionInput> | QuestionResponseCreateWithoutQuestionInput[] | QuestionResponseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutQuestionInput | QuestionResponseCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionResponseCreateManyQuestionInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type SurveyResponseSummaryUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutQuestionInput, SurveyResponseSummaryUncheckedCreateWithoutQuestionInput> | SurveyResponseSummaryCreateWithoutQuestionInput[] | SurveyResponseSummaryUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutQuestionInput | SurveyResponseSummaryCreateOrConnectWithoutQuestionInput[]
    createMany?: SurveyResponseSummaryCreateManyQuestionInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type EnumQuestionFormatFieldUpdateOperationsInput = {
    set?: $Enums.QuestionFormat
  }

  export type QuestionOptionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutQuestionInput | QuestionOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type QuestionResponseUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutQuestionInput, QuestionResponseUncheckedCreateWithoutQuestionInput> | QuestionResponseCreateWithoutQuestionInput[] | QuestionResponseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutQuestionInput | QuestionResponseCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutQuestionInput | QuestionResponseUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionResponseCreateManyQuestionInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutQuestionInput | QuestionResponseUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutQuestionInput | QuestionResponseUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type SurveyUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<SurveyCreateWithoutQuestionsInput, SurveyUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutQuestionsInput
    upsert?: SurveyUpsertWithoutQuestionsInput
    connect?: SurveyWhereUniqueInput
    update?: XOR<XOR<SurveyUpdateToOneWithWhereWithoutQuestionsInput, SurveyUpdateWithoutQuestionsInput>, SurveyUncheckedUpdateWithoutQuestionsInput>
  }

  export type TeamUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<TeamCreateWithoutQuestionsInput, TeamUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutQuestionsInput
    upsert?: TeamUpsertWithoutQuestionsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutQuestionsInput, TeamUpdateWithoutQuestionsInput>, TeamUncheckedUpdateWithoutQuestionsInput>
  }

  export type SurveyResponseSummaryUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutQuestionInput, SurveyResponseSummaryUncheckedCreateWithoutQuestionInput> | SurveyResponseSummaryCreateWithoutQuestionInput[] | SurveyResponseSummaryUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutQuestionInput | SurveyResponseSummaryCreateOrConnectWithoutQuestionInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutQuestionInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: SurveyResponseSummaryCreateManyQuestionInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutQuestionInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutQuestionInput | SurveyResponseSummaryUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutQuestionInput | QuestionOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type QuestionResponseUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutQuestionInput, QuestionResponseUncheckedCreateWithoutQuestionInput> | QuestionResponseCreateWithoutQuestionInput[] | QuestionResponseUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutQuestionInput | QuestionResponseCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutQuestionInput | QuestionResponseUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionResponseCreateManyQuestionInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutQuestionInput | QuestionResponseUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutQuestionInput | QuestionResponseUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutQuestionInput, SurveyResponseSummaryUncheckedCreateWithoutQuestionInput> | SurveyResponseSummaryCreateWithoutQuestionInput[] | SurveyResponseSummaryUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutQuestionInput | SurveyResponseSummaryCreateOrConnectWithoutQuestionInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutQuestionInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: SurveyResponseSummaryCreateManyQuestionInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutQuestionInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutQuestionInput | SurveyResponseSummaryUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutOptionsInput = {
    create?: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionsInput
    connect?: QuestionWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutQuestionOptionsInput = {
    create?: XOR<TeamCreateWithoutQuestionOptionsInput, TeamUncheckedCreateWithoutQuestionOptionsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutQuestionOptionsInput
    connect?: TeamWhereUniqueInput
  }

  export type QuestionResponseCreateNestedManyWithoutOptionInput = {
    create?: XOR<QuestionResponseCreateWithoutOptionInput, QuestionResponseUncheckedCreateWithoutOptionInput> | QuestionResponseCreateWithoutOptionInput[] | QuestionResponseUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutOptionInput | QuestionResponseCreateOrConnectWithoutOptionInput[]
    createMany?: QuestionResponseCreateManyOptionInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type SurveyResponseSummaryCreateNestedManyWithoutOptionInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutOptionInput, SurveyResponseSummaryUncheckedCreateWithoutOptionInput> | SurveyResponseSummaryCreateWithoutOptionInput[] | SurveyResponseSummaryUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutOptionInput | SurveyResponseSummaryCreateOrConnectWithoutOptionInput[]
    createMany?: SurveyResponseSummaryCreateManyOptionInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionResponseUncheckedCreateNestedManyWithoutOptionInput = {
    create?: XOR<QuestionResponseCreateWithoutOptionInput, QuestionResponseUncheckedCreateWithoutOptionInput> | QuestionResponseCreateWithoutOptionInput[] | QuestionResponseUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutOptionInput | QuestionResponseCreateOrConnectWithoutOptionInput[]
    createMany?: QuestionResponseCreateManyOptionInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type SurveyResponseSummaryUncheckedCreateNestedManyWithoutOptionInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutOptionInput, SurveyResponseSummaryUncheckedCreateWithoutOptionInput> | SurveyResponseSummaryCreateWithoutOptionInput[] | SurveyResponseSummaryUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutOptionInput | SurveyResponseSummaryCreateOrConnectWithoutOptionInput[]
    createMany?: SurveyResponseSummaryCreateManyOptionInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionsInput
    upsert?: QuestionUpsertWithoutOptionsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutOptionsInput, QuestionUpdateWithoutOptionsInput>, QuestionUncheckedUpdateWithoutOptionsInput>
  }

  export type TeamUpdateOneRequiredWithoutQuestionOptionsNestedInput = {
    create?: XOR<TeamCreateWithoutQuestionOptionsInput, TeamUncheckedCreateWithoutQuestionOptionsInput>
    connectOrCreate?: TeamCreateOrConnectWithoutQuestionOptionsInput
    upsert?: TeamUpsertWithoutQuestionOptionsInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutQuestionOptionsInput, TeamUpdateWithoutQuestionOptionsInput>, TeamUncheckedUpdateWithoutQuestionOptionsInput>
  }

  export type QuestionResponseUpdateManyWithoutOptionNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutOptionInput, QuestionResponseUncheckedCreateWithoutOptionInput> | QuestionResponseCreateWithoutOptionInput[] | QuestionResponseUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutOptionInput | QuestionResponseCreateOrConnectWithoutOptionInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutOptionInput | QuestionResponseUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: QuestionResponseCreateManyOptionInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutOptionInput | QuestionResponseUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutOptionInput | QuestionResponseUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type SurveyResponseSummaryUpdateManyWithoutOptionNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutOptionInput, SurveyResponseSummaryUncheckedCreateWithoutOptionInput> | SurveyResponseSummaryCreateWithoutOptionInput[] | SurveyResponseSummaryUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutOptionInput | SurveyResponseSummaryCreateOrConnectWithoutOptionInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutOptionInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: SurveyResponseSummaryCreateManyOptionInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutOptionInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutOptionInput | SurveyResponseSummaryUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionResponseUncheckedUpdateManyWithoutOptionNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutOptionInput, QuestionResponseUncheckedCreateWithoutOptionInput> | QuestionResponseCreateWithoutOptionInput[] | QuestionResponseUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutOptionInput | QuestionResponseCreateOrConnectWithoutOptionInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutOptionInput | QuestionResponseUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: QuestionResponseCreateManyOptionInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutOptionInput | QuestionResponseUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutOptionInput | QuestionResponseUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutOptionNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutOptionInput, SurveyResponseSummaryUncheckedCreateWithoutOptionInput> | SurveyResponseSummaryCreateWithoutOptionInput[] | SurveyResponseSummaryUncheckedCreateWithoutOptionInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutOptionInput | SurveyResponseSummaryCreateOrConnectWithoutOptionInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutOptionInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutOptionInput[]
    createMany?: SurveyResponseSummaryCreateManyOptionInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutOptionInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutOptionInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutOptionInput | SurveyResponseSummaryUpdateManyWithWhereWithoutOptionInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionResponseCreateNestedManyWithoutResponseInput = {
    create?: XOR<QuestionResponseCreateWithoutResponseInput, QuestionResponseUncheckedCreateWithoutResponseInput> | QuestionResponseCreateWithoutResponseInput[] | QuestionResponseUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutResponseInput | QuestionResponseCreateOrConnectWithoutResponseInput[]
    createMany?: QuestionResponseCreateManyResponseInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type SurveyCreateNestedOneWithoutResponsesInput = {
    create?: XOR<SurveyCreateWithoutResponsesInput, SurveyUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutResponsesInput
    connect?: SurveyWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutSurveyResponsesInput = {
    create?: XOR<TeamCreateWithoutSurveyResponsesInput, TeamUncheckedCreateWithoutSurveyResponsesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveyResponsesInput
    connect?: TeamWhereUniqueInput
  }

  export type SurveyResponseSummaryCreateNestedManyWithoutResponseInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutResponseInput, SurveyResponseSummaryUncheckedCreateWithoutResponseInput> | SurveyResponseSummaryCreateWithoutResponseInput[] | SurveyResponseSummaryUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutResponseInput | SurveyResponseSummaryCreateOrConnectWithoutResponseInput[]
    createMany?: SurveyResponseSummaryCreateManyResponseInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type QuestionResponseUncheckedCreateNestedManyWithoutResponseInput = {
    create?: XOR<QuestionResponseCreateWithoutResponseInput, QuestionResponseUncheckedCreateWithoutResponseInput> | QuestionResponseCreateWithoutResponseInput[] | QuestionResponseUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutResponseInput | QuestionResponseCreateOrConnectWithoutResponseInput[]
    createMany?: QuestionResponseCreateManyResponseInputEnvelope
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
  }

  export type SurveyResponseSummaryUncheckedCreateNestedManyWithoutResponseInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutResponseInput, SurveyResponseSummaryUncheckedCreateWithoutResponseInput> | SurveyResponseSummaryCreateWithoutResponseInput[] | SurveyResponseSummaryUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutResponseInput | SurveyResponseSummaryCreateOrConnectWithoutResponseInput[]
    createMany?: SurveyResponseSummaryCreateManyResponseInputEnvelope
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
  }

  export type EnumResponseStatusFieldUpdateOperationsInput = {
    set?: $Enums.ResponseStatus
  }

  export type QuestionResponseUpdateManyWithoutResponseNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutResponseInput, QuestionResponseUncheckedCreateWithoutResponseInput> | QuestionResponseCreateWithoutResponseInput[] | QuestionResponseUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutResponseInput | QuestionResponseCreateOrConnectWithoutResponseInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutResponseInput | QuestionResponseUpsertWithWhereUniqueWithoutResponseInput[]
    createMany?: QuestionResponseCreateManyResponseInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutResponseInput | QuestionResponseUpdateWithWhereUniqueWithoutResponseInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutResponseInput | QuestionResponseUpdateManyWithWhereWithoutResponseInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type SurveyUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<SurveyCreateWithoutResponsesInput, SurveyUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutResponsesInput
    upsert?: SurveyUpsertWithoutResponsesInput
    connect?: SurveyWhereUniqueInput
    update?: XOR<XOR<SurveyUpdateToOneWithWhereWithoutResponsesInput, SurveyUpdateWithoutResponsesInput>, SurveyUncheckedUpdateWithoutResponsesInput>
  }

  export type TeamUpdateOneRequiredWithoutSurveyResponsesNestedInput = {
    create?: XOR<TeamCreateWithoutSurveyResponsesInput, TeamUncheckedCreateWithoutSurveyResponsesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSurveyResponsesInput
    upsert?: TeamUpsertWithoutSurveyResponsesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSurveyResponsesInput, TeamUpdateWithoutSurveyResponsesInput>, TeamUncheckedUpdateWithoutSurveyResponsesInput>
  }

  export type SurveyResponseSummaryUpdateManyWithoutResponseNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutResponseInput, SurveyResponseSummaryUncheckedCreateWithoutResponseInput> | SurveyResponseSummaryCreateWithoutResponseInput[] | SurveyResponseSummaryUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutResponseInput | SurveyResponseSummaryCreateOrConnectWithoutResponseInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutResponseInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutResponseInput[]
    createMany?: SurveyResponseSummaryCreateManyResponseInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutResponseInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutResponseInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutResponseInput | SurveyResponseSummaryUpdateManyWithWhereWithoutResponseInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type QuestionResponseUncheckedUpdateManyWithoutResponseNestedInput = {
    create?: XOR<QuestionResponseCreateWithoutResponseInput, QuestionResponseUncheckedCreateWithoutResponseInput> | QuestionResponseCreateWithoutResponseInput[] | QuestionResponseUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: QuestionResponseCreateOrConnectWithoutResponseInput | QuestionResponseCreateOrConnectWithoutResponseInput[]
    upsert?: QuestionResponseUpsertWithWhereUniqueWithoutResponseInput | QuestionResponseUpsertWithWhereUniqueWithoutResponseInput[]
    createMany?: QuestionResponseCreateManyResponseInputEnvelope
    set?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    disconnect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    delete?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    connect?: QuestionResponseWhereUniqueInput | QuestionResponseWhereUniqueInput[]
    update?: QuestionResponseUpdateWithWhereUniqueWithoutResponseInput | QuestionResponseUpdateWithWhereUniqueWithoutResponseInput[]
    updateMany?: QuestionResponseUpdateManyWithWhereWithoutResponseInput | QuestionResponseUpdateManyWithWhereWithoutResponseInput[]
    deleteMany?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutResponseNestedInput = {
    create?: XOR<SurveyResponseSummaryCreateWithoutResponseInput, SurveyResponseSummaryUncheckedCreateWithoutResponseInput> | SurveyResponseSummaryCreateWithoutResponseInput[] | SurveyResponseSummaryUncheckedCreateWithoutResponseInput[]
    connectOrCreate?: SurveyResponseSummaryCreateOrConnectWithoutResponseInput | SurveyResponseSummaryCreateOrConnectWithoutResponseInput[]
    upsert?: SurveyResponseSummaryUpsertWithWhereUniqueWithoutResponseInput | SurveyResponseSummaryUpsertWithWhereUniqueWithoutResponseInput[]
    createMany?: SurveyResponseSummaryCreateManyResponseInputEnvelope
    set?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    disconnect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    delete?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    connect?: SurveyResponseSummaryWhereUniqueInput | SurveyResponseSummaryWhereUniqueInput[]
    update?: SurveyResponseSummaryUpdateWithWhereUniqueWithoutResponseInput | SurveyResponseSummaryUpdateWithWhereUniqueWithoutResponseInput[]
    updateMany?: SurveyResponseSummaryUpdateManyWithWhereWithoutResponseInput | SurveyResponseSummaryUpdateManyWithWhereWithoutResponseInput[]
    deleteMany?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
  }

  export type SurveyCreateNestedOneWithoutSurveyResponseSummaryInput = {
    create?: XOR<SurveyCreateWithoutSurveyResponseSummaryInput, SurveyUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutSurveyResponseSummaryInput
    connect?: SurveyWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutSurveyResponseSummaryInput = {
    create?: XOR<QuestionCreateWithoutSurveyResponseSummaryInput, QuestionUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutSurveyResponseSummaryInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionOptionCreateNestedOneWithoutSurveyResponseSummaryInput = {
    create?: XOR<QuestionOptionCreateWithoutSurveyResponseSummaryInput, QuestionOptionUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutSurveyResponseSummaryInput
    connect?: QuestionOptionWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutResponseSummariesInput = {
    create?: XOR<TeamCreateWithoutResponseSummariesInput, TeamUncheckedCreateWithoutResponseSummariesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutResponseSummariesInput
    connect?: TeamWhereUniqueInput
  }

  export type SurveyResponseCreateNestedOneWithoutSurveyResponseSummaryInput = {
    create?: XOR<SurveyResponseCreateWithoutSurveyResponseSummaryInput, SurveyResponseUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutSurveyResponseSummaryInput
    connect?: SurveyResponseWhereUniqueInput
  }

  export type NullableEnumQuestionFormatFieldUpdateOperationsInput = {
    set?: $Enums.QuestionFormat | null
  }

  export type SurveyUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput = {
    create?: XOR<SurveyCreateWithoutSurveyResponseSummaryInput, SurveyUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: SurveyCreateOrConnectWithoutSurveyResponseSummaryInput
    upsert?: SurveyUpsertWithoutSurveyResponseSummaryInput
    connect?: SurveyWhereUniqueInput
    update?: XOR<XOR<SurveyUpdateToOneWithWhereWithoutSurveyResponseSummaryInput, SurveyUpdateWithoutSurveyResponseSummaryInput>, SurveyUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput = {
    create?: XOR<QuestionCreateWithoutSurveyResponseSummaryInput, QuestionUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutSurveyResponseSummaryInput
    upsert?: QuestionUpsertWithoutSurveyResponseSummaryInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutSurveyResponseSummaryInput, QuestionUpdateWithoutSurveyResponseSummaryInput>, QuestionUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionOptionUpdateOneWithoutSurveyResponseSummaryNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutSurveyResponseSummaryInput, QuestionOptionUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutSurveyResponseSummaryInput
    upsert?: QuestionOptionUpsertWithoutSurveyResponseSummaryInput
    disconnect?: QuestionOptionWhereInput | boolean
    delete?: QuestionOptionWhereInput | boolean
    connect?: QuestionOptionWhereUniqueInput
    update?: XOR<XOR<QuestionOptionUpdateToOneWithWhereWithoutSurveyResponseSummaryInput, QuestionOptionUpdateWithoutSurveyResponseSummaryInput>, QuestionOptionUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type TeamUpdateOneRequiredWithoutResponseSummariesNestedInput = {
    create?: XOR<TeamCreateWithoutResponseSummariesInput, TeamUncheckedCreateWithoutResponseSummariesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutResponseSummariesInput
    upsert?: TeamUpsertWithoutResponseSummariesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutResponseSummariesInput, TeamUpdateWithoutResponseSummariesInput>, TeamUncheckedUpdateWithoutResponseSummariesInput>
  }

  export type SurveyResponseUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput = {
    create?: XOR<SurveyResponseCreateWithoutSurveyResponseSummaryInput, SurveyResponseUncheckedCreateWithoutSurveyResponseSummaryInput>
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutSurveyResponseSummaryInput
    upsert?: SurveyResponseUpsertWithoutSurveyResponseSummaryInput
    connect?: SurveyResponseWhereUniqueInput
    update?: XOR<XOR<SurveyResponseUpdateToOneWithWhereWithoutSurveyResponseSummaryInput, SurveyResponseUpdateWithoutSurveyResponseSummaryInput>, SurveyResponseUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionOptionCreateNestedOneWithoutResponsesInput = {
    create?: XOR<QuestionOptionCreateWithoutResponsesInput, QuestionOptionUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutResponsesInput
    connect?: QuestionOptionWhereUniqueInput
  }

  export type QuestionCreateNestedOneWithoutResponsesInput = {
    create?: XOR<QuestionCreateWithoutResponsesInput, QuestionUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutResponsesInput
    connect?: QuestionWhereUniqueInput
  }

  export type SurveyResponseCreateNestedOneWithoutQuestionResponsesInput = {
    create?: XOR<SurveyResponseCreateWithoutQuestionResponsesInput, SurveyResponseUncheckedCreateWithoutQuestionResponsesInput>
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutQuestionResponsesInput
    connect?: SurveyResponseWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutQuestionResponsesInput = {
    create?: XOR<TeamCreateWithoutQuestionResponsesInput, TeamUncheckedCreateWithoutQuestionResponsesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutQuestionResponsesInput
    connect?: TeamWhereUniqueInput
  }

  export type QuestionOptionUpdateOneWithoutResponsesNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutResponsesInput, QuestionOptionUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutResponsesInput
    upsert?: QuestionOptionUpsertWithoutResponsesInput
    disconnect?: QuestionOptionWhereInput | boolean
    delete?: QuestionOptionWhereInput | boolean
    connect?: QuestionOptionWhereUniqueInput
    update?: XOR<XOR<QuestionOptionUpdateToOneWithWhereWithoutResponsesInput, QuestionOptionUpdateWithoutResponsesInput>, QuestionOptionUncheckedUpdateWithoutResponsesInput>
  }

  export type QuestionUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<QuestionCreateWithoutResponsesInput, QuestionUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutResponsesInput
    upsert?: QuestionUpsertWithoutResponsesInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutResponsesInput, QuestionUpdateWithoutResponsesInput>, QuestionUncheckedUpdateWithoutResponsesInput>
  }

  export type SurveyResponseUpdateOneRequiredWithoutQuestionResponsesNestedInput = {
    create?: XOR<SurveyResponseCreateWithoutQuestionResponsesInput, SurveyResponseUncheckedCreateWithoutQuestionResponsesInput>
    connectOrCreate?: SurveyResponseCreateOrConnectWithoutQuestionResponsesInput
    upsert?: SurveyResponseUpsertWithoutQuestionResponsesInput
    connect?: SurveyResponseWhereUniqueInput
    update?: XOR<XOR<SurveyResponseUpdateToOneWithWhereWithoutQuestionResponsesInput, SurveyResponseUpdateWithoutQuestionResponsesInput>, SurveyResponseUncheckedUpdateWithoutQuestionResponsesInput>
  }

  export type TeamUpdateOneRequiredWithoutQuestionResponsesNestedInput = {
    create?: XOR<TeamCreateWithoutQuestionResponsesInput, TeamUncheckedCreateWithoutQuestionResponsesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutQuestionResponsesInput
    upsert?: TeamUpsertWithoutQuestionResponsesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutQuestionResponsesInput, TeamUpdateWithoutQuestionResponsesInput>, TeamUncheckedUpdateWithoutQuestionResponsesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderFilter<$PrismaModel> | $Enums.Provider
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumThemeFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeFilter<$PrismaModel> | $Enums.Theme
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Provider | EnumProviderFieldRefInput<$PrismaModel>
    in?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Provider[] | ListEnumProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumProviderWithAggregatesFilter<$PrismaModel> | $Enums.Provider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProviderFilter<$PrismaModel>
    _max?: NestedEnumProviderFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumThemeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Theme | EnumThemeFieldRefInput<$PrismaModel>
    in?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    notIn?: $Enums.Theme[] | ListEnumThemeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeWithAggregatesFilter<$PrismaModel> | $Enums.Theme
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeFilter<$PrismaModel>
    _max?: NestedEnumThemeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTeamMemberStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamMemberStatus | EnumTeamMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamMemberStatusFilter<$PrismaModel> | $Enums.TeamMemberStatus
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTeamMemberStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamMemberStatus | EnumTeamMemberStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamMemberStatus[] | ListEnumTeamMemberStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamMemberStatusWithAggregatesFilter<$PrismaModel> | $Enums.TeamMemberStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamMemberStatusFilter<$PrismaModel>
    _max?: NestedEnumTeamMemberStatusFilter<$PrismaModel>
  }

  export type NestedEnumSurveyStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SurveyStatus | EnumSurveyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSurveyStatusFilter<$PrismaModel> | $Enums.SurveyStatus
  }

  export type NestedEnumSurveyStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SurveyStatus | EnumSurveyStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SurveyStatus[] | ListEnumSurveyStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSurveyStatusWithAggregatesFilter<$PrismaModel> | $Enums.SurveyStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSurveyStatusFilter<$PrismaModel>
    _max?: NestedEnumSurveyStatusFilter<$PrismaModel>
  }

  export type NestedEnumStyleModeFilter<$PrismaModel = never> = {
    equals?: $Enums.StyleMode | EnumStyleModeFieldRefInput<$PrismaModel>
    in?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    not?: NestedEnumStyleModeFilter<$PrismaModel> | $Enums.StyleMode
  }

  export type NestedEnumStyleModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StyleMode | EnumStyleModeFieldRefInput<$PrismaModel>
    in?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StyleMode[] | ListEnumStyleModeFieldRefInput<$PrismaModel>
    not?: NestedEnumStyleModeWithAggregatesFilter<$PrismaModel> | $Enums.StyleMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStyleModeFilter<$PrismaModel>
    _max?: NestedEnumStyleModeFilter<$PrismaModel>
  }

  export type NestedEnumQuestionFormatFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionFormatFilter<$PrismaModel> | $Enums.QuestionFormat
  }

  export type NestedEnumQuestionFormatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionFormatWithAggregatesFilter<$PrismaModel> | $Enums.QuestionFormat
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionFormatFilter<$PrismaModel>
    _max?: NestedEnumQuestionFormatFilter<$PrismaModel>
  }

  export type NestedEnumResponseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseStatus | EnumResponseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseStatusFilter<$PrismaModel> | $Enums.ResponseStatus
  }

  export type NestedEnumResponseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseStatus | EnumResponseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseStatus[] | ListEnumResponseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseStatusWithAggregatesFilter<$PrismaModel> | $Enums.ResponseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResponseStatusFilter<$PrismaModel>
    _max?: NestedEnumResponseStatusFilter<$PrismaModel>
  }

  export type NestedEnumQuestionFormatNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel> | null
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumQuestionFormatNullableFilter<$PrismaModel> | $Enums.QuestionFormat | null
  }

  export type NestedEnumQuestionFormatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionFormat | EnumQuestionFormatFieldRefInput<$PrismaModel> | null
    in?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.QuestionFormat[] | ListEnumQuestionFormatFieldRefInput<$PrismaModel> | null
    not?: NestedEnumQuestionFormatNullableWithAggregatesFilter<$PrismaModel> | $Enums.QuestionFormat | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumQuestionFormatNullableFilter<$PrismaModel>
    _max?: NestedEnumQuestionFormatNullableFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamMemberCreateWithoutUserInput = {
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type TeamMemberUncheckedCreateWithoutUserInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
  }

  export type TeamMemberCreateOrConnectWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberCreateManyUserInputEnvelope = {
    data: TeamMemberCreateManyUserInput | TeamMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutAvatarForInput = {
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUncheckedCreateWithoutAvatarForInput = {
    id?: number
    name: string
    url: string
    publicId?: string | null
    format?: string | null
    version?: string | null
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutAvatarForInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
  }

  export type TeamCreateWithoutUserInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutUserInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamMemberScalarWhereInput = {
    AND?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    OR?: TeamMemberScalarWhereInput[]
    NOT?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    id?: IntFilter<"TeamMember"> | number
    isAdmin?: BoolFilter<"TeamMember"> | boolean
    canPost?: BoolFilter<"TeamMember"> | boolean
    canApprove?: BoolFilter<"TeamMember"> | boolean
    isOwner?: BoolFilter<"TeamMember"> | boolean
    teamMemberStatus?: EnumTeamMemberStatusFilter<"TeamMember"> | $Enums.TeamMemberStatus
    createdAt?: DateTimeFilter<"TeamMember"> | Date | string
    updatedAt?: DateTimeFilter<"TeamMember"> | Date | string
    userId?: IntFilter<"TeamMember"> | number
    teamId?: IntFilter<"TeamMember"> | number
  }

  export type FileUpsertWithoutAvatarForInput = {
    update: XOR<FileUpdateWithoutAvatarForInput, FileUncheckedUpdateWithoutAvatarForInput>
    create: XOR<FileCreateWithoutAvatarForInput, FileUncheckedCreateWithoutAvatarForInput>
    where?: FileWhereInput
  }

  export type FileUpdateToOneWithWhereWithoutAvatarForInput = {
    where?: FileWhereInput
    data: XOR<FileUpdateWithoutAvatarForInput, FileUncheckedUpdateWithoutAvatarForInput>
  }

  export type FileUpdateWithoutAvatarForInput = {
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateWithoutAvatarForInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    publicId?: NullableStringFieldUpdateOperationsInput | string | null
    format?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpsertWithoutUserInput = {
    update: XOR<TeamUpdateWithoutUserInput, TeamUncheckedUpdateWithoutUserInput>
    create: XOR<TeamCreateWithoutUserInput, TeamUncheckedCreateWithoutUserInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutUserInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutUserInput, TeamUncheckedUpdateWithoutUserInput>
  }

  export type TeamUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserCreateWithoutAvatarInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    team?: TeamCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvatarInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvatarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserCreateManyAvatarInputEnvelope = {
    data: UserCreateManyAvatarInput | UserCreateManyAvatarInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
  }

  export type UserUpdateManyWithWhereWithoutAvatarInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAvatarInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    provider?: EnumProviderFilter<"User"> | $Enums.Provider
    password?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    confirmationToken?: StringNullableFilter<"User"> | string | null
    confirmed?: BoolNullableFilter<"User"> | boolean | null
    blocked?: BoolNullableFilter<"User"> | boolean | null
    phone?: StringNullableFilter<"User"> | string | null
    firstName?: StringFilter<"User"> | string
    lastName?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    language?: EnumLanguageFilter<"User"> | $Enums.Language
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatarId?: IntNullableFilter<"User"> | number | null
    idProvider?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    theme?: EnumThemeFilter<"User"> | $Enums.Theme
    defaultTeamId?: IntNullableFilter<"User"> | number | null
  }

  export type UserCreateWithoutAccountsInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    sessions?: SessionCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    team?: TeamCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    sessions?: SessionUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    team?: TeamUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    team?: TeamCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    team?: TeamUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuestionOptionCreateWithoutTeamInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOther?: boolean
    question: QuestionCreateNestedOneWithoutOptionsInput
    responses?: QuestionResponseCreateNestedManyWithoutOptionInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionUncheckedCreateWithoutTeamInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    isOther?: boolean
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutOptionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionCreateOrConnectWithoutTeamInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutTeamInput, QuestionOptionUncheckedCreateWithoutTeamInput>
  }

  export type QuestionOptionCreateManyTeamInputEnvelope = {
    data: QuestionOptionCreateManyTeamInput | QuestionOptionCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type QuestionResponseCreateWithoutTeamInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    option?: QuestionOptionCreateNestedOneWithoutResponsesInput
    question: QuestionCreateNestedOneWithoutResponsesInput
    response: SurveyResponseCreateNestedOneWithoutQuestionResponsesInput
  }

  export type QuestionResponseUncheckedCreateWithoutTeamInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    responseId: string
  }

  export type QuestionResponseCreateOrConnectWithoutTeamInput = {
    where: QuestionResponseWhereUniqueInput
    create: XOR<QuestionResponseCreateWithoutTeamInput, QuestionResponseUncheckedCreateWithoutTeamInput>
  }

  export type QuestionResponseCreateManyTeamInputEnvelope = {
    data: QuestionResponseCreateManyTeamInput | QuestionResponseCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutTeamInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addOther?: boolean
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseCreateNestedManyWithoutQuestionInput
    survey: SurveyCreateNestedOneWithoutQuestionsInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutTeamInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    addOther?: boolean
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutQuestionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutTeamInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutTeamInput, QuestionUncheckedCreateWithoutTeamInput>
  }

  export type QuestionCreateManyTeamInputEnvelope = {
    data: QuestionCreateManyTeamInput | QuestionCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type SurveyResponseCreateWithoutTeamInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionResponses?: QuestionResponseCreateNestedManyWithoutResponseInput
    survey: SurveyCreateNestedOneWithoutResponsesInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseUncheckedCreateWithoutTeamInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutResponseInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseCreateOrConnectWithoutTeamInput = {
    where: SurveyResponseWhereUniqueInput
    create: XOR<SurveyResponseCreateWithoutTeamInput, SurveyResponseUncheckedCreateWithoutTeamInput>
  }

  export type SurveyResponseCreateManyTeamInputEnvelope = {
    data: SurveyResponseCreateManyTeamInput | SurveyResponseCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type SurveyStyleCreateWithoutTeamInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    border?: string
    survey: SurveyCreateNestedOneWithoutStyleInput
  }

  export type SurveyStyleUncheckedCreateWithoutTeamInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    border?: string
  }

  export type SurveyStyleCreateOrConnectWithoutTeamInput = {
    where: SurveyStyleWhereUniqueInput
    create: XOR<SurveyStyleCreateWithoutTeamInput, SurveyStyleUncheckedCreateWithoutTeamInput>
  }

  export type SurveyStyleCreateManyTeamInputEnvelope = {
    data: SurveyStyleCreateManyTeamInput | SurveyStyleCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type SurveyTypeCreateWithoutTeamInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    surveys?: SurveyCreateNestedManyWithoutTypeInput
  }

  export type SurveyTypeUncheckedCreateWithoutTeamInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    surveys?: SurveyUncheckedCreateNestedManyWithoutTypeInput
  }

  export type SurveyTypeCreateOrConnectWithoutTeamInput = {
    where: SurveyTypeWhereUniqueInput
    create: XOR<SurveyTypeCreateWithoutTeamInput, SurveyTypeUncheckedCreateWithoutTeamInput>
  }

  export type SurveyTypeCreateManyTeamInputEnvelope = {
    data: SurveyTypeCreateManyTeamInput | SurveyTypeCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type SurveyCreateWithoutTeamInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleCreateNestedOneWithoutSurveyInput
    type?: SurveyTypeCreateNestedOneWithoutSurveysInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutTeamInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SurveyCreateOrConnectWithoutTeamInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutTeamInput, SurveyUncheckedCreateWithoutTeamInput>
  }

  export type SurveyCreateManyTeamInputEnvelope = {
    data: SurveyCreateManyTeamInput | SurveyCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TeamMemberCreateWithoutTeamInput = {
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTeamMembersInput
  }

  export type TeamMemberUncheckedCreateWithoutTeamInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type TeamMemberCreateOrConnectWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberCreateManyTeamInputEnvelope = {
    data: TeamMemberCreateManyTeamInput | TeamMemberCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTeamInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
  }

  export type UserUncheckedCreateWithoutTeamInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    teamMembers?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type UserCreateManyTeamInputEnvelope = {
    data: UserCreateManyTeamInput | UserCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type SurveyResponseSummaryCreateWithoutTeamInput = {
    id?: string
    questionTitle?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
    survey: SurveyCreateNestedOneWithoutSurveyResponseSummaryInput
    question: QuestionCreateNestedOneWithoutSurveyResponseSummaryInput
    option?: QuestionOptionCreateNestedOneWithoutSurveyResponseSummaryInput
    response: SurveyResponseCreateNestedOneWithoutSurveyResponseSummaryInput
  }

  export type SurveyResponseSummaryUncheckedCreateWithoutTeamInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryCreateOrConnectWithoutTeamInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    create: XOR<SurveyResponseSummaryCreateWithoutTeamInput, SurveyResponseSummaryUncheckedCreateWithoutTeamInput>
  }

  export type SurveyResponseSummaryCreateManyTeamInputEnvelope = {
    data: SurveyResponseSummaryCreateManyTeamInput | SurveyResponseSummaryCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type QuestionOptionUpsertWithWhereUniqueWithoutTeamInput = {
    where: QuestionOptionWhereUniqueInput
    update: XOR<QuestionOptionUpdateWithoutTeamInput, QuestionOptionUncheckedUpdateWithoutTeamInput>
    create: XOR<QuestionOptionCreateWithoutTeamInput, QuestionOptionUncheckedCreateWithoutTeamInput>
  }

  export type QuestionOptionUpdateWithWhereUniqueWithoutTeamInput = {
    where: QuestionOptionWhereUniqueInput
    data: XOR<QuestionOptionUpdateWithoutTeamInput, QuestionOptionUncheckedUpdateWithoutTeamInput>
  }

  export type QuestionOptionUpdateManyWithWhereWithoutTeamInput = {
    where: QuestionOptionScalarWhereInput
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyWithoutTeamInput>
  }

  export type QuestionOptionScalarWhereInput = {
    AND?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
    OR?: QuestionOptionScalarWhereInput[]
    NOT?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
    id?: StringFilter<"QuestionOption"> | string
    text?: StringFilter<"QuestionOption"> | string
    order?: IntFilter<"QuestionOption"> | number
    createdAt?: DateTimeFilter<"QuestionOption"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionOption"> | Date | string
    questionId?: StringFilter<"QuestionOption"> | string
    teamId?: IntFilter<"QuestionOption"> | number
    isOther?: BoolFilter<"QuestionOption"> | boolean
  }

  export type QuestionResponseUpsertWithWhereUniqueWithoutTeamInput = {
    where: QuestionResponseWhereUniqueInput
    update: XOR<QuestionResponseUpdateWithoutTeamInput, QuestionResponseUncheckedUpdateWithoutTeamInput>
    create: XOR<QuestionResponseCreateWithoutTeamInput, QuestionResponseUncheckedCreateWithoutTeamInput>
  }

  export type QuestionResponseUpdateWithWhereUniqueWithoutTeamInput = {
    where: QuestionResponseWhereUniqueInput
    data: XOR<QuestionResponseUpdateWithoutTeamInput, QuestionResponseUncheckedUpdateWithoutTeamInput>
  }

  export type QuestionResponseUpdateManyWithWhereWithoutTeamInput = {
    where: QuestionResponseScalarWhereInput
    data: XOR<QuestionResponseUpdateManyMutationInput, QuestionResponseUncheckedUpdateManyWithoutTeamInput>
  }

  export type QuestionResponseScalarWhereInput = {
    AND?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
    OR?: QuestionResponseScalarWhereInput[]
    NOT?: QuestionResponseScalarWhereInput | QuestionResponseScalarWhereInput[]
    id?: StringFilter<"QuestionResponse"> | string
    isOther?: BoolNullableFilter<"QuestionResponse"> | boolean | null
    textValue?: StringNullableFilter<"QuestionResponse"> | string | null
    numberValue?: IntNullableFilter<"QuestionResponse"> | number | null
    booleanValue?: BoolNullableFilter<"QuestionResponse"> | boolean | null
    createdAt?: DateTimeFilter<"QuestionResponse"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionResponse"> | Date | string
    questionId?: StringFilter<"QuestionResponse"> | string
    questionTitle?: StringNullableFilter<"QuestionResponse"> | string | null
    questionFormat?: EnumQuestionFormatNullableFilter<"QuestionResponse"> | $Enums.QuestionFormat | null
    optionId?: StringNullableFilter<"QuestionResponse"> | string | null
    responseId?: StringFilter<"QuestionResponse"> | string
    teamId?: IntFilter<"QuestionResponse"> | number
  }

  export type QuestionUpsertWithWhereUniqueWithoutTeamInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutTeamInput, QuestionUncheckedUpdateWithoutTeamInput>
    create: XOR<QuestionCreateWithoutTeamInput, QuestionUncheckedCreateWithoutTeamInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutTeamInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutTeamInput, QuestionUncheckedUpdateWithoutTeamInput>
  }

  export type QuestionUpdateManyWithWhereWithoutTeamInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutTeamInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    title?: StringFilter<"Question"> | string
    description?: StringNullableFilter<"Question"> | string | null
    format?: EnumQuestionFormatFilter<"Question"> | $Enums.QuestionFormat
    required?: BoolFilter<"Question"> | boolean
    order?: IntFilter<"Question"> | number
    yesLabel?: StringNullableFilter<"Question"> | string | null
    noLabel?: StringNullableFilter<"Question"> | string | null
    buttonLabel?: StringNullableFilter<"Question"> | string | null
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    surveyId?: StringFilter<"Question"> | string
    teamId?: IntFilter<"Question"> | number
    addOther?: BoolFilter<"Question"> | boolean
  }

  export type SurveyResponseUpsertWithWhereUniqueWithoutTeamInput = {
    where: SurveyResponseWhereUniqueInput
    update: XOR<SurveyResponseUpdateWithoutTeamInput, SurveyResponseUncheckedUpdateWithoutTeamInput>
    create: XOR<SurveyResponseCreateWithoutTeamInput, SurveyResponseUncheckedCreateWithoutTeamInput>
  }

  export type SurveyResponseUpdateWithWhereUniqueWithoutTeamInput = {
    where: SurveyResponseWhereUniqueInput
    data: XOR<SurveyResponseUpdateWithoutTeamInput, SurveyResponseUncheckedUpdateWithoutTeamInput>
  }

  export type SurveyResponseUpdateManyWithWhereWithoutTeamInput = {
    where: SurveyResponseScalarWhereInput
    data: XOR<SurveyResponseUpdateManyMutationInput, SurveyResponseUncheckedUpdateManyWithoutTeamInput>
  }

  export type SurveyResponseScalarWhereInput = {
    AND?: SurveyResponseScalarWhereInput | SurveyResponseScalarWhereInput[]
    OR?: SurveyResponseScalarWhereInput[]
    NOT?: SurveyResponseScalarWhereInput | SurveyResponseScalarWhereInput[]
    id?: StringFilter<"SurveyResponse"> | string
    status?: EnumResponseStatusFilter<"SurveyResponse"> | $Enums.ResponseStatus
    userId?: StringNullableFilter<"SurveyResponse"> | string | null
    userIp?: StringNullableFilter<"SurveyResponse"> | string | null
    extraInfo?: StringNullableFilter<"SurveyResponse"> | string | null
    origin?: StringNullableFilter<"SurveyResponse"> | string | null
    expiresAt?: DateTimeNullableFilter<"SurveyResponse"> | Date | string | null
    submittedAt?: DateTimeNullableFilter<"SurveyResponse"> | Date | string | null
    createdAt?: DateTimeFilter<"SurveyResponse"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyResponse"> | Date | string
    surveyId?: StringFilter<"SurveyResponse"> | string
    teamId?: IntFilter<"SurveyResponse"> | number
  }

  export type SurveyStyleUpsertWithWhereUniqueWithoutTeamInput = {
    where: SurveyStyleWhereUniqueInput
    update: XOR<SurveyStyleUpdateWithoutTeamInput, SurveyStyleUncheckedUpdateWithoutTeamInput>
    create: XOR<SurveyStyleCreateWithoutTeamInput, SurveyStyleUncheckedCreateWithoutTeamInput>
  }

  export type SurveyStyleUpdateWithWhereUniqueWithoutTeamInput = {
    where: SurveyStyleWhereUniqueInput
    data: XOR<SurveyStyleUpdateWithoutTeamInput, SurveyStyleUncheckedUpdateWithoutTeamInput>
  }

  export type SurveyStyleUpdateManyWithWhereWithoutTeamInput = {
    where: SurveyStyleScalarWhereInput
    data: XOR<SurveyStyleUpdateManyMutationInput, SurveyStyleUncheckedUpdateManyWithoutTeamInput>
  }

  export type SurveyStyleScalarWhereInput = {
    AND?: SurveyStyleScalarWhereInput | SurveyStyleScalarWhereInput[]
    OR?: SurveyStyleScalarWhereInput[]
    NOT?: SurveyStyleScalarWhereInput | SurveyStyleScalarWhereInput[]
    id?: StringFilter<"SurveyStyle"> | string
    backgroundColor?: StringFilter<"SurveyStyle"> | string
    textColor?: StringFilter<"SurveyStyle"> | string
    buttonBackgroundColor?: StringFilter<"SurveyStyle"> | string
    buttonTextColor?: StringFilter<"SurveyStyle"> | string
    margin?: StringFilter<"SurveyStyle"> | string
    padding?: StringFilter<"SurveyStyle"> | string
    borderRadius?: StringFilter<"SurveyStyle"> | string
    titleFontSize?: StringFilter<"SurveyStyle"> | string
    bodyFontSize?: StringFilter<"SurveyStyle"> | string
    fontFamily?: StringFilter<"SurveyStyle"> | string
    basicCSS?: StringFilter<"SurveyStyle"> | string
    styleMode?: EnumStyleModeFilter<"SurveyStyle"> | $Enums.StyleMode
    advancedCSS?: StringNullableFilter<"SurveyStyle"> | string | null
    createdAt?: DateTimeFilter<"SurveyStyle"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyStyle"> | Date | string
    surveyId?: StringFilter<"SurveyStyle"> | string
    teamId?: IntFilter<"SurveyStyle"> | number
    border?: StringFilter<"SurveyStyle"> | string
  }

  export type SurveyTypeUpsertWithWhereUniqueWithoutTeamInput = {
    where: SurveyTypeWhereUniqueInput
    update: XOR<SurveyTypeUpdateWithoutTeamInput, SurveyTypeUncheckedUpdateWithoutTeamInput>
    create: XOR<SurveyTypeCreateWithoutTeamInput, SurveyTypeUncheckedCreateWithoutTeamInput>
  }

  export type SurveyTypeUpdateWithWhereUniqueWithoutTeamInput = {
    where: SurveyTypeWhereUniqueInput
    data: XOR<SurveyTypeUpdateWithoutTeamInput, SurveyTypeUncheckedUpdateWithoutTeamInput>
  }

  export type SurveyTypeUpdateManyWithWhereWithoutTeamInput = {
    where: SurveyTypeScalarWhereInput
    data: XOR<SurveyTypeUpdateManyMutationInput, SurveyTypeUncheckedUpdateManyWithoutTeamInput>
  }

  export type SurveyTypeScalarWhereInput = {
    AND?: SurveyTypeScalarWhereInput | SurveyTypeScalarWhereInput[]
    OR?: SurveyTypeScalarWhereInput[]
    NOT?: SurveyTypeScalarWhereInput | SurveyTypeScalarWhereInput[]
    id?: StringFilter<"SurveyType"> | string
    name?: StringFilter<"SurveyType"> | string
    isDefault?: BoolFilter<"SurveyType"> | boolean
    createdAt?: DateTimeFilter<"SurveyType"> | Date | string
    updatedAt?: DateTimeFilter<"SurveyType"> | Date | string
    teamId?: IntFilter<"SurveyType"> | number
  }

  export type SurveyUpsertWithWhereUniqueWithoutTeamInput = {
    where: SurveyWhereUniqueInput
    update: XOR<SurveyUpdateWithoutTeamInput, SurveyUncheckedUpdateWithoutTeamInput>
    create: XOR<SurveyCreateWithoutTeamInput, SurveyUncheckedCreateWithoutTeamInput>
  }

  export type SurveyUpdateWithWhereUniqueWithoutTeamInput = {
    where: SurveyWhereUniqueInput
    data: XOR<SurveyUpdateWithoutTeamInput, SurveyUncheckedUpdateWithoutTeamInput>
  }

  export type SurveyUpdateManyWithWhereWithoutTeamInput = {
    where: SurveyScalarWhereInput
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyWithoutTeamInput>
  }

  export type SurveyScalarWhereInput = {
    AND?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
    OR?: SurveyScalarWhereInput[]
    NOT?: SurveyScalarWhereInput | SurveyScalarWhereInput[]
    id?: StringFilter<"Survey"> | string
    name?: StringFilter<"Survey"> | string
    description?: StringNullableFilter<"Survey"> | string | null
    status?: EnumSurveyStatusFilter<"Survey"> | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFilter<"Survey"> | boolean
    createdAt?: DateTimeFilter<"Survey"> | Date | string
    updatedAt?: DateTimeFilter<"Survey"> | Date | string
    teamId?: IntFilter<"Survey"> | number
    typeId?: StringNullableFilter<"Survey"> | string | null
    ResponseRate?: IntFilter<"Survey"> | number
    totalOpenSurveys?: IntFilter<"Survey"> | number
    totalResponses?: IntFilter<"Survey"> | number
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutTeamInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTeamInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
    create: XOR<UserCreateWithoutTeamInput, UserUncheckedCreateWithoutTeamInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeamInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeamInput, UserUncheckedUpdateWithoutTeamInput>
  }

  export type UserUpdateManyWithWhereWithoutTeamInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeamInput>
  }

  export type SurveyResponseSummaryUpsertWithWhereUniqueWithoutTeamInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    update: XOR<SurveyResponseSummaryUpdateWithoutTeamInput, SurveyResponseSummaryUncheckedUpdateWithoutTeamInput>
    create: XOR<SurveyResponseSummaryCreateWithoutTeamInput, SurveyResponseSummaryUncheckedCreateWithoutTeamInput>
  }

  export type SurveyResponseSummaryUpdateWithWhereUniqueWithoutTeamInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    data: XOR<SurveyResponseSummaryUpdateWithoutTeamInput, SurveyResponseSummaryUncheckedUpdateWithoutTeamInput>
  }

  export type SurveyResponseSummaryUpdateManyWithWhereWithoutTeamInput = {
    where: SurveyResponseSummaryScalarWhereInput
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyWithoutTeamInput>
  }

  export type SurveyResponseSummaryScalarWhereInput = {
    AND?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
    OR?: SurveyResponseSummaryScalarWhereInput[]
    NOT?: SurveyResponseSummaryScalarWhereInput | SurveyResponseSummaryScalarWhereInput[]
    id?: StringFilter<"SurveyResponseSummary"> | string
    surveyId?: StringFilter<"SurveyResponseSummary"> | string
    questionId?: StringFilter<"SurveyResponseSummary"> | string
    questionTitle?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    responseId?: StringFilter<"SurveyResponseSummary"> | string
    optionId?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    textValue?: StringNullableFilter<"SurveyResponseSummary"> | string | null
    questionFormat?: EnumQuestionFormatNullableFilter<"SurveyResponseSummary"> | $Enums.QuestionFormat | null
    isOther?: BoolNullableFilter<"SurveyResponseSummary"> | boolean | null
    numberValue?: IntNullableFilter<"SurveyResponseSummary"> | number | null
    booleanValue?: BoolNullableFilter<"SurveyResponseSummary"> | boolean | null
    teamId?: IntFilter<"SurveyResponseSummary"> | number
    responseCount?: IntFilter<"SurveyResponseSummary"> | number
    lastUpdated?: DateTimeFilter<"SurveyResponseSummary"> | Date | string
  }

  export type TeamCreateWithoutMembersInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutTeamMembersInput = {
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    avatar?: FileCreateNestedOneWithoutAvatarForInput
    team?: TeamCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeamMembersInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeamMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
  }

  export type TeamUpsertWithoutMembersInput = {
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type TeamUpdateWithoutMembersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserUpsertWithoutTeamMembersInput = {
    update: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
    create: XOR<UserCreateWithoutTeamMembersInput, UserUncheckedCreateWithoutTeamMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMembersInput, UserUncheckedUpdateWithoutTeamMembersInput>
  }

  export type UserUpdateWithoutTeamMembersInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
    team?: TeamUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeamCreateWithoutSurveyTypesInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSurveyTypesInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSurveyTypesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSurveyTypesInput, TeamUncheckedCreateWithoutSurveyTypesInput>
  }

  export type SurveyCreateWithoutTypeInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleCreateNestedOneWithoutSurveyInput
    team: TeamCreateNestedOneWithoutSurveysInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutTypeInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SurveyCreateOrConnectWithoutTypeInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutTypeInput, SurveyUncheckedCreateWithoutTypeInput>
  }

  export type SurveyCreateManyTypeInputEnvelope = {
    data: SurveyCreateManyTypeInput | SurveyCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutSurveyTypesInput = {
    update: XOR<TeamUpdateWithoutSurveyTypesInput, TeamUncheckedUpdateWithoutSurveyTypesInput>
    create: XOR<TeamCreateWithoutSurveyTypesInput, TeamUncheckedCreateWithoutSurveyTypesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSurveyTypesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSurveyTypesInput, TeamUncheckedUpdateWithoutSurveyTypesInput>
  }

  export type TeamUpdateWithoutSurveyTypesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSurveyTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type SurveyUpsertWithWhereUniqueWithoutTypeInput = {
    where: SurveyWhereUniqueInput
    update: XOR<SurveyUpdateWithoutTypeInput, SurveyUncheckedUpdateWithoutTypeInput>
    create: XOR<SurveyCreateWithoutTypeInput, SurveyUncheckedCreateWithoutTypeInput>
  }

  export type SurveyUpdateWithWhereUniqueWithoutTypeInput = {
    where: SurveyWhereUniqueInput
    data: XOR<SurveyUpdateWithoutTypeInput, SurveyUncheckedUpdateWithoutTypeInput>
  }

  export type SurveyUpdateManyWithWhereWithoutTypeInput = {
    where: SurveyScalarWhereInput
    data: XOR<SurveyUpdateManyMutationInput, SurveyUncheckedUpdateManyWithoutTypeInput>
  }

  export type QuestionCreateWithoutSurveyInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addOther?: boolean
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseCreateNestedManyWithoutQuestionInput
    team: TeamCreateNestedOneWithoutQuestionsInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutSurveyInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    addOther?: boolean
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutQuestionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSurveyInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSurveyInput, QuestionUncheckedCreateWithoutSurveyInput>
  }

  export type QuestionCreateManySurveyInputEnvelope = {
    data: QuestionCreateManySurveyInput | QuestionCreateManySurveyInput[]
    skipDuplicates?: boolean
  }

  export type SurveyResponseCreateWithoutSurveyInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionResponses?: QuestionResponseCreateNestedManyWithoutResponseInput
    team: TeamCreateNestedOneWithoutSurveyResponsesInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseUncheckedCreateWithoutSurveyInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutResponseInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseCreateOrConnectWithoutSurveyInput = {
    where: SurveyResponseWhereUniqueInput
    create: XOR<SurveyResponseCreateWithoutSurveyInput, SurveyResponseUncheckedCreateWithoutSurveyInput>
  }

  export type SurveyResponseCreateManySurveyInputEnvelope = {
    data: SurveyResponseCreateManySurveyInput | SurveyResponseCreateManySurveyInput[]
    skipDuplicates?: boolean
  }

  export type SurveyStyleCreateWithoutSurveyInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    border?: string
    team: TeamCreateNestedOneWithoutSurveysStyleInput
  }

  export type SurveyStyleUncheckedCreateWithoutSurveyInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    border?: string
  }

  export type SurveyStyleCreateOrConnectWithoutSurveyInput = {
    where: SurveyStyleWhereUniqueInput
    create: XOR<SurveyStyleCreateWithoutSurveyInput, SurveyStyleUncheckedCreateWithoutSurveyInput>
  }

  export type TeamCreateWithoutSurveysInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSurveysInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSurveysInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSurveysInput, TeamUncheckedCreateWithoutSurveysInput>
  }

  export type SurveyTypeCreateWithoutSurveysInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutSurveyTypesInput
  }

  export type SurveyTypeUncheckedCreateWithoutSurveysInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
  }

  export type SurveyTypeCreateOrConnectWithoutSurveysInput = {
    where: SurveyTypeWhereUniqueInput
    create: XOR<SurveyTypeCreateWithoutSurveysInput, SurveyTypeUncheckedCreateWithoutSurveysInput>
  }

  export type SurveyResponseSummaryCreateWithoutSurveyInput = {
    id?: string
    questionTitle?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
    question: QuestionCreateNestedOneWithoutSurveyResponseSummaryInput
    option?: QuestionOptionCreateNestedOneWithoutSurveyResponseSummaryInput
    team: TeamCreateNestedOneWithoutResponseSummariesInput
    response: SurveyResponseCreateNestedOneWithoutSurveyResponseSummaryInput
  }

  export type SurveyResponseSummaryUncheckedCreateWithoutSurveyInput = {
    id?: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryCreateOrConnectWithoutSurveyInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    create: XOR<SurveyResponseSummaryCreateWithoutSurveyInput, SurveyResponseSummaryUncheckedCreateWithoutSurveyInput>
  }

  export type SurveyResponseSummaryCreateManySurveyInputEnvelope = {
    data: SurveyResponseSummaryCreateManySurveyInput | SurveyResponseSummaryCreateManySurveyInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithWhereUniqueWithoutSurveyInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutSurveyInput, QuestionUncheckedUpdateWithoutSurveyInput>
    create: XOR<QuestionCreateWithoutSurveyInput, QuestionUncheckedCreateWithoutSurveyInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutSurveyInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutSurveyInput, QuestionUncheckedUpdateWithoutSurveyInput>
  }

  export type QuestionUpdateManyWithWhereWithoutSurveyInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutSurveyInput>
  }

  export type SurveyResponseUpsertWithWhereUniqueWithoutSurveyInput = {
    where: SurveyResponseWhereUniqueInput
    update: XOR<SurveyResponseUpdateWithoutSurveyInput, SurveyResponseUncheckedUpdateWithoutSurveyInput>
    create: XOR<SurveyResponseCreateWithoutSurveyInput, SurveyResponseUncheckedCreateWithoutSurveyInput>
  }

  export type SurveyResponseUpdateWithWhereUniqueWithoutSurveyInput = {
    where: SurveyResponseWhereUniqueInput
    data: XOR<SurveyResponseUpdateWithoutSurveyInput, SurveyResponseUncheckedUpdateWithoutSurveyInput>
  }

  export type SurveyResponseUpdateManyWithWhereWithoutSurveyInput = {
    where: SurveyResponseScalarWhereInput
    data: XOR<SurveyResponseUpdateManyMutationInput, SurveyResponseUncheckedUpdateManyWithoutSurveyInput>
  }

  export type SurveyStyleUpsertWithoutSurveyInput = {
    update: XOR<SurveyStyleUpdateWithoutSurveyInput, SurveyStyleUncheckedUpdateWithoutSurveyInput>
    create: XOR<SurveyStyleCreateWithoutSurveyInput, SurveyStyleUncheckedCreateWithoutSurveyInput>
    where?: SurveyStyleWhereInput
  }

  export type SurveyStyleUpdateToOneWithWhereWithoutSurveyInput = {
    where?: SurveyStyleWhereInput
    data: XOR<SurveyStyleUpdateWithoutSurveyInput, SurveyStyleUncheckedUpdateWithoutSurveyInput>
  }

  export type SurveyStyleUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    border?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutSurveysStyleNestedInput
  }

  export type SurveyStyleUncheckedUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    border?: StringFieldUpdateOperationsInput | string
  }

  export type TeamUpsertWithoutSurveysInput = {
    update: XOR<TeamUpdateWithoutSurveysInput, TeamUncheckedUpdateWithoutSurveysInput>
    create: XOR<TeamCreateWithoutSurveysInput, TeamUncheckedCreateWithoutSurveysInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSurveysInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSurveysInput, TeamUncheckedUpdateWithoutSurveysInput>
  }

  export type TeamUpdateWithoutSurveysInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSurveysInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type SurveyTypeUpsertWithoutSurveysInput = {
    update: XOR<SurveyTypeUpdateWithoutSurveysInput, SurveyTypeUncheckedUpdateWithoutSurveysInput>
    create: XOR<SurveyTypeCreateWithoutSurveysInput, SurveyTypeUncheckedCreateWithoutSurveysInput>
    where?: SurveyTypeWhereInput
  }

  export type SurveyTypeUpdateToOneWithWhereWithoutSurveysInput = {
    where?: SurveyTypeWhereInput
    data: XOR<SurveyTypeUpdateWithoutSurveysInput, SurveyTypeUncheckedUpdateWithoutSurveysInput>
  }

  export type SurveyTypeUpdateWithoutSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutSurveyTypesNestedInput
  }

  export type SurveyTypeUncheckedUpdateWithoutSurveysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyResponseSummaryUpsertWithWhereUniqueWithoutSurveyInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    update: XOR<SurveyResponseSummaryUpdateWithoutSurveyInput, SurveyResponseSummaryUncheckedUpdateWithoutSurveyInput>
    create: XOR<SurveyResponseSummaryCreateWithoutSurveyInput, SurveyResponseSummaryUncheckedCreateWithoutSurveyInput>
  }

  export type SurveyResponseSummaryUpdateWithWhereUniqueWithoutSurveyInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    data: XOR<SurveyResponseSummaryUpdateWithoutSurveyInput, SurveyResponseSummaryUncheckedUpdateWithoutSurveyInput>
  }

  export type SurveyResponseSummaryUpdateManyWithWhereWithoutSurveyInput = {
    where: SurveyResponseSummaryScalarWhereInput
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyInput>
  }

  export type SurveyCreateWithoutStyleInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseCreateNestedManyWithoutSurveyInput
    team: TeamCreateNestedOneWithoutSurveysInput
    type?: SurveyTypeCreateNestedOneWithoutSurveysInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutStyleInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SurveyCreateOrConnectWithoutStyleInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutStyleInput, SurveyUncheckedCreateWithoutStyleInput>
  }

  export type TeamCreateWithoutSurveysStyleInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSurveysStyleInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSurveysStyleInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSurveysStyleInput, TeamUncheckedCreateWithoutSurveysStyleInput>
  }

  export type SurveyUpsertWithoutStyleInput = {
    update: XOR<SurveyUpdateWithoutStyleInput, SurveyUncheckedUpdateWithoutStyleInput>
    create: XOR<SurveyCreateWithoutStyleInput, SurveyUncheckedCreateWithoutStyleInput>
    where?: SurveyWhereInput
  }

  export type SurveyUpdateToOneWithWhereWithoutStyleInput = {
    where?: SurveyWhereInput
    data: XOR<SurveyUpdateWithoutStyleInput, SurveyUncheckedUpdateWithoutStyleInput>
  }

  export type SurveyUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUpdateManyWithoutSurveyNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysNestedInput
    type?: SurveyTypeUpdateOneWithoutSurveysNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutStyleInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type TeamUpsertWithoutSurveysStyleInput = {
    update: XOR<TeamUpdateWithoutSurveysStyleInput, TeamUncheckedUpdateWithoutSurveysStyleInput>
    create: XOR<TeamCreateWithoutSurveysStyleInput, TeamUncheckedCreateWithoutSurveysStyleInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSurveysStyleInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSurveysStyleInput, TeamUncheckedUpdateWithoutSurveysStyleInput>
  }

  export type TeamUpdateWithoutSurveysStyleInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSurveysStyleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type QuestionOptionCreateWithoutQuestionInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOther?: boolean
    team: TeamCreateNestedOneWithoutQuestionOptionsInput
    responses?: QuestionResponseCreateNestedManyWithoutOptionInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionUncheckedCreateWithoutQuestionInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    isOther?: boolean
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutOptionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionCreateOrConnectWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionCreateManyQuestionInputEnvelope = {
    data: QuestionOptionCreateManyQuestionInput | QuestionOptionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionResponseCreateWithoutQuestionInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    option?: QuestionOptionCreateNestedOneWithoutResponsesInput
    response: SurveyResponseCreateNestedOneWithoutQuestionResponsesInput
    team: TeamCreateNestedOneWithoutQuestionResponsesInput
  }

  export type QuestionResponseUncheckedCreateWithoutQuestionInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    responseId: string
    teamId: number
  }

  export type QuestionResponseCreateOrConnectWithoutQuestionInput = {
    where: QuestionResponseWhereUniqueInput
    create: XOR<QuestionResponseCreateWithoutQuestionInput, QuestionResponseUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionResponseCreateManyQuestionInputEnvelope = {
    data: QuestionResponseCreateManyQuestionInput | QuestionResponseCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type SurveyCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    responses?: SurveyResponseCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleCreateNestedOneWithoutSurveyInput
    team: TeamCreateNestedOneWithoutSurveysInput
    type?: SurveyTypeCreateNestedOneWithoutSurveysInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    responses?: SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SurveyCreateOrConnectWithoutQuestionsInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutQuestionsInput, SurveyUncheckedCreateWithoutQuestionsInput>
  }

  export type TeamCreateWithoutQuestionsInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutQuestionsInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutQuestionsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutQuestionsInput, TeamUncheckedCreateWithoutQuestionsInput>
  }

  export type SurveyResponseSummaryCreateWithoutQuestionInput = {
    id?: string
    questionTitle?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
    survey: SurveyCreateNestedOneWithoutSurveyResponseSummaryInput
    option?: QuestionOptionCreateNestedOneWithoutSurveyResponseSummaryInput
    team: TeamCreateNestedOneWithoutResponseSummariesInput
    response: SurveyResponseCreateNestedOneWithoutSurveyResponseSummaryInput
  }

  export type SurveyResponseSummaryUncheckedCreateWithoutQuestionInput = {
    id?: string
    surveyId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryCreateOrConnectWithoutQuestionInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    create: XOR<SurveyResponseSummaryCreateWithoutQuestionInput, SurveyResponseSummaryUncheckedCreateWithoutQuestionInput>
  }

  export type SurveyResponseSummaryCreateManyQuestionInputEnvelope = {
    data: SurveyResponseSummaryCreateManyQuestionInput | SurveyResponseSummaryCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    update: XOR<QuestionOptionUpdateWithoutQuestionInput, QuestionOptionUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    data: XOR<QuestionOptionUpdateWithoutQuestionInput, QuestionOptionUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionOptionUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionOptionScalarWhereInput
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionResponseUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionResponseWhereUniqueInput
    update: XOR<QuestionResponseUpdateWithoutQuestionInput, QuestionResponseUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionResponseCreateWithoutQuestionInput, QuestionResponseUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionResponseUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionResponseWhereUniqueInput
    data: XOR<QuestionResponseUpdateWithoutQuestionInput, QuestionResponseUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionResponseUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionResponseScalarWhereInput
    data: XOR<QuestionResponseUpdateManyMutationInput, QuestionResponseUncheckedUpdateManyWithoutQuestionInput>
  }

  export type SurveyUpsertWithoutQuestionsInput = {
    update: XOR<SurveyUpdateWithoutQuestionsInput, SurveyUncheckedUpdateWithoutQuestionsInput>
    create: XOR<SurveyCreateWithoutQuestionsInput, SurveyUncheckedCreateWithoutQuestionsInput>
    where?: SurveyWhereInput
  }

  export type SurveyUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: SurveyWhereInput
    data: XOR<SurveyUpdateWithoutQuestionsInput, SurveyUncheckedUpdateWithoutQuestionsInput>
  }

  export type SurveyUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    responses?: SurveyResponseUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUpdateOneWithoutSurveyNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysNestedInput
    type?: SurveyTypeUpdateOneWithoutSurveysNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    responses?: SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type TeamUpsertWithoutQuestionsInput = {
    update: XOR<TeamUpdateWithoutQuestionsInput, TeamUncheckedUpdateWithoutQuestionsInput>
    create: XOR<TeamCreateWithoutQuestionsInput, TeamUncheckedCreateWithoutQuestionsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutQuestionsInput, TeamUncheckedUpdateWithoutQuestionsInput>
  }

  export type TeamUpdateWithoutQuestionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type SurveyResponseSummaryUpsertWithWhereUniqueWithoutQuestionInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    update: XOR<SurveyResponseSummaryUpdateWithoutQuestionInput, SurveyResponseSummaryUncheckedUpdateWithoutQuestionInput>
    create: XOR<SurveyResponseSummaryCreateWithoutQuestionInput, SurveyResponseSummaryUncheckedCreateWithoutQuestionInput>
  }

  export type SurveyResponseSummaryUpdateWithWhereUniqueWithoutQuestionInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    data: XOR<SurveyResponseSummaryUpdateWithoutQuestionInput, SurveyResponseSummaryUncheckedUpdateWithoutQuestionInput>
  }

  export type SurveyResponseSummaryUpdateManyWithWhereWithoutQuestionInput = {
    where: SurveyResponseSummaryScalarWhereInput
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionCreateWithoutOptionsInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addOther?: boolean
    responses?: QuestionResponseCreateNestedManyWithoutQuestionInput
    survey: SurveyCreateNestedOneWithoutQuestionsInput
    team: TeamCreateNestedOneWithoutQuestionsInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutOptionsInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    addOther?: boolean
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutQuestionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutOptionsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
  }

  export type TeamCreateWithoutQuestionOptionsInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutQuestionOptionsInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutQuestionOptionsInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutQuestionOptionsInput, TeamUncheckedCreateWithoutQuestionOptionsInput>
  }

  export type QuestionResponseCreateWithoutOptionInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    question: QuestionCreateNestedOneWithoutResponsesInput
    response: SurveyResponseCreateNestedOneWithoutQuestionResponsesInput
    team: TeamCreateNestedOneWithoutQuestionResponsesInput
  }

  export type QuestionResponseUncheckedCreateWithoutOptionInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    responseId: string
    teamId: number
  }

  export type QuestionResponseCreateOrConnectWithoutOptionInput = {
    where: QuestionResponseWhereUniqueInput
    create: XOR<QuestionResponseCreateWithoutOptionInput, QuestionResponseUncheckedCreateWithoutOptionInput>
  }

  export type QuestionResponseCreateManyOptionInputEnvelope = {
    data: QuestionResponseCreateManyOptionInput | QuestionResponseCreateManyOptionInput[]
    skipDuplicates?: boolean
  }

  export type SurveyResponseSummaryCreateWithoutOptionInput = {
    id?: string
    questionTitle?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
    survey: SurveyCreateNestedOneWithoutSurveyResponseSummaryInput
    question: QuestionCreateNestedOneWithoutSurveyResponseSummaryInput
    team: TeamCreateNestedOneWithoutResponseSummariesInput
    response: SurveyResponseCreateNestedOneWithoutSurveyResponseSummaryInput
  }

  export type SurveyResponseSummaryUncheckedCreateWithoutOptionInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryCreateOrConnectWithoutOptionInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    create: XOR<SurveyResponseSummaryCreateWithoutOptionInput, SurveyResponseSummaryUncheckedCreateWithoutOptionInput>
  }

  export type SurveyResponseSummaryCreateManyOptionInputEnvelope = {
    data: SurveyResponseSummaryCreateManyOptionInput | SurveyResponseSummaryCreateManyOptionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionUpsertWithoutOptionsInput = {
    update: XOR<QuestionUpdateWithoutOptionsInput, QuestionUncheckedUpdateWithoutOptionsInput>
    create: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutOptionsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutOptionsInput, QuestionUncheckedUpdateWithoutOptionsInput>
  }

  export type QuestionUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    responses?: QuestionResponseUpdateManyWithoutQuestionNestedInput
    survey?: SurveyUpdateOneRequiredWithoutQuestionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionsNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
    responses?: QuestionResponseUncheckedUpdateManyWithoutQuestionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type TeamUpsertWithoutQuestionOptionsInput = {
    update: XOR<TeamUpdateWithoutQuestionOptionsInput, TeamUncheckedUpdateWithoutQuestionOptionsInput>
    create: XOR<TeamCreateWithoutQuestionOptionsInput, TeamUncheckedCreateWithoutQuestionOptionsInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutQuestionOptionsInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutQuestionOptionsInput, TeamUncheckedUpdateWithoutQuestionOptionsInput>
  }

  export type TeamUpdateWithoutQuestionOptionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutQuestionOptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type QuestionResponseUpsertWithWhereUniqueWithoutOptionInput = {
    where: QuestionResponseWhereUniqueInput
    update: XOR<QuestionResponseUpdateWithoutOptionInput, QuestionResponseUncheckedUpdateWithoutOptionInput>
    create: XOR<QuestionResponseCreateWithoutOptionInput, QuestionResponseUncheckedCreateWithoutOptionInput>
  }

  export type QuestionResponseUpdateWithWhereUniqueWithoutOptionInput = {
    where: QuestionResponseWhereUniqueInput
    data: XOR<QuestionResponseUpdateWithoutOptionInput, QuestionResponseUncheckedUpdateWithoutOptionInput>
  }

  export type QuestionResponseUpdateManyWithWhereWithoutOptionInput = {
    where: QuestionResponseScalarWhereInput
    data: XOR<QuestionResponseUpdateManyMutationInput, QuestionResponseUncheckedUpdateManyWithoutOptionInput>
  }

  export type SurveyResponseSummaryUpsertWithWhereUniqueWithoutOptionInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    update: XOR<SurveyResponseSummaryUpdateWithoutOptionInput, SurveyResponseSummaryUncheckedUpdateWithoutOptionInput>
    create: XOR<SurveyResponseSummaryCreateWithoutOptionInput, SurveyResponseSummaryUncheckedCreateWithoutOptionInput>
  }

  export type SurveyResponseSummaryUpdateWithWhereUniqueWithoutOptionInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    data: XOR<SurveyResponseSummaryUpdateWithoutOptionInput, SurveyResponseSummaryUncheckedUpdateWithoutOptionInput>
  }

  export type SurveyResponseSummaryUpdateManyWithWhereWithoutOptionInput = {
    where: SurveyResponseSummaryScalarWhereInput
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyWithoutOptionInput>
  }

  export type QuestionResponseCreateWithoutResponseInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    option?: QuestionOptionCreateNestedOneWithoutResponsesInput
    question: QuestionCreateNestedOneWithoutResponsesInput
    team: TeamCreateNestedOneWithoutQuestionResponsesInput
  }

  export type QuestionResponseUncheckedCreateWithoutResponseInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    teamId: number
  }

  export type QuestionResponseCreateOrConnectWithoutResponseInput = {
    where: QuestionResponseWhereUniqueInput
    create: XOR<QuestionResponseCreateWithoutResponseInput, QuestionResponseUncheckedCreateWithoutResponseInput>
  }

  export type QuestionResponseCreateManyResponseInputEnvelope = {
    data: QuestionResponseCreateManyResponseInput | QuestionResponseCreateManyResponseInput[]
    skipDuplicates?: boolean
  }

  export type SurveyCreateWithoutResponsesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleCreateNestedOneWithoutSurveyInput
    team: TeamCreateNestedOneWithoutSurveysInput
    type?: SurveyTypeCreateNestedOneWithoutSurveysInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutSurveyInput
  }

  export type SurveyUncheckedCreateWithoutResponsesInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutSurveyInput
  }

  export type SurveyCreateOrConnectWithoutResponsesInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutResponsesInput, SurveyUncheckedCreateWithoutResponsesInput>
  }

  export type TeamCreateWithoutSurveyResponsesInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSurveyResponsesInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSurveyResponsesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSurveyResponsesInput, TeamUncheckedCreateWithoutSurveyResponsesInput>
  }

  export type SurveyResponseSummaryCreateWithoutResponseInput = {
    id?: string
    questionTitle?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
    survey: SurveyCreateNestedOneWithoutSurveyResponseSummaryInput
    question: QuestionCreateNestedOneWithoutSurveyResponseSummaryInput
    option?: QuestionOptionCreateNestedOneWithoutSurveyResponseSummaryInput
    team: TeamCreateNestedOneWithoutResponseSummariesInput
  }

  export type SurveyResponseSummaryUncheckedCreateWithoutResponseInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type SurveyResponseSummaryCreateOrConnectWithoutResponseInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    create: XOR<SurveyResponseSummaryCreateWithoutResponseInput, SurveyResponseSummaryUncheckedCreateWithoutResponseInput>
  }

  export type SurveyResponseSummaryCreateManyResponseInputEnvelope = {
    data: SurveyResponseSummaryCreateManyResponseInput | SurveyResponseSummaryCreateManyResponseInput[]
    skipDuplicates?: boolean
  }

  export type QuestionResponseUpsertWithWhereUniqueWithoutResponseInput = {
    where: QuestionResponseWhereUniqueInput
    update: XOR<QuestionResponseUpdateWithoutResponseInput, QuestionResponseUncheckedUpdateWithoutResponseInput>
    create: XOR<QuestionResponseCreateWithoutResponseInput, QuestionResponseUncheckedCreateWithoutResponseInput>
  }

  export type QuestionResponseUpdateWithWhereUniqueWithoutResponseInput = {
    where: QuestionResponseWhereUniqueInput
    data: XOR<QuestionResponseUpdateWithoutResponseInput, QuestionResponseUncheckedUpdateWithoutResponseInput>
  }

  export type QuestionResponseUpdateManyWithWhereWithoutResponseInput = {
    where: QuestionResponseScalarWhereInput
    data: XOR<QuestionResponseUpdateManyMutationInput, QuestionResponseUncheckedUpdateManyWithoutResponseInput>
  }

  export type SurveyUpsertWithoutResponsesInput = {
    update: XOR<SurveyUpdateWithoutResponsesInput, SurveyUncheckedUpdateWithoutResponsesInput>
    create: XOR<SurveyCreateWithoutResponsesInput, SurveyUncheckedCreateWithoutResponsesInput>
    where?: SurveyWhereInput
  }

  export type SurveyUpdateToOneWithWhereWithoutResponsesInput = {
    where?: SurveyWhereInput
    data: XOR<SurveyUpdateWithoutResponsesInput, SurveyUncheckedUpdateWithoutResponsesInput>
  }

  export type SurveyUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUpdateOneWithoutSurveyNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysNestedInput
    type?: SurveyTypeUpdateOneWithoutSurveysNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type TeamUpsertWithoutSurveyResponsesInput = {
    update: XOR<TeamUpdateWithoutSurveyResponsesInput, TeamUncheckedUpdateWithoutSurveyResponsesInput>
    create: XOR<TeamCreateWithoutSurveyResponsesInput, TeamUncheckedCreateWithoutSurveyResponsesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSurveyResponsesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSurveyResponsesInput, TeamUncheckedUpdateWithoutSurveyResponsesInput>
  }

  export type TeamUpdateWithoutSurveyResponsesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSurveyResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type SurveyResponseSummaryUpsertWithWhereUniqueWithoutResponseInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    update: XOR<SurveyResponseSummaryUpdateWithoutResponseInput, SurveyResponseSummaryUncheckedUpdateWithoutResponseInput>
    create: XOR<SurveyResponseSummaryCreateWithoutResponseInput, SurveyResponseSummaryUncheckedCreateWithoutResponseInput>
  }

  export type SurveyResponseSummaryUpdateWithWhereUniqueWithoutResponseInput = {
    where: SurveyResponseSummaryWhereUniqueInput
    data: XOR<SurveyResponseSummaryUpdateWithoutResponseInput, SurveyResponseSummaryUncheckedUpdateWithoutResponseInput>
  }

  export type SurveyResponseSummaryUpdateManyWithWhereWithoutResponseInput = {
    where: SurveyResponseSummaryScalarWhereInput
    data: XOR<SurveyResponseSummaryUpdateManyMutationInput, SurveyResponseSummaryUncheckedUpdateManyWithoutResponseInput>
  }

  export type SurveyCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleCreateNestedOneWithoutSurveyInput
    team: TeamCreateNestedOneWithoutSurveysInput
    type?: SurveyTypeCreateNestedOneWithoutSurveysInput
  }

  export type SurveyUncheckedCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
    questions?: QuestionUncheckedCreateNestedManyWithoutSurveyInput
    responses?: SurveyResponseUncheckedCreateNestedManyWithoutSurveyInput
    style?: SurveyStyleUncheckedCreateNestedOneWithoutSurveyInput
  }

  export type SurveyCreateOrConnectWithoutSurveyResponseSummaryInput = {
    where: SurveyWhereUniqueInput
    create: XOR<SurveyCreateWithoutSurveyResponseSummaryInput, SurveyUncheckedCreateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addOther?: boolean
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseCreateNestedManyWithoutQuestionInput
    survey: SurveyCreateNestedOneWithoutQuestionsInput
    team: TeamCreateNestedOneWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    addOther?: boolean
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutSurveyResponseSummaryInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutSurveyResponseSummaryInput, QuestionUncheckedCreateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionOptionCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOther?: boolean
    question: QuestionCreateNestedOneWithoutOptionsInput
    team: TeamCreateNestedOneWithoutQuestionOptionsInput
    responses?: QuestionResponseCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionUncheckedCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    teamId: number
    isOther?: boolean
    responses?: QuestionResponseUncheckedCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionCreateOrConnectWithoutSurveyResponseSummaryInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutSurveyResponseSummaryInput, QuestionOptionUncheckedCreateWithoutSurveyResponseSummaryInput>
  }

  export type TeamCreateWithoutResponseSummariesInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutResponseSummariesInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutResponseSummariesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutResponseSummariesInput, TeamUncheckedCreateWithoutResponseSummariesInput>
  }

  export type SurveyResponseCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionResponses?: QuestionResponseCreateNestedManyWithoutResponseInput
    survey: SurveyCreateNestedOneWithoutResponsesInput
    team: TeamCreateNestedOneWithoutSurveyResponsesInput
  }

  export type SurveyResponseUncheckedCreateWithoutSurveyResponseSummaryInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    questionResponses?: QuestionResponseUncheckedCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseCreateOrConnectWithoutSurveyResponseSummaryInput = {
    where: SurveyResponseWhereUniqueInput
    create: XOR<SurveyResponseCreateWithoutSurveyResponseSummaryInput, SurveyResponseUncheckedCreateWithoutSurveyResponseSummaryInput>
  }

  export type SurveyUpsertWithoutSurveyResponseSummaryInput = {
    update: XOR<SurveyUpdateWithoutSurveyResponseSummaryInput, SurveyUncheckedUpdateWithoutSurveyResponseSummaryInput>
    create: XOR<SurveyCreateWithoutSurveyResponseSummaryInput, SurveyUncheckedCreateWithoutSurveyResponseSummaryInput>
    where?: SurveyWhereInput
  }

  export type SurveyUpdateToOneWithWhereWithoutSurveyResponseSummaryInput = {
    where?: SurveyWhereInput
    data: XOR<SurveyUpdateWithoutSurveyResponseSummaryInput, SurveyUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type SurveyUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUpdateOneWithoutSurveyNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysNestedInput
    type?: SurveyTypeUpdateOneWithoutSurveysNestedInput
  }

  export type SurveyUncheckedUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput
  }

  export type QuestionUpsertWithoutSurveyResponseSummaryInput = {
    update: XOR<QuestionUpdateWithoutSurveyResponseSummaryInput, QuestionUncheckedUpdateWithoutSurveyResponseSummaryInput>
    create: XOR<QuestionCreateWithoutSurveyResponseSummaryInput, QuestionUncheckedCreateWithoutSurveyResponseSummaryInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutSurveyResponseSummaryInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutSurveyResponseSummaryInput, QuestionUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUpdateManyWithoutQuestionNestedInput
    survey?: SurveyUpdateOneRequiredWithoutQuestionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionOptionUpsertWithoutSurveyResponseSummaryInput = {
    update: XOR<QuestionOptionUpdateWithoutSurveyResponseSummaryInput, QuestionOptionUncheckedUpdateWithoutSurveyResponseSummaryInput>
    create: XOR<QuestionOptionCreateWithoutSurveyResponseSummaryInput, QuestionOptionUncheckedCreateWithoutSurveyResponseSummaryInput>
    where?: QuestionOptionWhereInput
  }

  export type QuestionOptionUpdateToOneWithWhereWithoutSurveyResponseSummaryInput = {
    where?: QuestionOptionWhereInput
    data: XOR<QuestionOptionUpdateWithoutSurveyResponseSummaryInput, QuestionOptionUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type QuestionOptionUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionOptionsNestedInput
    responses?: QuestionResponseUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    isOther?: BoolFieldUpdateOperationsInput | boolean
    responses?: QuestionResponseUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type TeamUpsertWithoutResponseSummariesInput = {
    update: XOR<TeamUpdateWithoutResponseSummariesInput, TeamUncheckedUpdateWithoutResponseSummariesInput>
    create: XOR<TeamCreateWithoutResponseSummariesInput, TeamUncheckedCreateWithoutResponseSummariesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutResponseSummariesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutResponseSummariesInput, TeamUncheckedUpdateWithoutResponseSummariesInput>
  }

  export type TeamUpdateWithoutResponseSummariesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutResponseSummariesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type SurveyResponseUpsertWithoutSurveyResponseSummaryInput = {
    update: XOR<SurveyResponseUpdateWithoutSurveyResponseSummaryInput, SurveyResponseUncheckedUpdateWithoutSurveyResponseSummaryInput>
    create: XOR<SurveyResponseCreateWithoutSurveyResponseSummaryInput, SurveyResponseUncheckedCreateWithoutSurveyResponseSummaryInput>
    where?: SurveyResponseWhereInput
  }

  export type SurveyResponseUpdateToOneWithWhereWithoutSurveyResponseSummaryInput = {
    where?: SurveyResponseWhereInput
    data: XOR<SurveyResponseUpdateWithoutSurveyResponseSummaryInput, SurveyResponseUncheckedUpdateWithoutSurveyResponseSummaryInput>
  }

  export type SurveyResponseUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionResponses?: QuestionResponseUpdateManyWithoutResponseNestedInput
    survey?: SurveyUpdateOneRequiredWithoutResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveyResponsesNestedInput
  }

  export type SurveyResponseUncheckedUpdateWithoutSurveyResponseSummaryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type QuestionOptionCreateWithoutResponsesInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isOther?: boolean
    question: QuestionCreateNestedOneWithoutOptionsInput
    team: TeamCreateNestedOneWithoutQuestionOptionsInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionUncheckedCreateWithoutResponsesInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    teamId: number
    isOther?: boolean
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutOptionInput
  }

  export type QuestionOptionCreateOrConnectWithoutResponsesInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutResponsesInput, QuestionOptionUncheckedCreateWithoutResponsesInput>
  }

  export type QuestionCreateWithoutResponsesInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addOther?: boolean
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    survey: SurveyCreateNestedOneWithoutQuestionsInput
    team: TeamCreateNestedOneWithoutQuestionsInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutResponsesInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    addOther?: boolean
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutResponsesInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutResponsesInput, QuestionUncheckedCreateWithoutResponsesInput>
  }

  export type SurveyResponseCreateWithoutQuestionResponsesInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    survey: SurveyCreateNestedOneWithoutResponsesInput
    team: TeamCreateNestedOneWithoutSurveyResponsesInput
    SurveyResponseSummary?: SurveyResponseSummaryCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseUncheckedCreateWithoutQuestionResponsesInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    teamId: number
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutResponseInput
  }

  export type SurveyResponseCreateOrConnectWithoutQuestionResponsesInput = {
    where: SurveyResponseWhereUniqueInput
    create: XOR<SurveyResponseCreateWithoutQuestionResponsesInput, SurveyResponseUncheckedCreateWithoutQuestionResponsesInput>
  }

  export type TeamCreateWithoutQuestionResponsesInput = {
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionCreateNestedManyWithoutTeamInput
    questions?: QuestionCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeCreateNestedManyWithoutTeamInput
    surveys?: SurveyCreateNestedManyWithoutTeamInput
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    user?: UserCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutQuestionResponsesInput = {
    id?: number
    name: string
    description?: string | null
    token?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ResponseRate?: number
    totalActiveSurveys?: number
    totalOpenSurveys?: number
    totalResponses?: number
    totalSurveys?: number
    questionOptions?: QuestionOptionUncheckedCreateNestedManyWithoutTeamInput
    questions?: QuestionUncheckedCreateNestedManyWithoutTeamInput
    surveyResponses?: SurveyResponseUncheckedCreateNestedManyWithoutTeamInput
    surveysStyle?: SurveyStyleUncheckedCreateNestedManyWithoutTeamInput
    surveyTypes?: SurveyTypeUncheckedCreateNestedManyWithoutTeamInput
    surveys?: SurveyUncheckedCreateNestedManyWithoutTeamInput
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    user?: UserUncheckedCreateNestedManyWithoutTeamInput
    responseSummaries?: SurveyResponseSummaryUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutQuestionResponsesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutQuestionResponsesInput, TeamUncheckedCreateWithoutQuestionResponsesInput>
  }

  export type QuestionOptionUpsertWithoutResponsesInput = {
    update: XOR<QuestionOptionUpdateWithoutResponsesInput, QuestionOptionUncheckedUpdateWithoutResponsesInput>
    create: XOR<QuestionOptionCreateWithoutResponsesInput, QuestionOptionUncheckedCreateWithoutResponsesInput>
    where?: QuestionOptionWhereInput
  }

  export type QuestionOptionUpdateToOneWithWhereWithoutResponsesInput = {
    where?: QuestionOptionWhereInput
    data: XOR<QuestionOptionUpdateWithoutResponsesInput, QuestionOptionUncheckedUpdateWithoutResponsesInput>
  }

  export type QuestionOptionUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionOptionsNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    isOther?: BoolFieldUpdateOperationsInput | boolean
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type QuestionUpsertWithoutResponsesInput = {
    update: XOR<QuestionUpdateWithoutResponsesInput, QuestionUncheckedUpdateWithoutResponsesInput>
    create: XOR<QuestionCreateWithoutResponsesInput, QuestionUncheckedCreateWithoutResponsesInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutResponsesInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutResponsesInput, QuestionUncheckedUpdateWithoutResponsesInput>
  }

  export type QuestionUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    survey?: SurveyUpdateOneRequiredWithoutQuestionsNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionsNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type SurveyResponseUpsertWithoutQuestionResponsesInput = {
    update: XOR<SurveyResponseUpdateWithoutQuestionResponsesInput, SurveyResponseUncheckedUpdateWithoutQuestionResponsesInput>
    create: XOR<SurveyResponseCreateWithoutQuestionResponsesInput, SurveyResponseUncheckedCreateWithoutQuestionResponsesInput>
    where?: SurveyResponseWhereInput
  }

  export type SurveyResponseUpdateToOneWithWhereWithoutQuestionResponsesInput = {
    where?: SurveyResponseWhereInput
    data: XOR<SurveyResponseUpdateWithoutQuestionResponsesInput, SurveyResponseUncheckedUpdateWithoutQuestionResponsesInput>
  }

  export type SurveyResponseUpdateWithoutQuestionResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SurveyUpdateOneRequiredWithoutResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveyResponsesNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseUncheckedUpdateWithoutQuestionResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type TeamUpsertWithoutQuestionResponsesInput = {
    update: XOR<TeamUpdateWithoutQuestionResponsesInput, TeamUncheckedUpdateWithoutQuestionResponsesInput>
    create: XOR<TeamCreateWithoutQuestionResponsesInput, TeamUncheckedCreateWithoutQuestionResponsesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutQuestionResponsesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutQuestionResponsesInput, TeamUncheckedUpdateWithoutQuestionResponsesInput>
  }

  export type TeamUpdateWithoutQuestionResponsesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUpdateManyWithoutTeamNestedInput
    questions?: QuestionUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    user?: UserUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutQuestionResponsesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    token?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalActiveSurveys?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    totalSurveys?: IntFieldUpdateOperationsInput | number
    questionOptions?: QuestionOptionUncheckedUpdateManyWithoutTeamNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutTeamNestedInput
    surveyResponses?: SurveyResponseUncheckedUpdateManyWithoutTeamNestedInput
    surveysStyle?: SurveyStyleUncheckedUpdateManyWithoutTeamNestedInput
    surveyTypes?: SurveyTypeUncheckedUpdateManyWithoutTeamNestedInput
    surveys?: SurveyUncheckedUpdateManyWithoutTeamNestedInput
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    user?: UserUncheckedUpdateManyWithoutTeamNestedInput
    responseSummaries?: SurveyResponseSummaryUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type TeamMemberCreateManyUserInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberUpdateWithoutUserInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyAvatarInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
    defaultTeamId?: number | null
  }

  export type UserUpdateWithoutAvatarInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUpdateManyWithoutUserNestedInput
    team?: TeamUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    defaultTeamId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QuestionOptionCreateManyTeamInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    isOther?: boolean
  }

  export type QuestionResponseCreateManyTeamInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    responseId: string
  }

  export type QuestionCreateManyTeamInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    addOther?: boolean
  }

  export type SurveyResponseCreateManyTeamInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
  }

  export type SurveyStyleCreateManyTeamInput = {
    id?: string
    backgroundColor?: string
    textColor?: string
    buttonBackgroundColor?: string
    buttonTextColor?: string
    margin?: string
    padding?: string
    borderRadius?: string
    titleFontSize?: string
    bodyFontSize?: string
    fontFamily?: string
    basicCSS?: string
    styleMode?: $Enums.StyleMode
    advancedCSS?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    surveyId: string
    border?: string
  }

  export type SurveyTypeCreateManyTeamInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SurveyCreateManyTeamInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    typeId?: string | null
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
  }

  export type TeamMemberCreateManyTeamInput = {
    id?: number
    isAdmin: boolean
    canPost: boolean
    canApprove: boolean
    isOwner: boolean
    teamMemberStatus: $Enums.TeamMemberStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type UserCreateManyTeamInput = {
    id?: number
    email: string
    provider?: $Enums.Provider
    password?: string | null
    resetPasswordToken?: string | null
    confirmationToken?: string | null
    confirmed?: boolean | null
    blocked?: boolean | null
    phone?: string | null
    firstName: string
    lastName?: string | null
    avatarUrl?: string | null
    language: $Enums.Language
    createdAt?: Date | string
    updatedAt?: Date | string
    avatarId?: number | null
    idProvider?: string | null
    resetPasswordExpires?: Date | string | null
    theme?: $Enums.Theme
  }

  export type SurveyResponseSummaryCreateManyTeamInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    responseCount: number
    lastUpdated?: Date | string
  }

  export type QuestionOptionUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
    responses?: QuestionResponseUpdateManyWithoutOptionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
    responses?: QuestionResponseUncheckedUpdateManyWithoutOptionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionResponseUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    option?: QuestionOptionUpdateOneWithoutResponsesNestedInput
    question?: QuestionUpdateOneRequiredWithoutResponsesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutQuestionResponsesNestedInput
  }

  export type QuestionResponseUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionResponseUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUpdateManyWithoutQuestionNestedInput
    survey?: SurveyUpdateOneRequiredWithoutQuestionsNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUncheckedUpdateManyWithoutQuestionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurveyResponseUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionResponses?: QuestionResponseUpdateManyWithoutResponseNestedInput
    survey?: SurveyUpdateOneRequiredWithoutResponsesNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutResponseNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
  }

  export type SurveyStyleUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    border?: StringFieldUpdateOperationsInput | string
    survey?: SurveyUpdateOneRequiredWithoutStyleNestedInput
  }

  export type SurveyStyleUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    border?: StringFieldUpdateOperationsInput | string
  }

  export type SurveyStyleUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    backgroundColor?: StringFieldUpdateOperationsInput | string
    textColor?: StringFieldUpdateOperationsInput | string
    buttonBackgroundColor?: StringFieldUpdateOperationsInput | string
    buttonTextColor?: StringFieldUpdateOperationsInput | string
    margin?: StringFieldUpdateOperationsInput | string
    padding?: StringFieldUpdateOperationsInput | string
    borderRadius?: StringFieldUpdateOperationsInput | string
    titleFontSize?: StringFieldUpdateOperationsInput | string
    bodyFontSize?: StringFieldUpdateOperationsInput | string
    fontFamily?: StringFieldUpdateOperationsInput | string
    basicCSS?: StringFieldUpdateOperationsInput | string
    styleMode?: EnumStyleModeFieldUpdateOperationsInput | $Enums.StyleMode
    advancedCSS?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveyId?: StringFieldUpdateOperationsInput | string
    border?: StringFieldUpdateOperationsInput | string
  }

  export type SurveyTypeUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveys?: SurveyUpdateManyWithoutTypeNestedInput
  }

  export type SurveyTypeUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    surveys?: SurveyUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type SurveyTypeUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUpdateOneWithoutSurveyNestedInput
    type?: SurveyTypeUpdateOneWithoutSurveysNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeId?: NullableStringFieldUpdateOperationsInput | string | null
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMemberUpdateWithoutTeamInput = {
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTeamMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    canPost?: BoolFieldUpdateOperationsInput | boolean
    canApprove?: BoolFieldUpdateOperationsInput | boolean
    isOwner?: BoolFieldUpdateOperationsInput | boolean
    teamMemberStatus?: EnumTeamMemberStatusFieldUpdateOperationsInput | $Enums.TeamMemberStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutTeamInput = {
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUpdateManyWithoutUserNestedInput
    avatar?: FileUpdateOneWithoutAvatarForNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    teamMembers?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    provider?: EnumProviderFieldUpdateOperationsInput | $Enums.Provider
    password?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmationToken?: NullableStringFieldUpdateOperationsInput | string | null
    confirmed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    blocked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    idProvider?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    theme?: EnumThemeFieldUpdateOperationsInput | $Enums.Theme
  }

  export type SurveyResponseSummaryUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SurveyUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    question?: QuestionUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    option?: QuestionOptionUpdateOneWithoutSurveyResponseSummaryNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
  }

  export type SurveyResponseSummaryUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyCreateManyTypeInput = {
    id?: string
    name: string
    description?: string | null
    status?: $Enums.SurveyStatus
    allowMultipleResponses?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    ResponseRate?: number
    totalOpenSurveys?: number
    totalResponses?: number
  }

  export type SurveyUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUpdateOneWithoutSurveyNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveysNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
    questions?: QuestionUncheckedUpdateManyWithoutSurveyNestedInput
    responses?: SurveyResponseUncheckedUpdateManyWithoutSurveyNestedInput
    style?: SurveyStyleUncheckedUpdateOneWithoutSurveyNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyNestedInput
  }

  export type SurveyUncheckedUpdateManyWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumSurveyStatusFieldUpdateOperationsInput | $Enums.SurveyStatus
    allowMultipleResponses?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    ResponseRate?: IntFieldUpdateOperationsInput | number
    totalOpenSurveys?: IntFieldUpdateOperationsInput | number
    totalResponses?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionCreateManySurveyInput = {
    id?: string
    title: string
    description?: string | null
    format: $Enums.QuestionFormat
    required?: boolean
    order: number
    yesLabel?: string | null
    noLabel?: string | null
    buttonLabel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    addOther?: boolean
  }

  export type SurveyResponseCreateManySurveyInput = {
    id?: string
    status?: $Enums.ResponseStatus
    userId?: string | null
    userIp?: string | null
    extraInfo?: string | null
    origin?: string | null
    expiresAt?: Date | string | null
    submittedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
  }

  export type SurveyResponseSummaryCreateManySurveyInput = {
    id?: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type QuestionUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUpdateManyWithoutQuestionNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionsNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    responses?: QuestionResponseUncheckedUpdateManyWithoutQuestionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    format?: EnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat
    required?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    yesLabel?: NullableStringFieldUpdateOperationsInput | string | null
    noLabel?: NullableStringFieldUpdateOperationsInput | string | null
    buttonLabel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    addOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SurveyResponseUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionResponses?: QuestionResponseUpdateManyWithoutResponseNestedInput
    team?: TeamUpdateOneRequiredWithoutSurveyResponsesNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseUncheckedUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    questionResponses?: QuestionResponseUncheckedUpdateManyWithoutResponseNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutResponseNestedInput
  }

  export type SurveyResponseUncheckedUpdateManyWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumResponseStatusFieldUpdateOperationsInput | $Enums.ResponseStatus
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    userIp?: NullableStringFieldUpdateOperationsInput | string | null
    extraInfo?: NullableStringFieldUpdateOperationsInput | string | null
    origin?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyResponseSummaryUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    question?: QuestionUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    option?: QuestionOptionUpdateOneWithoutSurveyResponseSummaryNestedInput
    team?: TeamUpdateOneRequiredWithoutResponseSummariesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
  }

  export type SurveyResponseSummaryUncheckedUpdateWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutSurveyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionOptionCreateManyQuestionInput = {
    id?: string
    text: string
    order: number
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: number
    isOther?: boolean
  }

  export type QuestionResponseCreateManyQuestionInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    responseId: string
    teamId: number
  }

  export type SurveyResponseSummaryCreateManyQuestionInput = {
    id?: string
    surveyId: string
    questionTitle?: string | null
    responseId: string
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type QuestionOptionUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isOther?: BoolFieldUpdateOperationsInput | boolean
    team?: TeamUpdateOneRequiredWithoutQuestionOptionsNestedInput
    responses?: QuestionResponseUpdateManyWithoutOptionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    isOther?: BoolFieldUpdateOperationsInput | boolean
    responses?: QuestionResponseUncheckedUpdateManyWithoutOptionNestedInput
    SurveyResponseSummary?: SurveyResponseSummaryUncheckedUpdateManyWithoutOptionNestedInput
  }

  export type QuestionOptionUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: IntFieldUpdateOperationsInput | number
    isOther?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QuestionResponseUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    option?: QuestionOptionUpdateOneWithoutResponsesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutQuestionResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionResponsesNestedInput
  }

  export type QuestionResponseUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionResponseUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyResponseSummaryUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SurveyUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    option?: QuestionOptionUpdateOneWithoutSurveyResponseSummaryNestedInput
    team?: TeamUpdateOneRequiredWithoutResponseSummariesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
  }

  export type SurveyResponseSummaryUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionResponseCreateManyOptionInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    responseId: string
    teamId: number
  }

  export type SurveyResponseSummaryCreateManyOptionInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    responseId: string
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type QuestionResponseUpdateWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    question?: QuestionUpdateOneRequiredWithoutResponsesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutQuestionResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionResponsesNestedInput
  }

  export type QuestionResponseUncheckedUpdateWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    responseId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionResponseUncheckedUpdateManyWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    responseId?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyResponseSummaryUpdateWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SurveyUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    question?: QuestionUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    team?: TeamUpdateOneRequiredWithoutResponseSummariesNestedInput
    response?: SurveyResponseUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
  }

  export type SurveyResponseSummaryUncheckedUpdateWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutOptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    responseId?: StringFieldUpdateOperationsInput | string
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionResponseCreateManyResponseInput = {
    id?: string
    isOther?: boolean | null
    textValue?: string | null
    numberValue?: number | null
    booleanValue?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questionId: string
    questionTitle?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    optionId?: string | null
    teamId: number
  }

  export type SurveyResponseSummaryCreateManyResponseInput = {
    id?: string
    surveyId: string
    questionId: string
    questionTitle?: string | null
    optionId?: string | null
    textValue?: string | null
    questionFormat?: $Enums.QuestionFormat | null
    isOther?: boolean | null
    numberValue?: number | null
    booleanValue?: boolean | null
    teamId: number
    responseCount: number
    lastUpdated?: Date | string
  }

  export type QuestionResponseUpdateWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    option?: QuestionOptionUpdateOneWithoutResponsesNestedInput
    question?: QuestionUpdateOneRequiredWithoutResponsesNestedInput
    team?: TeamUpdateOneRequiredWithoutQuestionResponsesNestedInput
  }

  export type QuestionResponseUncheckedUpdateWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionResponseUncheckedUpdateManyWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type SurveyResponseSummaryUpdateWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    survey?: SurveyUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    question?: QuestionUpdateOneRequiredWithoutSurveyResponseSummaryNestedInput
    option?: QuestionOptionUpdateOneWithoutSurveyResponseSummaryNestedInput
    team?: TeamUpdateOneRequiredWithoutResponseSummariesNestedInput
  }

  export type SurveyResponseSummaryUncheckedUpdateWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SurveyResponseSummaryUncheckedUpdateManyWithoutResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    surveyId?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    questionTitle?: NullableStringFieldUpdateOperationsInput | string | null
    optionId?: NullableStringFieldUpdateOperationsInput | string | null
    textValue?: NullableStringFieldUpdateOperationsInput | string | null
    questionFormat?: NullableEnumQuestionFormatFieldUpdateOperationsInput | $Enums.QuestionFormat | null
    isOther?: NullableBoolFieldUpdateOperationsInput | boolean | null
    numberValue?: NullableIntFieldUpdateOperationsInput | number | null
    booleanValue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    teamId?: IntFieldUpdateOperationsInput | number
    responseCount?: IntFieldUpdateOperationsInput | number
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}